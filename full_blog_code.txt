Code snapshot from: E:\OneDrives\OneDrive\CODE\alvesmh.github.io

================================================================================
üìÑ File: .gitignore
================================================================================

# dependencies
node_modules/

# production build
dist/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# editor configs
.DS_Store
.vscode/
.env.local
.env


================================================================================
üìÑ File: CNAME
================================================================================

hugomartins.eu

================================================================================
üìÑ File: collect_code.py
================================================================================

import os

def save_code_to_txt(output_file="full_blog_code.txt"):
    # Get the current directory where the script is located
    base_dir = os.path.dirname(os.path.abspath(__file__))
    
    with open(os.path.join(base_dir, output_file), "w", encoding="utf-8") as out_file:
        out_file.write(f"Code snapshot from: {base_dir}\n\n")
        
        # Walk through the directory recursively
        for root, dirs, files in os.walk(base_dir):
            # Skip virtual environment or hidden folders if needed
            dirs[:] = [d for d in dirs if not d.startswith(".") and d not in ["__pycache__"]]
            
            # Sort files for consistent output
            files.sort()
            
            for filename in files:
                if filename == output_file:
                    continue  # Skip the output file itself
                
                file_path = os.path.join(root, filename)
                relative_path = os.path.relpath(file_path, base_dir)
                
                out_file.write("=" * 80 + "\n")
                out_file.write(f"üìÑ File: {relative_path}\n")
                out_file.write("=" * 80 + "\n\n")
                
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        out_file.write(f.read())
                except Exception as e:
                    out_file.write(f"‚ö†Ô∏è Could not read file: {e}\n")
                
                out_file.write("\n\n")
        
    print(f"‚úÖ All code has been saved to '{output_file}'")

if __name__ == "__main__":
    save_code_to_txt()


================================================================================
üìÑ File: environment.yml
================================================================================

name: blog
channels:
  - conda-forge         # more up‚Äëto‚Äëdate Node builds
  - defaults
dependencies:
  # --- runtimes ---
  - nodejs=20           # includes npm
  # --- handy CLI tools (optional) ---
  - git                 # so CI & VS¬†Code terminals ‚Äújust work‚Äù
  - python=3.11         # only if you plan to add scripts or Jupyter notes
  - pip                 # pairs with the Python line above


================================================================================
üìÑ File: index.html
================================================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <title>Augmented Minds</title>
  </head>
  <body class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


================================================================================
üìÑ File: package.json
================================================================================

{
  "name": "alvesmh-blog",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "postbuild": "cp dist/index.html dist/404.html",
    "deploy": "vite build && cp dist/index.html dist/404.html && gh-pages -d dist"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@hcaptcha/react-hcaptcha": "^1.12.0",
    "@mui/icons-material": "^7.2.0",
    "@mui/material": "^7.2.0",
    "framer-motion": "^11.0.0",
    "highlight.js": "^11.11.1",
    "katex": "^0.16.22",
    "lucide-react": "^0.441.0",
    "prop-types": "^15.8.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-helmet-async": "^2.0.5",
    "react-katex": "^3.1.0",
    "react-markdown": "^10.1.0",
    "react-router-dom": "^7.7.1",
    "rehype-highlight": "^7.0.2",
    "rehype-katex": "^7.0.1",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.1",
    "remark-math": "^6.0.0"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.16",
    "@vitejs/plugin-react": "^4.7.0",
    "autoprefixer": "^10.4.21",
    "gh-pages": "^6.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "vite": "^7.0.6",
    "vite-plugin-sitemap": "^0.8.2"
  }
}


================================================================================
üìÑ File: postcss.config.js
================================================================================

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
};


================================================================================
üìÑ File: tailwind.config.js
================================================================================

// tailwind.config.js
/** @type {import('tailwindcss').Config} */
import typography from '@tailwindcss/typography';
export default {
  content: ['./index.html','./src/**/*.{js,jsx,ts,tsx}'],
  theme: { extend: {} },
  plugins: [typography],
};



================================================================================
üìÑ File: vite.config.js
================================================================================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import Sitemap from 'vite-plugin-sitemap';
import path from 'node:path';
import fs from 'node:fs';

const OUT_DIR = 'dist';

// Ensure robots.txt exists on disk before sitemap's closeBundle
function writeRobotsPre() {
  return {
    name: 'write-robots-pre',
    apply: 'build',
    enforce: 'pre',            // run this closeBundle BEFORE others
    closeBundle() {
      const outDir = path.resolve(__dirname, OUT_DIR);
      const file = path.join(outDir, 'robots.txt');
      const fromPublic = path.resolve(__dirname, 'public/robots.txt');
      let source = 'User-agent: *\nAllow: /\nSitemap: https://hugomartins.eu/sitemap.xml\n';
      if (fs.existsSync(fromPublic)) {
        source = fs.readFileSync(fromPublic, 'utf8');
      }
      fs.mkdirSync(outDir, { recursive: true });
      fs.writeFileSync(file, source, 'utf8');   // <-- ensure file exists
    },
  };
}

export default defineConfig({
  plugins: [
    react(),
    writeRobotsPre(),             // must come BEFORE Sitemap in the array
    Sitemap({
      hostname: 'https://hugomartins.eu',
      exclude: ['/drafts/**'],
      dynamicRoutes: [
        '/', '/about', '/archive', '/contact',
        '/tutorials',
        '/tutorials/introduction-to-probability-distribution',
        '/tutorials/introduction-to-probability-distribution/foundations',
        '/tutorials/introduction-to-probability-distribution/discrete',
        '/tutorials/introduction-to-probability-distribution/discrete/bernoulli',
        '/tutorials/introduction-to-probability-distribution/discrete/binomial',
        '/tutorials/introduction-to-probability-distribution/discrete/geometric',
        '/tutorials/introduction-to-probability-distribution/discrete/negative-binomial',
        '/tutorials/introduction-to-probability-distribution/discrete/poisson',
        '/tutorials/introduction-to-probability-distribution/continuous',
        '/tutorials/introduction-to-probability-distribution/continuous/uniform',
        '/tutorials/introduction-to-probability-distribution/continuous/exponential',
        '/tutorials/introduction-to-probability-distribution/continuous/gamma',
        '/tutorials/introduction-to-probability-distribution/continuous/normal',
        '/tutorials/introduction-to-probability-distribution/continuous/clt',
        '/tutorials/introduction-to-probability-distribution/practice'
      ],
      // Keep robots generation OFF, since we‚Äôre writing the file ourselves:
      // generateRobotsTxt: false,
    }),
  ],
  base: '/', // custom domain root
  resolve: {
    alias: {
      '@': path.resolve(__dirname, 'src'),
      '@tutorials': path.resolve(__dirname, 'src/tutorials'),
    },
  },
  build: { sourcemap: true, outDir: OUT_DIR },
});


================================================================================
üìÑ File: public\favicon.ico
================================================================================

‚ö†Ô∏è Could not read file: 'utf-8' codec can't decode byte 0xa8 in position 14: invalid start byte


================================================================================
üìÑ File: public\profile.jpg
================================================================================

‚ö†Ô∏è Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte


================================================================================
üìÑ File: public\robots.txt
================================================================================

User-agent: *
Allow: /
Sitemap: https://hugomartins.eu/sitemap.xml



================================================================================
üìÑ File: public\probability\Probability-Banner.jpg
================================================================================

‚ö†Ô∏è Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte


================================================================================
üìÑ File: public\public\tutorials\introduction-to-probability-distribution\foundations\images\venn-placeholder.png
================================================================================

‚ö†Ô∏è Could not read file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte


================================================================================
üìÑ File: src\App.jsx
================================================================================

import React from 'react';
import { Routes, Route, useLocation } from 'react-router-dom';
import Header from './components/Header';
import Footer from './components/Footer';
import HomePage from './pages/Home';
import AboutPage from './pages/About';
import ArchivePage from './pages/Archive';
import ContactPage from './pages/Contact';
import PostPage from './pages/Post';
import ThankYou from './pages/ThankYou';
const TutorialsApp = React.lazy(() => import('./tutorials'));

export default function App() {
  const location = useLocation();
  const onTutorials = location.pathname.startsWith('/tutorials');

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      {!onTutorials && <Header />}

      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/about" element={<AboutPage />} />
        <Route path="/archive" element={<ArchivePage />} />
        <Route path="/contact" element={<ContactPage />} />
        <Route path="/post/:slug" element={<PostPage />} />
        <Route path="/thank-you" element={<ThankYou />} />
        <Route
          path="/tutorials/*"
          element={
            <React.Suspense fallback={<div className="p-8">Loading‚Ä¶</div>}>
              <TutorialsApp />
            </React.Suspense>
          }
        />
      </Routes>

      {!onTutorials && <Footer />}
    </div>
  );
}


================================================================================
üìÑ File: src\config.js
================================================================================

export const WEB3FORMS_KEY = (import.meta.env?.VITE_WEB3FORMS_KEY || '').trim();

================================================================================
üìÑ File: src\index.css
================================================================================

/* src/index.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Put any custom CSS *below* these directives. Examples: */

/* Example: base tweaks using valid CSS, not JS objects */
@layer base {
  h1 { @apply text-3xl md:text-4xl font-bold; }
  h2 { @apply text-2xl md:text-3xl font-semibold; }
}

/* Example: CSS variables (plain CSS syntax, each ends with ;) */
:root {
  --brand-h: 221;
  --brand-s: 83%;
  --brand-l: 53%;
}


================================================================================
üìÑ File: src\main.jsx
================================================================================

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { HelmetProvider } from 'react-helmet-async';
import App from './App';
import ThemeProvider from './themes';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <HelmetProvider>
      <ThemeProvider>
        <BrowserRouter basename={import.meta.env.BASE_URL}>
          <App />
        </BrowserRouter>
      </ThemeProvider>
    </HelmetProvider>
  </React.StrictMode>
);

================================================================================
üìÑ File: src\components\Canonical.jsx
================================================================================

// src/components/Canonical.jsx
import { Helmet } from 'react-helmet-async';

export default function Canonical({ path = '' }) {
  const href = `https://hugomartins.eu${path || (typeof window !== 'undefined' ? window.location.pathname : '')}`;
  return (
    <Helmet>
      <link rel="canonical" href={href} />
    </Helmet>
  );
}



================================================================================
üìÑ File: src\components\CategoryFilter.jsx
================================================================================

import React from 'react';
import PropTypes from 'prop-types';

const CategoryFilter = ({ categories, selected, onSelect }) => (
  <div className="flex flex-wrap gap-2">
    {categories.map((cat) => {
      const isActive = selected === cat.id;
      return (
        <button
          key={cat.id}
          onClick={() => onSelect(cat.id)}
          className={`px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 ${
            isActive
              ? 'bg-blue-600 text-white shadow'
              : 'bg-white text-gray-700 border border-gray-300 hover:border-blue-600 hover:text-blue-600'
          }`}
        >
          {cat.name} ({cat.count})
        </button>
      );
    })}
  </div>
);

CategoryFilter.propTypes = {
  categories: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string,
      name: PropTypes.string,
      count: PropTypes.number
    })
  ).isRequired,
  selected: PropTypes.string.isRequired,
  onSelect: PropTypes.func.isRequired
};

export default CategoryFilter;


================================================================================
üìÑ File: src\components\Footer.jsx
================================================================================

import React from 'react';
import { BookOpen } from 'lucide-react';
import { Link } from 'react-router-dom';

const prefetchTutorials = () => import('../tutorials');

export default function Footer() {
  const handleClick = (item) => {
    if (item === 'Home') {
      const url = new URL(window.location.href);
      url.searchParams.delete('q');
      window.history.replaceState({}, '', url.pathname);
    }
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  return (
    <footer className="bg-white border-t border-gray-200 py-12">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center">
          <Link to="/" className="flex items-center justify-center space-x-3 mb-4">
            <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
              <BookOpen className="w-5 h-5 text-white" />
            </div>
            <span className="text-xl font-bold text-gray-900">Augmented Minds</span>
          </Link>

          <p className="text-gray-600 mb-6">Sharing ideas, one post at a time.</p>

          <div className="flex justify-center space-x-6 mb-6">
            {['Home', 'Tutorials', 'About', 'Archive', 'Contact'].map((item) => (
              <Link
                key={item}
                to={item === 'Home' ? '/' : `/${item.toLowerCase()}`}
                onMouseEnter={item === 'Tutorials' ? prefetchTutorials : undefined}
                onClick={() => handleClick(item)}
                className="text-gray-400 hover:text-blue-600 transition-colors"
              >
                {item}
              </Link>
            ))}
          </div>

          <div className="text-sm text-gray-500">
            ¬© {new Date().getFullYear()} Augmented Minds Blog. Built with React.
          </div>
        </div>
      </div>
    </footer>
  );
}


================================================================================
üìÑ File: src\components\Header.jsx
================================================================================

import React, { useState } from 'react';
import { BookOpen, Menu } from 'lucide-react';
import { NavLink, Link } from 'react-router-dom';

const navLinks = ['Home', 'Tutorials', 'About', 'Archive', 'Contact'];
const toPath = (item) => (item === 'Home' ? '/' : `/${item.toLowerCase()}`);
const prefetchTutorials = () => import('../tutorials');

export default function Header() {
  const [menuOpen, setMenuOpen] = useState(false);

  const linkClass = ({ isActive }) =>
    isActive ? 'text-blue-700 font-semibold' : 'text-gray-700 hover:text-blue-600 transition-colors';

  const clearSearchOnHome = (item) => {
    if (item !== 'Home') return;
    const url = new URL(window.location.href);
    url.searchParams.delete('q');
    window.history.replaceState({}, '', url.pathname);
  };

  return (
    <header className="bg-white shadow-sm border-b border-slate-200">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center py-6">
          <Link to="/" className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
              <BookOpen className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Augmented Minds</h1>
              <p className="text-sm text-gray-600">Personal & Academic Insights</p>
            </div>
          </Link>

          {/* Desktop Nav */}
          <nav className="hidden md:flex space-x-8" aria-label="Primary">
            {navLinks.map((item) => (
              <NavLink
                key={item}
                to={toPath(item)}
                className={linkClass}
                onMouseEnter={item === 'Tutorials' ? prefetchTutorials : undefined}
                onClick={() => clearSearchOnHome(item)}
              >
                {item}
              </NavLink>
            ))}
          </nav>

          {/* Mobile Menu Icon */}
          <button
            className="md:hidden text-gray-700"
            onClick={() => setMenuOpen(!menuOpen)}
            aria-expanded={menuOpen}
            aria-controls="mobile-menu"
            aria-label="Toggle menu"
          >
            <Menu className="w-6 h-6" />
          </button>
        </div>

        {/* Mobile Nav */}
        {menuOpen && (
          <div id="mobile-menu" className="md:hidden flex flex-col space-y-4 pb-4" aria-label="Mobile">
            {navLinks.map((item) => (
              <NavLink
                key={item}
                to={toPath(item)}
                className={linkClass}
                onMouseEnter={item === 'Tutorials' ? prefetchTutorials : undefined}
                onClick={() => { clearSearchOnHome(item); setMenuOpen(false); }}
              >
                {item}
              </NavLink>
            ))}
          </div>
        )}
      </div>
    </header>
  );
}


================================================================================
üìÑ File: src\components\Hero.jsx
================================================================================

import React from 'react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';

const Hero = () => (
  <section className="py-16 px-4 sm:px-6 lg:px-8">
    <div className="max-w-4xl mx-auto text-center">
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
      >
        <h2 className="text-3xl sm:text-4xl md:text-5xl font-bold text-gray-900 mb-6">
          Welcome to {' '}
          <span className="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
            My Blog
          </span>
        </h2>
        <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
          I explore how Generative AI can transform learning, thinking, and decision-making‚Äîwithout replacing what makes us human 
          
        </p>
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          {/* Link to latest posts section on Home page (scrolls within home) */}
          <a
            href="#latest"
            className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-8 py-3 rounded-lg font-semibold hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 text-center"
          >
            Read Latest Posts
          </a>
          {/* Link to About page */}
          <Link
            to="/about"
            className="border-2 border-gray-300 text-gray-700 px-8 py-3 rounded-lg font-semibold hover:border-blue-600 hover:text-blue-600 transition-colors text-center"
          >
            About Me
          </Link>
        </div>
      </motion.div>
    </div>
  </section>
);

export default Hero;


================================================================================
üìÑ File: src\components\MarkdownRenderer.jsx
================================================================================

import React from "react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import remarkMath from "remark-math";
import rehypeRaw from "rehype-raw";
import rehypeKatex from "rehype-katex";
import rehypeHighlight from "rehype-highlight";
import 'katex/dist/katex.min.css';
import "highlight.js/styles/github-dark.css";

const MarkdownRenderer = ({ source }) => (
  <div className="prose lg:prose-lg max-w-none">
    <ReactMarkdown
      remarkPlugins={[remarkGfm, remarkMath]}
      rehypePlugins={[rehypeRaw, rehypeKatex, rehypeHighlight]}
    >
      {source}
    </ReactMarkdown>
  </div>
);

export default MarkdownRenderer;


================================================================================
üìÑ File: src\components\Pagination.jsx
================================================================================

import React from 'react';
import PropTypes from 'prop-types';

const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  if (totalPages <= 1) return null;

  const pages = Array.from({ length: totalPages }, (_, i) => i + 1);

  return (
    <div className="flex justify-center mt-12">
      <nav className="flex gap-2" aria-label="Pagination">
        <button
          onClick={() => onPageChange(Math.max(currentPage - 1, 1))}
          disabled={currentPage === 1}
          className="px-4 py-2 border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
        >
          Previous
        </button>

        {pages.map((page) => (
          <button
            key={page}
            onClick={() => onPageChange(page)}
            aria-current={page === currentPage ? 'page' : undefined}
            className={`px-4 py-2 rounded-lg transition-colors ${
              page === currentPage
                ? 'bg-blue-600 text-white'
                : 'border border-gray-300 hover:bg-gray-50'
            }`}
          >
            {page}
          </button>
        ))}

        <button
          onClick={() => onPageChange(Math.min(currentPage + 1, totalPages))}
          disabled={currentPage === totalPages}
          className="px-4 py-2 border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
        >
          Next
        </button>
      </nav>
    </div>
  );
};

Pagination.propTypes = {
  currentPage: PropTypes.number.isRequired,
  totalPages: PropTypes.number.isRequired,
  onPageChange: PropTypes.func.isRequired
};

export default Pagination;


================================================================================
üìÑ File: src\components\PostCard.jsx
================================================================================

import React from 'react';
import PropTypes from 'prop-types';
import { Calendar, Tag, ArrowRight } from 'lucide-react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { ensureSlug, makePostPath } from '../utils/slugify';

export default function PostCard({ post, animationDelay = 0 }) {
  const p = ensureSlug(post);
  return (
    <motion.article
      initial={{ y: 20, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      transition={{ duration: 0.5, delay: animationDelay }}
      className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-300"
    >
      <div className="p-6">
        <div className="flex items-center gap-4 text-sm text-gray-500 mb-3">
          <div className="flex items-center gap-1">
            <Calendar className="w-4 h-4" />
            <span>{new Date(p.date).toLocaleDateString()}</span>
          </div>
          <span>‚Ä¢</span>
          <span>{p.readTime}</span>
        </div>
        <h3 className="text-2xl font-bold mb-3">
          <Link to={makePostPath(p)} className="text-gray-900 hover:text-blue-600 transition-colors">
            {p.title}
          </Link>
        </h3>
        <p className="text-gray-600 mb-4 leading-relaxed">{p.excerpt}</p>
        <div className="flex flex-wrap gap-2 mb-4">
          {(p.tags || []).map((tag) => (
            <span key={tag} className="inline-flex items-center gap-1 px-3 py-1 bg-blue-50 text-blue-700 text-sm rounded-full">
              <Tag className="w-3 h-3" />
              {tag}
            </span>
          ))}
        </div>
        <Link to={makePostPath(p)} className="inline-flex items-center gap-2 text-blue-600 font-semibold hover:text-blue-700 transition-colors">
          Read More <ArrowRight className="w-4 h-4" />
        </Link>
      </div>
    </motion.article>
  );
}

PostCard.propTypes = {
  post: PropTypes.object.isRequired,
  animationDelay: PropTypes.number
};


================================================================================
üìÑ File: src\components\PostsGrid.jsx
================================================================================

import React from 'react';
import { Link } from 'react-router-dom';
import { Calendar, Clock } from 'lucide-react';
import { ensureSlug, makePostPath } from '../utils/slugify';

// Fallback reading-time estimator (200 wpm) if your data doesn't provide it
function estimateMinutes(p) {
  const explicit = p.readingTime || p.readTime || p.readTimeMin || p.readingTimeMin || p.minutes;
  if (explicit) {
    const n = Number(String(explicit).match(/\d+/)?.[0]);
    return Number.isFinite(n) ? n : String(explicit);
 }

  const text =
    (p.content || p.markdown || p.excerpt || p.title || '').toString();
  const words = text.trim().split(/\s+/).filter(Boolean).length;
  return Math.max(1, Math.round(words / 200));
}

function formatDate(d) {
  try {
    // Old layout looks dd/mm/yyyy-ish; en-GB matches that
    return new Date(d).toLocaleDateString('en-GB');
  } catch {
    return '';
  }
}

export default function PostsGrid({ posts = [] }) {
  const items = posts.map(ensureSlug);

  if (!items.length) {
    return (
      <div className="bg-white border rounded-xl p-6 text-center text-gray-700">
        No posts found. Try clearing filters or search terms.
      </div>
    );
  }

  // OLD LOOK: stacked cards, not a multi-column grid
  return (
    <div className="space-y-6">
      {items.map((p) => {
        const minutes = estimateMinutes(p);
        const dateLabel = formatDate(p.date || p.publishedAt);
        const tags = Array.isArray(p.tags) ? p.tags : [];
        const category = p.category ? [p.category] : [];

        return (
          <article
            key={p.slug}
            className="bg-white border border-slate-200 rounded-xl shadow-sm px-5 py-4"
          >
            {/* Meta row: date ‚Ä¢ minutes */}
            <div className="flex items-center gap-4 text-sm text-slate-500">
              {dateLabel && (
                <div className="inline-flex items-center gap-2">
                  <Calendar className="w-4 h-4" aria-hidden="true" />
                  <time dateTime={p.date}>{dateLabel}</time>
                </div>
              )}
              <span aria-hidden="true">‚Ä¢</span>
              <div className="inline-flex items-center gap-2">
                <Clock className="w-4 h-4" aria-hidden="true" />
                <span>{typeof minutes === 'number' ? `${minutes} min read` : minutes}</span>
              </div>
            </div>

            {/* Title */}
            <h3 className="mt-2 text-xl sm:text-2xl font-semibold text-slate-900 leading-snug">
              <Link to={makePostPath(p)} className="hover:text-blue-700">
                {p.title}
              </Link>
            </h3>

            {/* Excerpt */}
            {p.excerpt && (
              <p className="mt-2 text-slate-700">
                {p.excerpt}
              </p>
            )}

            {/* Pills: category first, then tags */}
            <div className="mt-3 flex flex-wrap gap-2">
              {[
                ...(p.category ? [p.category] : []),
                ...(Array.isArray(p.tags) ? p.tags : [])
              ].map((t, i) => (
                <span
                  key={`${p.slug}-tag-${i}-${t}`}
                  className="inline-block rounded-full border border-blue-200 bg-blue-50 text-blue-700 text-xs px-2 py-1"
                >
                  {t}
                </span>
              ))}
            </div>

            {/* Read more */}
            <div className="mt-3">
              <Link
                to={makePostPath(p)}
                className="inline-flex items-center text-blue-700 hover:underline font-medium"
                aria-label={`Read more about ${p.title}`}
              >
                Read More ‚Üí
              </Link>
            </div>
          </article>
        );
      })}
    </div>
  );
}



================================================================================
üìÑ File: src\components\SearchBar.jsx
================================================================================

import React from 'react';
import { Search } from 'lucide-react';
import PropTypes from 'prop-types';

const SearchBar = ({ value, onChange }) => (
  <div className="relative">
    <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
    <input
      type="text"
      placeholder="Search posts..."
      aria-label="Search posts"
      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      value={value}
      onChange={(e) => onChange(e.target.value)}
    />
  </div>
);

SearchBar.propTypes = {
  value: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired
};

export default SearchBar;


================================================================================
üìÑ File: src\components\Sidebar\AboutCard.jsx
================================================================================

import React from 'react';
import { Github, Linkedin, Mail } from 'lucide-react';
import { Link } from 'react-router-dom';

const AboutCard = () => {
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      {/* Clickable header + blurb linking to About */}
      <Link
        to="/about"
        onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
        className="block text-center mb-6 hover:opacity-90 transition-opacity focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 rounded-lg"
        aria-label="Open About page"
        title="Open About page"
      >
        {/* Profile Image */}
        <div className="text-center mb-6">
          <img
            src="/profile.jpg"
            alt="Hugo Martins"
            loading="lazy"
            decoding="async"
            className="w-24 h-24 rounded-full mx-auto mb-4 object-cover shadow-md"
          />
          <h3 className="text-xl font-bold text-gray-900">Hugo Martins, PhD.</h3>
          <p className="text-gray-600">
            <strong><em>AI should amplify human potential‚Äînot replace it</em></strong>
          </p>
        </div>

        {/* About Text */}
        <p className="text-gray-700 leading-relaxed text-center">
          Tools, frameworks, and reflections at intersection of technology, human behaviour and education.
        </p>
      </Link>

      {/* Socials */}
      <div className="mt-6 flex justify-center gap-4 text-gray-600">
        <a href="https://github.com/alvesmh" aria-label="GitHub" className="hover:text-gray-900"><Github /></a>
        <a href="https://www.linkedin.com/in/hugo-alves-martins" aria-label="LinkedIn" className="hover:text-gray-900"><Linkedin /></a>
        <Link
          to="/contact"
          aria-label="Contact form"
          title="Open contact form"
          onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
          className="hover:text-gray-900 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 rounded-lg"
        >
          <Mail />
        </Link>
      </div>
    </div>
  );
};

export default AboutCard;



================================================================================
üìÑ File: src\components\Sidebar\NewsletterCard.jsx
================================================================================

// src/components/Sidebar/NewsletterCard.jsx
import React, { useState } from 'react';
import HCaptcha from '@hcaptcha/react-hcaptcha';
import { WEB3FORMS_KEY } from '../../config';

const HCAPTCHA_SITEKEY = '50b2fe65-b00b-4b9e-ad62-3ba471098be2';

const NewsletterCard = () => {
  const [email, setEmail] = useState('');
  const [status, setStatus] = useState('');
  const [sending, setSending] = useState(false);

  const [captchaToken, setCaptchaToken] = useState('');
  const [captchaError, setCaptchaError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (sending) return;

    if (!WEB3FORMS_KEY) {
      setStatus('‚ùå Missing Web3Forms access key. Set VITE_WEB3FORMS_KEY in your build environment.');
      return;
    }
    if (!captchaToken) {
      setCaptchaError('Please complete the captcha.');
      return;
    }

    setSending(true);
    setStatus('');
    setCaptchaError('');

    try {
      const payload = {
        access_key: WEB3FORMS_KEY,
        from_name: 'New Newsletter Subscriber',
        subject: 'üÜï New newsletter subscriber',
        email: (email || '').trim().toLowerCase(),
        reply_to: (email || '').trim().toLowerCase(),
        botcheck: '',
        'h-captcha-response': captchaToken,
      };

      const res = await fetch('https://api.web3forms.com/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Accept: 'application/json' },
        body: JSON.stringify(payload),
      });

      const json = await res.json().catch(() => ({}));

      if (res.ok && (json?.success || json?.ok)) {
        setStatus('‚úÖ You have subscribed successfully!');
        setEmail('');
        setCaptchaToken('');
      } else {
        throw new Error(json?.message || `HTTP ${res.status}`);
      }
    } catch (err) {
      console.error('Web3Forms error:', err);
      setStatus('‚ùå Something went wrong. Please try again.');
    } finally {
      setSending(false);
    }
  };

  return (
    <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl p-6 text-white">
      <h3 className="text-lg font-bold mb-2">Stay Updated</h3>
      <p className="text-blue-100 mb-4 text-sm">
        Get notified when I publish new posts about technology and academia.
      </p>

      <form onSubmit={handleSubmit} className="space-y-3" noValidate>
        <input
          type="text"
          name="botcheck"
          tabIndex={-1}
          autoComplete="off"
          style={{ display: 'none' }}
          onChange={() => {}}
        />

        <input
          type="email"
          required
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Enter your email"
          className="w-full px-4 py-2 rounded-lg text-gray-900 placeholder-gray-500 focus:ring-2 focus:ring-white focus:outline-none"
        />

        <div className="flex justify-center">
          <HCaptcha
            sitekey={HCAPTCHA_SITEKEY}
            reCaptchaCompat={false}
            onVerify={(token) => { setCaptchaToken(token); setCaptchaError(''); }}
            onExpire={() => setCaptchaToken('')}
            onError={() => setCaptchaError('Captcha failed to load. Please retry.')}
          />
        </div>
        {captchaError && <p className="text-white/90 text-sm text-center">{captchaError}</p>}

        <button
          type="submit"
          disabled={sending}
          className="w-full bg-white text-blue-600 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors disabled:opacity-60"
        >
          {sending ? 'Subscribing‚Ä¶' : 'Subscribe'}
        </button>
      </form>

      {status && <p className="mt-3 text-sm">{status}</p>}
    </div>
  );
};

export default NewsletterCard;


================================================================================
üìÑ File: src\components\Sidebar\PopularTags.jsx
================================================================================

import React from 'react';
import PropTypes from 'prop-types';

const PopularTags = ({ tags, onClick }) => (
  <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
    <h3 className="text-lg font-bold text-gray-900 mb-4">Popular Topics</h3>
    <div className="flex flex-wrap gap-2">
      {tags.map((tag) => (
        <button
          key={tag}
          onClick={() => onClick?.(tag)}
          className="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full hover:bg-blue-100 hover:text-blue-700 transition-colors"
        >
          {tag}
        </button>
      ))}
    </div>
  </div>
);

PopularTags.propTypes = {
  tags: PropTypes.arrayOf(PropTypes.string).isRequired,
  onClick: PropTypes.func
};

export default PopularTags;


================================================================================
üìÑ File: src\components\Sidebar\index.jsx
================================================================================

import React from 'react';
import AboutCard from './AboutCard';
import PopularTags from './PopularTags';
import NewsletterCard from './NewsletterCard';

/**
 * Sidebar now accepts:
 * - popularTags: string[]  (pre-computed list of tags)
 * - onTagClick: (tag: string) => void
 */
const Sidebar = ({ popularTags = [], onTagClick }) => (
  <aside className="lg:w-1/3 space-y-8">
    <AboutCard />
    <PopularTags tags={popularTags} onClick={onTagClick} />
    <NewsletterCard />
  </aside>
);

export default Sidebar;


================================================================================
üìÑ File: src\data\posts.jsx
================================================================================

import MarkdownRenderer from "../components/MarkdownRenderer";

export const POSTS = [
  { 
  id: 1,
    slug: "future_of_work_and_worth",
    title: "‚ÄúWork, Wealth, and Worth in the Age of AI",
    excerpt:
      "If we want an AI economy that delivers both comfort and fulfillment, we must confront the structural flaws in how we prepare, employ, and reward people. Policy that still taxes yesterday‚Äôs value, HR that manages yesterday‚Äôs jobs, and education that teaches yesterday‚Äôs tasks will waste what AI makes possible.",
    category: "Society",
    date: "2025-08-12",
    readTime: "12 min read",
    tags: ["Education", "Management", "Society"],
  },
  {
    id: 2,
    slug: "why_genai_literacy_new_entry_level_skill",
    title: "‚ÄúMediocre Expertise‚Äù Will Be Automated Away",
    excerpt:
      "Generative AI is reshaping the job market, wiping out many entry-level roles while rewarding specialised expertise. What remains valuable is specialised, adaptive expertise ‚Äî the kind that can be amplified by generative AI, not replaced by it.",
    category: "Management",
    date: "2025-08-09",
    readTime: "7 min read",
    tags: ["Education", "Management"],
  },
  {
    id: 3,
    slug: "prompting_science",
    title: "The Pedagogy of Prompting: Teaching Students to Think with AI",
    excerpt:
      "Prompting is fast becoming a new literacy. In this post, I explore how we can teach students not just to use GenAI tools, but to engage them critically‚Äîturning passive consumption into active, reflective learning.",
    category: "Education",
    date: "2025-08-01",
    readTime: "8 min read",
    tags: ["Education", "AI-Literacy"],
  },
  {
    id: 4,
    slug: "offloading_to_augmentation",
    title: "From Offloading to Augmentation: Reclaiming Cognitive Work in the Age of AI",
    excerpt:
      "When does using AI become a shortcut‚Äîand when does it become a catalyst for deeper thinking? I unpack the psychology of cognitive offloading and share strategies for designing AI workflows that support, rather than supplant, human thought.",
    category: "Education",
    date: "2025-07-11",
    readTime: "8 min read",
    tags: ["Education", "Cognition"],
  },
  {
    id: 5,
    slug: "flipped_classroom",
    title: "The Flipped Classroom Gets an Upgrade: Using GenAI for Deeper Learning",
    excerpt:
      "How can GenAI transform the flipped classroom model? I share real-world implementations, including Socratic bots, instant feedback loops, and personalized study pathways that enhance active learning and classroom engagement.",
    category: "Education",
    date: "2025-06-03",
    readTime: "9 min read",
    tags: ["Education", "Flipped-Learning"],
  },
  {
    id: 6,
    slug: "beyond-the-syllabus",
    title: "Beyond the Syllabus: How AI is Changing What (and How) We Teach",
    excerpt:
      "As AI reshapes knowledge work, higher education must evolve. This post explores what skills matter most in an AI-infused world‚Äîcuration, synthesis, judgment‚Äîand how educators can respond with agile, adaptive curricula.",
    category: "Education",
    date: "2025-04-25",
    readTime: "8 min read",
    tags: ["Education", "Curriculum"],
  },
  {
    id: 7,
    slug: "co-thinking-model",
    title: "Co-Thinking with Machines: A New Model for Human‚ÄìAI Collaboration",
    excerpt:
      "Most AI tools today are task-focused. But what if they could be idea partners? I propose a model for co-thinking with LLMs‚Äîone where machines ask better questions, not just give better answers.",
    category: "Society",
    date: "2025-01-30",
    readTime: "7 min read",
    tags: ["AI-Philosophy", "Cognition"],
  },
  {
    id: 8,
    slug: "slow-thinking-fast-ai",
    title: "Teaching Slow Thinking in a Fast AI World",
    excerpt:
      "GenAI encourages rapid, polished answers‚Äîbut education is about learning to think, not just respond. This post explores how we can help students build ‚ÄúSystem 2‚Äù habits of deliberate analysis, skepticism, and reflection in a world increasingly shaped by fluent AI.",
    category: "Education",
    date: "2024-06-19",
    readTime: "8 min read",
    tags: ["Critical-Thinking", "Psychology"],
  },
  {
    id: 9,
    slug: "ai-literacy-guiding-principles",
    title: "Guiding Principles for AI Literacy in Universities",
    excerpt:
      "If students are going to use GenAI, we need to teach them how to use it well. This post proposes five guiding principles for responsible AI integration in higher education‚Äîrooted in pedagogy, ethics, and the cultivation of slow, structured thinking.",
    category: "Education",
    date: "2023-12-05",
    readTime: "7 min read",
    tags: ["AI-Literacy", "Ethics", "Teaching"],
  },
];

export const CATEGORIES = [
  { id: 'all', name: 'All Posts' },
  { id: 'education', name: 'Education' },
  { id: 'management', name: 'Management' },
  { id: 'society', name: 'Society' },
];



================================================================================
üìÑ File: src\hooks\usePosts.jsx
================================================================================

import { useMemo } from 'react';
import { POSTS as RAW_POSTS } from '../data/posts';
import { ensureSlug } from '../utils/slugify';

export function usePosts({
  searchTerm = '',
  selectedCategory = 'all',
  currentPage = 1,
  postsPerPage = 6,
}) {
  // Normalize posts to always include a `slug`
  const posts = useMemo(() => RAW_POSTS.map(ensureSlug), []);

  // Filter + sort
  const filtered = useMemo(() => {
    const q = (searchTerm || '').trim().toLowerCase();
    const cat = (selectedCategory || 'all').toLowerCase();

    return posts
      .filter((p) => {
        // Category
        if (cat !== 'all' && (p.category || '').toLowerCase() !== cat) return false;

        // Search (title, excerpt, tags)
        if (!q) return true;
        const inTitle = (p.title || '').toLowerCase().includes(q);
        const inExcerpt = (p.excerpt || '').toLowerCase().includes(q);
        const inTags = (p.tags || []).some((t) => (t || '').toLowerCase().includes(q));
        return inTitle || inExcerpt || inTags;
      })
      .sort((a, b) => new Date(b.date) - new Date(a.date));
  }, [posts, searchTerm, selectedCategory]);

  // Pagination
  const totalPages = Math.max(1, Math.ceil(filtered.length / postsPerPage));
  const pageIndex = Math.min(Math.max(1, currentPage), totalPages) - 1;
  const start = pageIndex * postsPerPage;
  const paginatedPosts = filtered.slice(start, start + postsPerPage);

  return { paginatedPosts, totalPages, total: filtered.length };
}



================================================================================
üìÑ File: src\pages\About.jsx
================================================================================

import React from 'react';
import AboutCard from '../components/Sidebar/AboutCard';
import Canonical from '../components/Canonical'

const AboutPage = () => {
  return (
    <div className="p-6 max-w-4xl mx-auto">
      <Canonical path="/about" />
      <h1 className="text-3xl font-bold mb-4">About Me</h1>

      <p className="mb-4">
        Hi, I‚Äôm <strong>Hugo Martins</strong>
      </p>

      <p className="mb-4">
        I teach <em>Science and Technology for Humanity</em> at Nanyang Technological University (NTU), a course that examines the societal, economic, and ethical implications of emerging technologies like <strong>Artificial Intelligence</strong>, <strong>Blockchain</strong>, and <strong>Longevity Science</strong>.
      </p>
      <br />

      <hr style={{ border: 'none', height: '2px', backgroundColor: '#ccc' }} />
      <br />
      <p className="mb-4">
        My interests sit at the intersection of <strong>technology</strong>, <strong>education</strong>, and <strong>organizational behaviour</strong>. I explore AI-powered tools, automation scripts, and intelligent dashboards that simplify complex workflows in education and research‚Äîfreeing up time and attention for what really matters: <strong>critical thinking</strong>, <strong>creativity</strong>, and <strong>sense-making</strong>.
      </p>
      <br />

      <hr style={{ border: 'none', height: '2px', backgroundColor: '#ccc' }} />
      <br />
      <p className="mb-4">
        I believe in <strong>Augmented Intelligence</strong>‚Äîthat AI should amplify, not replace, human potential. My current projects explore:
      </p>

      <ul className="list-disc list-inside mb-4">
        <li><strong>Retrieval-Augmented Generation (RAG) pipelines for research and learning</strong></li>
        <li><strong>Flipped classroom augmentation using generative AI</strong></li>
        <li><strong>Human‚ÄìAI interaction design and ethical automation</strong></li>
        <li><strong>Social and psychological impacts of technological change in business and society</strong></li>
      </ul>
      <br />

      <hr style={{ border: 'none', height: '2px', backgroundColor: '#ccc' }} />
      <br />
      <p className="mb-4">
        This blog is where I share what I‚Äôm building, thinking, and experimenting with‚Äîwhether it‚Äôs a <strong>prompt framework for educators</strong>, a <strong>LLM-powered avatar</strong>, a <strong>scalable RAG prototype</strong>, or reflections on the future of learning in an AI-saturated world.
      </p>

      <p className="mb-4">
        Thanks for visiting. Let‚Äôs imagine better human‚Äìmachine futures‚Äîtogether.
      </p>
      <br />

      {/* Reuse the AboutCard component for bio and social links */}
      <div className="mt-8">
        <AboutCard />
      </div>
    </div>
  );
};

export default AboutPage;



================================================================================
üìÑ File: src\pages\Archive.jsx
================================================================================

import React, { useMemo } from 'react';
import Canonical from '../components/Canonical';
import { Link } from 'react-router-dom';
import { POSTS as RAW_POSTS } from '../data/posts';
import { ensureSlug, makePostPath } from '../utils/slugify';

export default function Archive() {
  const posts = useMemo(() => RAW_POSTS.map(ensureSlug), []);
  const sorted = useMemo(() => [...posts].sort((a,b) => new Date(b.date) - new Date(a.date)), [posts]);

  return (
    <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <Canonical path="/archive" />
      <h1 className="text-3xl font-bold text-gray-900 mb-8">Archive</h1>
      <ul className="divide-y divide-gray-300">
        {sorted.map((p) => (
          <li key={p.slug} className="py-4 flex items-center justify-between">
            <Link to={makePostPath(p)} className="text-blue-600 hover:text-blue-800 hover:underline">
              {p.title}
            </Link>
            <span className="text-sm text-gray-600">
              {p.date ? new Date(p.date).toLocaleDateString(undefined, { year:'numeric', month:'long', day:'numeric' }) : ''}
            </span>
          </li>
        ))}
      </ul>
    </main>
  );
}




================================================================================
üìÑ File: src\pages\Contact.jsx
================================================================================

import React, { useState } from 'react';
import Canonical from '../components/Canonical';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import { useNavigate } from 'react-router-dom';
import HCaptcha from '@hcaptcha/react-hcaptcha';
import { WEB3FORMS_KEY } from '../config';

const HCAPTCHA_SITEKEY = '50b2fe65-b00b-4b9e-ad62-3ba471098be2';

const ContactPage = () => {
  const navigate = useNavigate();

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');

  const [status, setStatus] = useState('');
  const [sending, setSending] = useState(false);

  const [captchaToken, setCaptchaToken] = useState('');
  const [captchaError, setCaptchaError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (sending) return;

    // Ensure the Web3Forms key is present at build-time
    const ACCESS_KEY = WEB3FORMS_KEY;
    if (!ACCESS_KEY) {
      setStatus('‚ùå Missing Web3Forms access key. Set VITE_WEB3FORMS_KEY in your build environment.');
      return;
    }

    // Require captcha
    if (!captchaToken) {
      setCaptchaError('Please complete the captcha.');
      return;
    }

    setSending(true);
    setStatus('');
    setCaptchaError('');

    try {
      const payload = {
        access_key: ACCESS_KEY,                  // ‚úÖ use the same constant
        from_name: 'New Contact Message',
        subject: `üì© New contact from ${name}`,
        name,
        email: email.trim().toLowerCase(),
        message,
        reply_to: email.trim().toLowerCase(),
        botcheck: '',
        'h-captcha-response': captchaToken,
      };

      const res = await fetch('https://api.web3forms.com/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Accept: 'application/json' },
        body: JSON.stringify(payload),
      });

      const json = await res.json().catch(() => ({}));
      if (res.ok && (json?.success || json?.ok)) {
        setName('');
        setEmail('');
        setMessage('');
        setCaptchaToken('');
        navigate('/thank-you', { replace: true });
      } else {
        throw new Error(json?.message || `HTTP ${res.status}`);
      }
    } catch (err) {
      console.error('Web3Forms error:', err);
      setStatus('‚ùå Something went wrong. Please try again.');
    } finally {
      setSending(false);
    }
  };

  return (
    <main className="max-w-lg mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <Canonical path="/contact" />
      <h1 className="text-3xl font-bold text-gray-900 mb-8 text-center">Contact</h1>

      <form onSubmit={handleSubmit} className="space-y-6" noValidate>
        {/* Honeypot */}
        <input
          type="text"
          name="botcheck"
          tabIndex={-1}
          autoComplete="off"
          style={{ display: 'none' }}
          onChange={() => {}}
        />

        <TextField
          label="Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          fullWidth
          required
        />
        <TextField
          label="Email"
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          fullWidth
          required
        />
        <TextField
          label="Message"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          multiline
          rows={4}
          fullWidth
          required
        />

        <div className="flex justify-center">
          <HCaptcha
            sitekey={HCAPTCHA_SITEKEY}
            reCaptchaCompat={false}
            onVerify={(token) => { setCaptchaToken(token); setCaptchaError(''); }}
            onExpire={() => setCaptchaToken('')}
            onError={() => setCaptchaError('Captcha failed to load. Please retry.')}
          />
        </div>
        {captchaError && <p className="text-red-600 text-sm text-center">{captchaError}</p>}

        <Button type="submit" variant="contained" color="primary" fullWidth disabled={sending}>
          {sending ? 'Sending‚Ä¶' : 'Send Message'}
        </Button>
      </form>

      {status && <p className="mt-4 text-center text-gray-700">{status}</p>}
    </main>
  );
};

export default ContactPage;


================================================================================
üìÑ File: src\pages\Home.jsx
================================================================================

import React, { useState, useMemo, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import Canonical from '../components/Canonical';
import Hero from '../components/Hero';
import SearchBar from '../components/SearchBar';
import CategoryFilter from '../components/CategoryFilter';
import PostsGrid from '../components/PostsGrid';
import Pagination from '../components/Pagination';
import Sidebar from '../components/Sidebar';
import { usePosts } from '../hooks/usePosts';
import { POSTS, CATEGORIES as BASE_CATEGORIES } from '../data/posts';
import { ensureSlug } from '../utils/slugify'; // <- ensure every post has a slug

const POSTS_PER_PAGE = 6;

const HomePage = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [currentPage, setCurrentPage] = useState(1);

  // Optional: make on-site search sharable & compatible with SearchAction
  useEffect(() => {
    const q = new URLSearchParams(window.location.search).get('q');
    if (q && !searchTerm) setSearchTerm(q);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    const url = new URL(window.location.href);
    if (searchTerm) url.searchParams.set('q', searchTerm);
    else url.searchParams.delete('q');
    window.history.replaceState({}, '', url);
  }, [searchTerm]);

  // Reset paging when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, selectedCategory]);

  const { paginatedPosts, totalPages } = usePosts({
    searchTerm,
    selectedCategory,
    currentPage,
    postsPerPage: POSTS_PER_PAGE
  });

  // Ensure slug-only routing: normalize posts to include a slug
  const postsForGrid = useMemo(
    () => (paginatedPosts || []).map(ensureSlug),
    [paginatedPosts]
  );

  // Case-insensitive category counts
  const categories = useMemo(
    () =>
      BASE_CATEGORIES.map((cat) => {
        const id = (cat.id || '').toLowerCase();
        const count =
          id === 'all'
            ? POSTS.length
            : POSTS.filter((p) => (p.category || '').toLowerCase() === id).length;
        return { ...cat, count };
      }),
    []
  );

  // Popular tags (Top 8) computed from posts
  const popularTags = useMemo(() => {
    const map = new Map();
    for (const p of POSTS) {
      for (const tag of p.tags || []) {
        map.set(tag, (map.get(tag) || 0) + 1);
      }
    }
    return Array.from(map.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 8)
      .map(([tag]) => tag);
  }, []);

  // --- Structured Data (WebSite) ---
  const websiteJsonLd = {
    "@context": "https://schema.org",
    "@type": "WebSite",
    "name": "Augmented Minds",
    "alternateName": "Augmented Minds Blog",
    "url": "https://hugomartins.eu/",
    "inLanguage": "en",
    "sameAs": [
      "https://github.com/alvesmh",
      "https://www.linkedin.com/in/hugoalvesmartins/"
    ],
    "potentialAction": {
      "@type": "SearchAction",
      "target": "https://hugomartins.eu/?q={search_term_string}",
      "query-input": "required name=search_term_string"
    }
  };

  return (
    <>
      <Canonical path="/" />

      <Helmet>
        <title>Augmented Minds ‚Äî AI, Economy & Work</title>
        <meta
          name="description"
          content="Augmented Minds Blog explores how AI is reshaping the economy, work and education‚Äîcovering productivity, policy, HR, taxation, and ethics‚Äîwith clear, research-driven essays."
        />
        <script type="application/ld+json">
          {JSON.stringify(websiteJsonLd)}
        </script>
      </Helmet>

      <Hero />
      <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 pb-16 flex flex-col lg:flex-row gap-8">
        <section id="latest" className="lg:w-2/3">
          <div className="mb-8 space-y-6">
            <SearchBar value={searchTerm} onChange={setSearchTerm} />
            <CategoryFilter
              categories={categories}
              selected={selectedCategory}
              onSelect={setSelectedCategory}
            />
          </div>
          {/* Pass slug-normalized posts to the grid so links use /post/:slug */}
          <PostsGrid posts={postsForGrid} />
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
          />
        </section>

        {/* Sidebar: pass popular tags and a click handler that sets the search term */}
        <Sidebar
          popularTags={popularTags}
          onTagClick={(tag) => setSearchTerm(tag)}
        />
      </main>
    </>
  );
};

export default HomePage;


================================================================================
üìÑ File: src\pages\Post.jsx
================================================================================

import React, { useEffect, useMemo, useState } from 'react';
import { useNavigate, useParams, Link } from 'react-router-dom';
import Canonical from '../components/Canonical';
import MarkdownRenderer from '../components/MarkdownRenderer';
import { POSTS as RAW_POSTS } from '../data/posts';
import { ensureSlug, slugify, makePostPath } from '../utils/slugify';

// Try common locations so we don't depend on one directory layout
const mdModules = {
  ...import.meta.glob('./posts/*.md',     { query: '?raw', import: 'default' }),
  ...import.meta.glob('../posts/*.md',    { query: '?raw', import: 'default' }),
  ...import.meta.glob('/src/posts/*.md',  { query: '?raw', import: 'default' }),
};

export default function Post() {
  const navigate = useNavigate();
  const { slug: slugParam } = useParams();
  const posts = useMemo(() => RAW_POSTS.map(ensureSlug), []);

  // Build a map: { 'ai-literacy-guiding-principles': () => Promise<string>, ... }
  const mdMap = useMemo(() => {
    const map = {};
    for (const [path, loader] of Object.entries(mdModules)) {
      const file = path.split('/').pop() || '';
      const base = file.replace(/\.md$/i, '').toLowerCase();
      map[base] = loader;
    }
    return map;
  }, []);

  // Legacy numeric ID redirect -> slug
  useEffect(() => {
    if (/^\d+$/.test(slugParam)) {
      const byId = posts.find((p) => String(p.id) === slugParam);
      if (byId) navigate(makePostPath(byId), { replace: true });
    }
  }, [slugParam, posts, navigate]);

  const post = useMemo(() => {
    const low = (slugParam || '').toLowerCase();
    return (
      posts.find((p) => (p.slug || '').toLowerCase() === low) ||
      posts.find((p) => slugify(p.title) === slugParam)
    );
  }, [slugParam, posts]);

  const [body, setBody] = useState('');

  // Load markdown if we have a file for this slug; otherwise fallback to inline content/excerpt
  useEffect(() => {
    let canceled = false;
    setBody('');

    if (post) {
      const loader = mdMap[(post.slug || '').toLowerCase()];
      if (loader) {
        loader().then((raw) => {
          if (!canceled) setBody(raw || '');
        });
      }
    }
    return () => { canceled = true; };
  }, [post, mdMap]);

  if (!post) {
    return (
      <main className="max-w-3xl mx-auto px-4 py-16">
        <h1 className="text-3xl font-bold mb-4">404 ‚Äì Post not found</h1>
        <Link to="/archive" className="text-blue-600 hover:underline">‚Üê Back to archive</Link>
      </main>
    );
  }

  const ordered = [...posts].sort((a, b) => new Date(b.date) - new Date(a.date));
  const idx = ordered.findIndex((p) => p.slug === post.slug);
  const prev = ordered[idx - 1];
  const next = ordered[idx + 1];

  return (
    <main className="max-w-3xl mx-auto px-4 py-16">
      <Canonical path={`/post/${post.slug}`} />

      <h1 className="text-3xl font-bold mb-4">{post.title}</h1>

      <MarkdownRenderer
        source={body || post.content || post.markdown || post.excerpt || ''}
      />

      <nav className="flex justify-between mt-12 pt-8 border-t" aria-label="Post navigation">
        {prev ? <Link to={makePostPath(prev)} className="text-blue-600 hover:underline">‚Üê {prev.title}</Link> : <span />}
        {next ? <Link to={makePostPath(next)} className="text-blue-600 hover:underline">{next.title} ‚Üí</Link> : <span />}
      </nav>
    </main>
  );
}


================================================================================
üìÑ File: src\pages\ThankYou.jsx
================================================================================

import React from 'react';
import { Link } from 'react-router-dom';

const ThankYou = () => {
  return (
    <main className="max-w-lg mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center">
      <h1 className="text-3xl font-bold text-gray-900 mb-4">Thank you!</h1>
      <p className="text-gray-700 mb-8">
        Your submission was received. I‚Äôll get back to you shortly.
      </p>
      <Link
        to="/"
        className="inline-block bg-blue-600 text-white px-5 py-2 rounded-lg hover:bg-blue-700 transition"
      >
        ‚Üê Back to Home
      </Link>
    </main>
  );
};

export default ThankYou;


================================================================================
üìÑ File: src\posts\ai-literacy-guiding-principles.md
================================================================================

>‚ÄúWe shape our tools and thereafter our tools shape us.‚Äù ‚Äì *Marshall McLuhan*

We are living through one of the most profound technological shifts in human history. Generative AI is no longer just a novelty or computational feat‚Äîit‚Äôs becoming a deeply integrated part of how we write, think, learn, and work.

As a lecturer and researcher working at the intersection of AI, education, and organizational behaviour, I see both the enthusiasm and the unease this new era brings. Universities are rushing to adapt. Students are asking whether their ideas are still *theirs*. Faculty question whether the art of teaching can survive the age of autocomplete.

But here‚Äôs the principle that guides all of my work:

**_AI should amplify human potential‚Äînot replace it._**

That‚Äôs the heart of **Augmented Intelligence**. It's not about AI doing the thinking for us‚Äîit's about designing tools that help us think *better*, learn *deeper*, and act *more wisely*.

---

## GenAI: Tool or Crutch?

There‚Äôs growing concern‚Äîrightfully so‚Äîthat students are using AI tools like ChatGPT to write essays, summarize readings, or even fabricate lab reports. But banning these tools altogether misses the larger point.

The key question is no longer *"Should we use GenAI?"*  
It‚Äôs *"How should we use it‚Äîand to what end?"*

In my flipped classroom experiments, I‚Äôve seen how GenAI can serve as a **thinking partner**, not a thinking substitute. It can challenge assumptions, generate Socratic questions, and personalize content in ways that human educators can‚Äôt scale alone.

But this only works when AI is used **intentionally**. Tools must be:
- Transparent
- Scaffolded
- Purpose-driven

We must teach students not just how to **prompt**, but how to **question**, **reflect on**, and **critique** AI outputs. That‚Äôs where real learning begins.

---

## From Friction to Flow

One of my ongoing projects involves building a **Retrieval-Augmented Generation (RAG)** pipeline designed for academic environments. It helps students and researchers explore complex topics by pulling from curated, trusted sources.

Instead of generic AI-generated summaries, the system produces **contextual**, **explainable**, and **citeable** responses based on actual course materials or academic texts.

This doesn‚Äôt eliminate cognitive effort‚Äîit redirects it:
- From **searching** to **synthesizing**
- From **repetition** to **reasoning**

Used well, GenAI can strip away the friction of low-level tasks, giving learners more space for what matters: **critical thinking**, **creativity**, and **sense-making**.

---

Let‚Äôs build human-centered futures‚Äîtogether.

  
Thanks for reading.  
**‚Äî HM**


================================================================================
üìÑ File: src\posts\beyond-the-syllabus.md
================================================================================

Singapore‚Äôs higher education system has long been admired globally for its rigor, adaptability, and forward-thinking approach. Yet, as **artificial intelligence (AI) profoundly reshapes the nature of knowledge work**, universities face an urgent imperative: **rethinking not just how we teach but what we teach**.

In an era where AI effortlessly handles routine cognitive tasks, from basic data analysis to summarizing research, the skills that differentiate humans become clearer: **curation, synthesis, and judgment**. These skills, traditionally seen as complementary, have now become core competencies. The educator's challenge is no longer simply to transfer knowledge, but to **teach students how to navigate, interpret, and apply knowledge in increasingly complex contexts**.

---

AI-driven automation means that teaching factual recall or procedural mastery alone is insufficient. Instead, students must **cultivate their ability to curate information critically, synthesizing diverse viewpoints into coherent understandings, and exercising nuanced judgment amid ambiguity**. AI has democratized access to information; education must now democratize the skills required to evaluate, contextualize, and innovate using that information.

**Adaptive curricula** emerges as a critical response. Rather than rigid, linear syllabi, universities must develop agile educational frameworks that reflect real-world complexities. Curricula should dynamically integrate AI tools, not merely as resources, but as collaborators in meaningful cognitive tasks, like synthesizing new perspectives or making ethically informed judgments.

---

For instance, students could regularly engage in projects where AI is used to aggregate vast datasets, leaving learners free to focus on strategic analysis, creative problem-solving, and ethical considerations. Such interactions develop critical thinking about AI‚Äôs strengths and limitations, turning passive information consumption into active cognitive engagement helping students with enhanced adaptability, deeper analytical capabilities, and greater confidence in navigating ambiguity.

Educators must evolve from knowledge dispensers into facilitators of intellectual inquiry, guiding students, modelling humility in the face of complex, evolving information ecosystems, and, ultimately, preparing students for what the world demands.


---

Let‚Äôs build human-centered futures‚Äîtogether.

  
Thanks for reading.  
**‚Äî HM**



================================================================================
üìÑ File: src\posts\co-thinking-model.md
================================================================================

In a **knowledge-driven economy**, innovation is paramount. Yet the popular conception of artificial intelligence (AI) remains largely transactional viweing it as a collection of tools designed for efficiency and automation. AI currently excels at providing answers and solving clearly defined problems. 

### But what if the true potential of AI lies not just in answering questions, but in asking them?

Imagine a different model of human‚ÄìAI interaction: **co-thinking**. Rather than positioning humans as merely users and AI as tools, we could envision a collaborative partnership, where AI doesn't simply respond, but **actively engages, prompts, challenges, and refines human thought processes**.

Current AI systems, especially large language models (LLMs), have astonishing linguistic abilities and breadth of knowledge. **Yet their predominant application is task-oriented**, offering answers and completing user-defined jobs. This approach limits the cognitive potential of both human and machine.

---

In contrast, **co-thinking** would encourage AI to engage humans as intellectual partners. For instance, rather than passively awaiting commands, an AI trained for co-thinking would proactively ask thought-provoking questions, suggest alternative perspectives, and help humans explore new angles or unnoticed assumptions. Such an AI would not only enhance productivity but **actively stimulate human creativity and critical thinking**.

Singapore is well-positioned to pioneer such a shift. Educational institutions and business alike could deploy co-thinking AI models to facilitate deeper intellectual engagement, transforming workplaces and classrooms into dynamic spaces of inquiry and innovation.

Imagine university classrooms where AI co-thinkers pose challenging questions that encourage deeper student reflection and intellectual debate. Or professional meetings where AI actively participates in brainstorming sessions, pushing teams beyond surface-level ideas by asking insightful, even provocative, questions.


---

Realizing this vision requires shifting how we conceptualize and use AI systems. Instead of merely focusing on accuracy and responsiveness, training models should emphasize inquiry, curiosity, and intellectual humility. AI must learn to prioritize questions that enhance cognitive depth rather than offering straightforward answers.

This also implies developing a **new skill for humans**: learning to collaborate intellectually with machines. Humans must grow comfortable engaging with AI-generated queries, critically reflecting on their assumptions, and integrating novel perspectives raised by AI partners.

---

Such a model of co-thinking transforms the relationship from one of dependency or simple delegation to genuine intellectual collaboration. It holds the promise of not merely automating human work, but **augmenting human cognition**.


---

Let‚Äôs build human-centered futures‚Äîtogether.

  
Thanks for reading.  
**‚Äî HM**



================================================================================
üìÑ File: src\posts\flipped_classroom.md
================================================================================

Singapore has long embraced innovative educational methodologies to maintain its competitive edge in the global economy. Among these innovations, the flipped classroom model, where students engage with new material at home and apply concepts through active learning exercises in class, has proved to develop independent learning and deep engagement.

Yet, as Generative AI (GenAI) rapidly evolves, a critical question arises: How can we leverage these advanced tools to enhance the flipped classroom further, creating deeper, more personalized learning experiences?

---

The concept of flipped classroom was already a step forward, shifting from passive knowledge consumption to active knowledge application. Now, GenAI promises to augmnent this transformation dramatically.

Take, for example, the introduction of AI-powered Socratic bots‚ÄîAI, smart conversational agents capable of engaging students in socratic dialogue, gently guiding them through complex problems, and prompting them to question their assumptions. Such tools can simulate Socratic questioning at scale, engaging every student individually and deeper inquiry, effectively training them in critical thinking skills essential for lifelong learning.

---

Moreover, GenAI enables the development of real-time, personalized feedback loops. Imagine students working through complex problems or writing assignments, instantly receiving detailed and nuanced AI-generated feedback that pinpoints misconceptions, highlights strengths, and suggests targeted improvements. **This feedback isn't merely corrective, it's reflective**, encouraging students to pause, reconsider, and actively engage with their own thought processes.

Personalized study represents another significant upgrade offered by GenAI. Using insights derived from each student's interactions, AI tools can dynamically adjust learning content, challenges, and pacing to precisely match each learner‚Äôs evolving needs and capabilities. This individualized approach can significantly enhance engagement, ensuring that each student remains challenged at the right level, yet supported and intellectually in charge of the learning experience.

---

Real-world pilot implementations in classrooms are demonstrating promising results. Schools piloting GenAI-powered flipped classrooms report improved student engagement, increased participation, and deeper conceptual understanding. Teachers, freed from repetitive administrative tasks and equipped with rich insights from AI analytics, can focus their energies on higher-order pedagogical interventions, enriching classroom interaction and outputs.

However, this approach is not without challenges. Careful attention must be paid to **ensure AI augments rather than replaces human teaching**, maintaining a balance that preserves critical human interaction. Additionally, educators must equip students with the skills to critically assess AI-generated content, **safeguarding against cognitive offloading**.

In this vision of the classroom, students aren't merely consumers of AI-generated information; they're active participants, empowered and engaged through personalized, reflective learning experiences. The flipped classroom, powered by GenAI, promises not only deeper understanding but a lasting intellectual resilience.

---

Let‚Äôs build human-centered futures‚Äîtogether.

  
Thanks for reading.  
**‚Äî HM**



================================================================================
üìÑ File: src\posts\future_of_work_and_worth.md
================================================================================

## The False Comfort of ‚ÄúReskilling‚Äù

When AI anxiety spikes, the easiest answer is ‚Äúreskilling or upskilling.‚Äù It sounds good and pragmatic: _if machines take some jobs, retrain people for other jobs_. Governments fund national upskilling drives, firms launch initiatives and programmes, platforms sell courses that promise _‚Äúfuture-proof‚Äù careers_. But reskilling alone treats symptoms, not causes. If **jobs are still designed for throughput over learning, autonomy, and meaning**, we simply cycle people back into roles that burn them out, now faster.

And it gets worse. **AI isn‚Äôt just replacing tasks, it is reshaping what counts as valuable work**. As machines absorb repetitive, skill-building activities, human roles concentrate on judgment, synthesis, and relational work. **These aren‚Äôt ‚Äúplug-and-play‚Äù competencies you cam acquire in a weekend online course**. They require **redesigned pathways, time under guidance, and working cultures that protect experimentation and psychological safety**.

Without structural change‚Äîhow work is organized, how careers progress, how teams learn together, reskilling becomes an useless and expensive detour. **The real job is making jobs worth doing**.

--- 

## Human Resource Management Must Evolve

Industrial-era HR assumed fixed roles, episodic training, and performance as compliance. In an AI economy, **that model is a liability**. Advantage now comes from human-centric capabilities - creativity, discernment, adaptability - not from squeezing in more tasks to complete per hour.

Job descriptions that freeze work in time become obsolete on contact with reality. **A shift from role-based HR to capability-based HR is needed** to develop an maintain living _"capability portfolios‚Äù_ that emphasize transferability, learning agility, and redeployment as technology constantly changes the work.

Developing work competence has long relied on low-stakes, repetitive work to build tacit judgment, learning by doimg many times. AI now does much of that instantly, risking ‚Äúshallow competence‚Äù at the entry level, and **wiping out entry-level jobs** on the way. To counter this, Human Resource departments need to build AI-augmented apprenticeships where newcomers solve real problems with AI as a thinking partner, under human mentorship, so deep pattern recognition processes still form.

Additionally, constant change, insecurity, and reduced human contact corrode learning and collaboration. Treat **psychological safety, engagement, and belonging as core KPIs** alongside productivity. Reward managers who create environments where people can try, err, reflect, and improve.

--- 

## We Need a New Tax Framework for the AI Economy

If value creation shifts from wages to capital and code-intensive productivity, **wage-based tax bases erode** just as social needs grow. We need a fiscal architecture that tracks how value is actually created and ensures that it is taxed to the benefit of the many.

**Tax value creation, not just labor**. Introduce mechanisms such as automation dividends, levies linked to AI-enabled productivity that fund universal safety nets and learning stipends, and data royalties that recognize the public‚Äôs role in training datasets.

Offer preferential treatment to organizations that expand roles centered on care, education, culture, and community stewardship‚Äîwork with high social value that markets underprice but societies cannot do without.

Coordinate across borders. AI firms are geographically light and profit-mobile. Global minimums on AI-related profits and coordinated rules prevent a race to the bottom and fund the public goods‚Äîeducation, health, infrastructure‚Äîthat innovation depends on.

--- 

## Preparing the Next Generation for Fulfillment, Not Just Employment

If we leave work design, HR practices, and fiscal systems unchanged, **young people inherit a narrower, less stable, less meaningful landscape**. Education and youth development must pivot **from skill transfer to capability cultivation**, preparing people for roles where **human uniqueness is the edge**.

**Every learner should graduate able to use AI as a thinking partner**, interrogating, synthesizing, and extending outputs. This is **as fundamental as reading and numeracy** and is a bulwark against manipulation, a catalyst for innovation, and a shared language across disciplines.

- **Cultivating _‚Äúslow thinking‚Äù_ in a fast AI world as instant answers breed shallow reasoning**. Schools and universities must cultivate deliberate, reflective thinking: critique AI outputs, tackle open-ended inquiries, and build habits of metacognition. **Intellectual patience and comfort with ambiguity will define human value**.

- **Reframing career and life fulfillment**. As predictable career ladders flatten, meaning must shift from titles to contribution. Guide students to build portfolios of problems solved, people served, and knowledge created‚Äîanchoring identity in learning and impact, not just pay.

- **Elevating social participation and contribution**. If automation dividends and smarter taxation free resources, channel them toward dignified human work that holds communities together‚Äîcaregiving, mentoring, cultural production, environmental stewardship. Teach that these are central, not peripheral, to a good society.

**Work will increasingly be a series of renewals, not a single ascent**. Create _‚Äúrenewal pathways‚Äù_ that let adults pause, retrain, reorient, and re-enter without stigma or financial ruin, bringing onboard education providers, employers, and civic institutions, so adaptability becomes a shared infrastructure, not a private burden.

--- 

**_We do not lack talent, we lack alignment. Policy that still taxes yesterday‚Äôs value, HR that manages yesterday‚Äôs jobs, and education that teaches yesterday‚Äôs tasks will waste what AI makes possible._**

---

Let‚Äôs build human-centered futures‚Äîtogether.

Thanks for reading.
**‚Äî HM**



================================================================================
üìÑ File: src\posts\offloading_to_augmentation.md
================================================================================

In Singapore‚Äôs drive towards technological excellence and economic growth, the allure of artificial intelligence (AI) is undeniable. Its potential for **efficiency, accuracy, and scale** has led many industries and individuals alike to try to integrate AI into their workflows. Yet, beneath this efficiency lies a profound psychological shift: **cognitive offloading**.

**Cognitive offloading occurs when we delegate mental tasks to external tools** like calculators, search engines, and now, increasingly powerful GenAI Agents. While this can streamline work, freeing mental resources for complex thinking, it can also **erode foundational cognitive abilities** when overused. Critical analysis, creative ideation, and complex problem-solving risk becoming underdeveloped as we passively rely on AI to deliver ready-made solutions.

---

Singaporean professionals, known for their diligence and intellectual rigor, face a crucial challenge: distinguishing between **using AI as a shortcut** or **harnessing it as a catalyst for deeper thought**.

Recent studies on cognition have shown that our human minds thrive best when actively engaged in thoughtful processing and reflection. Training our working memory pays off and we must recognize that cognitive engagement matters profoundly, not just in childhood education but throughout our professional lifes.

---

## So how do we shift from cognitive offloading towards **cognitive augmentation**?

First, we must consciously design AI workflows to prompt active engagement rather than passive reception. **Using AI effectively means using it as a thinking partner rather than an answer machine**. Instead of asking AI for finished analyses, we should engage with AIs outputs critically, questioning assumptions, exploring alternatives, and iteratively refining their prompts to drive deeper insights.

Second, workplaces and educational institutions should encourage 'reflection loops.' After each AI interaction, individuals should pause to assess the quality, relevance, and depth of AI-generated outputs. Did the AI simplify too much? Did it overlook nuance? Such reflection claims back our cognitive responsibility, ensuring that human thought remains the ultimate authority.

Third, strategic use of AI should **focus on augmentation**, leveraging AI for tasks that **enhance human creativity rather than replace it**. Tasks such as summarization or preliminary analysis can effectively be AI-driven, freeing cognitive bandwidth for humans to focus on synthesis, strategy, and innovative thinking.

---

Singapore stands high in technological prowess and cognitive excellence. The future lies not in surrendering our mental capabilities to AI but in **designing symbiotic relationships with it**. Rather than outsourcing our thinking, we must reclaim cognitive work by positioning AI as a tool for augmentation.

In the age of AI, the distinction between offloading and augmenting cognition is more than semantic. **It is the critical determinant of our intellectual, social and economic‚Äîfuture.**

---

Let‚Äôs build human-centered futures‚Äîtogether.

  
Thanks for reading.  
**‚Äî HM**


================================================================================
üìÑ File: src\posts\prompting_science.md
================================================================================

In Singapore's fiercely meritocratic education system, the trajectory of a student's future is often discernible at a young age. Success in the Primary School Leaving Examination (PSLE) or O-Level exams can open doors to better schools and prestigious universities, dramatically shaping lifelong career opportunities. **Parents understand this well**, investing heavily in tuition, enrichment classes, and now, critically, in technological literacy such as **Coding** or **Robotics** tuition.

As generative AI (GenAI) tools such as ChatGPT become commonplace, prompting, **the practice of instructing AI to achieve optimal results**, emerges as an essential skill. This skill isn't merely about obtaining better output from digital tools; it's fundamentally about thinking clearly, critically, and creatively.

---

Recent research underscores the **malleability of cognition**, showing that targeted interventions in working memory, problem-solving, and critical thinking can have profound lifelong impacts. Training young children in cognitive skills can significantly increase their chances of accessing academic opportunities. As such, Singaporean parents and educators must recognize the potential of teaching not just with AI, but **teaching students to think with AI**.

Prompting, when taught effectively, moves students beyond passive consumption towards active engagement. It requires **clarity of thought**, **precision of language**, and **reflective self-awareness**. Students must learn not just to ask better questions but to evaluate the quality of responses critically. Are the AI-generated outputs insightful or superficial? Do they offer genuine analysis, or merely aggregate 'clich√©s'?

---


Imagine a classroom in which students actively debate and refine their prompts, testing hypotheses in real-time against the outputs of generative AI. "Prompt crafting becomes akin to scientific inquiry" through an iterative process of formulation, experimentation, and reflection.

**Singapore**, renowned globally for its educational rigor, is **uniquely positioned** to integrate this cognitive strategy into its pedagogy. Our schools have already championed computational thinking and digital literacy. The logical next step is helping our students developing an active intellectual relationship with GenAI.


Yet, **this relationship comes with risks**. Over-reliance on AI risks cognitive atrophy, via the erosion of the skills that prompted our queries in the first place. We must consciously teach students to **avoid cognitive offloading**, the outsourcing of critical thought to AI, which can weaken the foundational skills of **independent reasoning, problem-solving, and innovation**.

---

Instead, **prompting as pedagogy should emphasize active cognitive engagement**. It should involve ongoing critical reflection on the limitations and biases of AI-generated knowledge. We must teach students not just how to prompt, but why and for what so they can engage AI as an intellectual sparring partner rather than a passive oracle.

**This approach is not merely educationally valuable; it is economically strategic**. As AI reshapes job markets, the premium on uniquely human cognitive abilities, such as critical analysis, creativity, nuanced judgment, will only rise. By embedding the **skill of prompting** deeply into our educational framework, **Singapore can secure a cognitive edge for its future workforce**.

---

Let‚Äôs build human-centered futures‚Äîtogether.

  
Thanks for reading.  
**‚Äî HM**


================================================================================
üìÑ File: src\posts\slow-thinking-fast-ai.md
================================================================================

Singapore's educational culture prizes rapid, accurate responses, preparing students effectively for high-stakes exams and competitive workplaces. Yet, as generative AI (GenAI) increasingly provides swift, polished answers, education faces a new and subtler challenge: **preserving and nurturing the slower, deeper, reflective thinking that underpins true intellectual growth**.

Psychologist **_Daniel Kahneman_** distinguished between **_System 1_**‚Äî fast, intuitive, automatic thinking ‚Äî and **_System 2_** ‚Äî slow, effortful, deliberate thought. GenAI tools naturally align with _System 1_, effortlessly generating fluent, plausible responses at incredible speed. But true education must be grounded on _System 2_: the careful analysis, critical skepticism, and reflective judgment that machines cannot fully replicate.

---

In an AI-powered world, students risk becoming **passive consumers of rapid responses** rather than active thinkers who question and reflect. The urgency now lies in **teaching students how to slow down their thought processes deliberately**, critically examining AI-generated outputs and developing intellectual habits of intellectual skepticism and reflection.

### How can we foster this essential "slow thinking" in classrooms increasingly shaped by the rapid fluency of AI?

Firstly, educators should explicitly teach the **practice of cognitive pause** by encouraging students to step back from immediate AI-generated answers, questioning underlying assumptions, and exploring alternative perspectives. Rather than accepting polished answers at face value, students learn to probe deeper, developing an instinct to pause and reflect critically.

Secondly, **classroom assessments and exercises must be redesigned** to reward thoughtful analysis over immediate correctness. Assignments might involve evaluating AI-generated answers, identifying gaps or biases, and articulating nuanced critiques. Such tasks emphasize depth, intellectual rigor, and reflective skepticism, precisely the qualities that AI itself cannot fully have.

---

Moreover, a **deliberate focus on slow thinking** requires that educators embrace uncertainty and ambiguity in the learning process. By introducing open-ended problems without straightforward solutions, teachers encourage students to engage deeply, patiently working through complexities and uncertainties rather than seeking quick AI-generated check-box solutions.

Real-world implementations of these strategies already show promise. Classrooms experimenting with reflective exercises, critique of AI outputs, and slow-thinking assessments report heightened student engagement, deeper conceptual understanding, and improved capacity for independent, skeptical analysis.

Ultimately, teaching slow thinking in a fast AI world means redefining educational success. Instead of merely measuring quick and polished responses, education must prioritize the depth, rigor, and the reflective skepticism that makes humans human.

---

Let‚Äôs build human-centered futures‚Äîtogether.

  
Thanks for reading.  
**‚Äî HM**


================================================================================
üìÑ File: src\posts\tame_ai_beast.md
================================================================================

# Taming the AI ‚ÄòBeast‚Äô Without Losing Ourselves: Rethinking Work, Learning, and Human Relevance

*Artificial intelligence can drive extraordinary progress without eroding mental well-being ‚Äî but only if we reshape work and education with intention.*

---

## The Double-Edged Sword of AI at Work

The rise of artificial intelligence (AI) in the workplace is a paradox.  
On one edge: efficiency, cost savings, and creative possibilities previously unimaginable.  
On the other: anxiety, job insecurity, and mental strain for millions of workers.

It‚Äôs no longer a question of *whether* AI will reshape work ‚Äî it already has. The question is *how* we can harness its power without sacrificing human well-being.

This is not just a workplace issue. It‚Äôs a **civilisational design challenge**.

---

## Efficiency Without Purpose: The Hidden Risk

AI‚Äôs transformative potential is undeniable:

- **Law:** Tools like Ross Intelligence and Casetext analyse legal precedents in seconds, eliminating hours of tedious research. Contract platforms such as LexisNexis and Kira Systems flag risks and suggest edits with near-human precision.
- **Accounting:** AI automates data entry, compliance checks, and even audit sampling, freeing professionals to focus on higher-value work.

These efficiencies are real and measurable ‚Äî lawyers in the US could reclaim 266 million billable hours annually, worth roughly **US$100,000 in extra revenue per lawyer**.

But here‚Äôs the counter-intuitive risk:  
When AI takes over repetitive, skill-building work, humans must *invent* new value faster than ever. If they can‚Äôt, even ‚Äúfreed-up time‚Äù becomes economic dead space. Productivity without purpose is simply unemployment with better branding.

---

## The Mental Health Tax of the AI Economy

The dark side of AI‚Äôs advance is not just job loss ‚Äî it‚Äôs **chronic job insecurity**. Pew Research (2023) found that 62% of workers worry AI could replace them. Goldman Sachs estimates **300 million jobs worldwide** may be affected.

Job insecurity is not a benign discomfort. It is linked to:

- Stress, depression, and burnout  
- Decreased job satisfaction and workplace tension  
- A decline in social trust within teams  

This erosion of psychological safety is not just a ‚Äúpeople problem.‚Äù It **undermines the adaptive capacity** that AI-era work demands. Stressed, burnt-out workers are less likely to innovate, learn, or collaborate.

---

## The Higher Education Blind Spot

Universities ‚Äî still structured around content delivery and credentialing ‚Äî are deeply out of sync with an AI-transformed economy.

Historically, **entry-level work** provided a *bridge* from theory to expertise. Juniors learned by doing repetitive but necessary tasks ‚Äî drafting contracts, building spreadsheets, summarising research.  
Now, AI automates these ‚Äúlow rungs,‚Äù **collapsing the apprenticeship ladder** before graduates even step on it.

The implications are profound:

- **Fewer pathways to mastery:** Without structured opportunities to build tacit skills, early-career workers risk plateauing at a ‚Äúshallow competence‚Äù level.  
- **Acceleration of elite advantage:** Those with strong networks or access to bespoke mentorship can still climb ‚Äî others are stranded.  
- **Curricular obsolescence:** Teaching ‚Äúknowledge‚Äù without teaching **AI-augmented thinking** produces graduates who are already behind.

If higher education does not rapidly evolve to train students **how to think with AI** ‚Äî interrogating, synthesising, and extending ideas rather than simply recalling them ‚Äî the gap between formal education and employability will grow into a chasm.

---

## The Paradox of Upskilling

The default answer to AI disruption has been ‚Äúreskilling‚Äù ‚Äî Amazon‚Äôs *Upskilling 2025* initiative alone pledges **US$1.2 billion** for AI and cloud training.

Yet reskilling comes with its own pressures:

- The expectation to **constantly** retrain breeds *technostress*.  
- The pace of technological change means skill relevance has a half-life measured in months, not years.  
- Learning without clear integration into meaningful work risks becoming an anxiety-producing treadmill.

The counter-intuitive insight: **Reskilling without redesigning work is a band-aid**. If new skills aren‚Äôt coupled to psychologically sustainable roles, we simply trade redundancy for burnout.

---

## Designing AI-Era Work for Human Flourishing

To align AI‚Äôs benefits with human well-being, we need **deliberate systems design** across both the workplace and education:

1. **Integrate AI Literacy into All Curricula**  
   Treat AI fluency as foundational as numeracy and literacy. Teach students how to use AI to *extend their thinking*, not replace it.

2. **Rebuild Apprenticeship Pathways**  
   Create ‚ÄúAI-augmented internships‚Äù where graduates still engage in problem-solving, but with AI as a thinking partner.

3. **Make Psychological Safety a Productivity Metric**  
   Track burnout and job satisfaction alongside output. Companies with robust mental health support see up to **30% drops in absenteeism**.

4. **Engineer Social Interaction Back Into Work**  
   Remote and AI-heavy workflows risk isolation. Embed collaboration rituals, hybrid schedules, and ‚ÄúAI-free‚Äù creative sessions.

5. **Incentivise Partnership, Not Displacement**  
   Policymakers and corporate boards should prioritise AI tools that complement human judgment rather than bypass it.

---

## Partnership, Not Displacement

The endgame is not replacing humans, nor is it nostalgically clinging to pre-AI workflows. It‚Äôs **designing a new equilibrium** where AI amplifies human relevance.

As OpenAI‚Äôs Sam Altman has mused, AI could enable a ‚Äúone-person, billion-dollar company.‚Äù The real question is: **At what cost?** If the mental health and adaptability of the workforce collapse, efficiency gains will be meaningless.

We must be deliberate. AI can either create a **renaissance of human potential** or a **desert of disposable talent**. The difference will be whether we redesign our systems ‚Äî in work and in education ‚Äî to keep humans central.

---

*If we fail, we risk winning the battle for efficiency but losing the war for human relevance. And that would be a tragedy entirely of our own making.*



================================================================================
üìÑ File: src\posts\why_genai_literacy_new_entry_level_skill.md
================================================================================

For decades, new graduates could count on the same trajectory: get a degree, land an entry-level job at a good firm, and climb the ladder. **That ladder is now missing its bottom rungs**.

Since 2019, the share of entry-level roles at major tech firms has halved. Employment rates for 20- to 24-year-olds are slipping, internships are harder to find in every sector, and companies moving towards building smaller, more experienced teams ‚Äî **with generative AI as their silent partner**.

---

This shift is not just about efficiency; it‚Äôs about composition. When firms skip hiring younger workers ‚Äî typically lower paid ‚Äî the result is lower overall employment rates for recent graduates, even as wage averages rise for older, more experienced employees. The message is clear: **AI is squeezing the middle and eliminating the low end of the skills spectrum**.

In this new market, **‚Äúmediocre expertise‚Äù is being automated away**. What remains valuable is **specialised, adaptive expertise**, the kind that can be amplified by generative AI, not replaced by it. A handful of AI model engineers are getting pro athlete-level offers, as seen in recent news, but for everyone else, **survival will depend on becoming fluent in AI-augmented thinking**.

---

GenAI literacy is not about knowing which prompt to type into ChatGPT. It‚Äôs about **integrating large language models into your workflows** in order to better test hypotheses, synthesise research, challenge assumptions, and generate creative solutions. It‚Äôs the **cognitive equivalent of having an _exoskeleton_**: you still do the thinking, but your reach, stamina, and speed explode.

Without that literacy, AI doesn‚Äôt just replace entry-level tasks ‚Äî it **removes the very training ground where skills are developed**. Graduates risk a career of running behind the technology instead of running with it.

---

**The solution is simple in principle, but urgent in practice**: _make GenAI literacy as fundamental in education_ as reading, maths, and critical thinking. Start early, update constantly, and **teach AI not as a magic trick but as a thinking partner**.

We‚Äôve seen what targeted cognitive training can do, from working memory exercises in childhood that dramatically improve long-term outcomes, to specialised expertise that commands premium pay in this new AI era. **The next generation‚Äôs edge will come from learning how to think with AI, not letting AI think for them**.

---

In the new job market that is emerging, the winners will not be those who can code or those who can _‚Äúbeat the machine‚Äù._ **The real winners will be those who know how to make the machine work for their mind**.

---

Let‚Äôs build human-centered futures‚Äîtogether.

  
Thanks for reading.  
**‚Äî HM**


================================================================================
üìÑ File: src\themes\index.jsx
================================================================================

import React, { createContext, useState, useContext, useEffect } from 'react';

const ThemeContext = createContext();

export const useTheme = () => useContext(ThemeContext);

const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    const stored = localStorage.getItem('theme');
    if (stored) setTheme(stored);
  }, []);

  useEffect(() => {
    document.documentElement.classList.toggle('dark', theme === 'dark');
    localStorage.setItem('theme', theme);
  }, [theme]);

  const toggle = () => setTheme(prev => (prev === 'light' ? 'dark' : 'light'));

  return (
    <ThemeContext.Provider value={{ theme, toggle }}>
      {children}
    </ThemeContext.Provider>
  );
};

export default ThemeProvider;


================================================================================
üìÑ File: src\tutorials\TutorialsHome.jsx
================================================================================

import React, { useMemo, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "./shell/components/AppHeaderMini";
import AppFooterMini from "./shell/components/AppFooterMini";
import tutorials from "./tutorialsIndex";

/**
 * TutorialsHome.jsx ‚Äî ‚ÄúAll Tutorials‚Äù hub
 * - No progress/memory features.
 * - Lists every tutorial and its sections (and subtopics where provided).
 * - Responsive: 2 columns on large screens (card grid), stacked on mobile.
 */
export default function TutorialsHome() {
  const [q, setQ] = useState("");
  const filtered = useMemo(() => {
    const needle = q.trim().toLowerCase();
    if (!needle) return tutorials;
    return tutorials.filter((t) => {
      const title = (t.title || "").toLowerCase();
      const summary = (t.summary || t.description || "").toLowerCase();
      return title.includes(needle) || summary.includes(needle);
    });
  }, [q]);

  return (
    <>
      <AppHeaderMini />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Heading */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            All Tutorials
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Browse the full catalog. Each tutorial is split into sequential sections with flashcards and quizzes.
          </p>
        </div>

        {/* Search */}
        <div className="mb-6 max-w-md">
          <input
            value={q}
            onChange={(e) => setQ(e.target.value)}
            placeholder="Search tutorials‚Ä¶"
            className="w-full rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm shadow-sm placeholder:text-gray-400 focus:border-blue-600 focus:outline-none"
            aria-label="Search tutorials"
          />
        </div>

        {/* Grid */}
        <section className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3">
          {filtered.map((tut) => (
            <article
              key={tut.slug}
              className="flex flex-col overflow-hidden rounded-xl border border-gray-200 bg-white shadow-sm"
            >
              {/* Cover */}
              {(tut.image || tut.cover) && (
                <img
                  src={tut.image || tut.cover}
                  alt=""
                  loading="lazy"
                  className="h-40 w-full object-cover"
                />
              )}

              <div className="flex flex-1 flex-col p-4">
                <h2 className="text-base font-semibold text-gray-900">
                  <Link to={tut.href || `/tutorials/${tut.slug}`} className="hover:underline">
                    {tut.title}
                  </Link>
                </h2>
                {tut.summary && (
                  <p className="mt-1 text-sm text-gray-600">{tut.summary}</p>
                )}

                {/* Sections */}
                {Array.isArray(tut.sections) && tut.sections.length > 0 && (
                  <div className="mt-3 space-y-2">
                    <div className="text-xs font-semibold uppercase tracking-wide text-gray-500">
                      Sections
                    </div>
                    <ul className="space-y-1">
                      {tut.sections.map((sec) => (
                        <li key={sec.id || sec.slug}>
                          <Link
                            to={sec.href}
                            className="text-sm text-blue-700 hover:text-blue-900 hover:underline"
                          >
                            {sec.title}
                          </Link>

                          {/* Subtopics (optional) */}
                          {Array.isArray(sec.children) && sec.children.length > 0 && (
                            <ul className="mt-1 ml-4 list-disc space-y-0.5 text-sm text-gray-700">
                              {sec.children.map((child) => (
                                <li key={child.id || child.slug}>
                                  <Link
                                    to={child.href}
                                    className="text-blue-700 hover:text-blue-900 hover:underline"
                                  >
                                    {child.title}
                                  </Link>
                                </li>
                              ))}
                            </ul>
                          )}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* CTA */}
                <div className="mt-4">
                  <Link
                    to={tut.href || `/tutorials/${tut.slug}`}
                    className="inline-flex items-center rounded-lg border border-gray-200 bg-gray-50 px-3 py-1.5 text-xs font-semibold text-gray-800 hover:bg-gray-100"
                  >
                    Open tutorial ‚Üí
                  </Link>
                </div>
              </div>
            </article>
          ))}
        </section>

        {/* Empty state */}
        {filtered.length === 0 && (
          <div className="mt-16 text-center text-sm text-gray-600">
            No tutorials match your search. Try another query.
          </div>
        )}
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\index.jsx
================================================================================

// src/tutorials/index.jsx
import React from "react";
import { Routes, Route, Navigate, Outlet } from "react-router-dom";

import TutorialsHome from "./TutorialsHome";

// Probability ‚Äî new architecture
import Foundations from "./probability/foundations/Foundations";
import Practice from "./probability/practice/Practice";

// Discrete
import Bernoulli from "./probability/discrete/Bernoulli";
import Binomial from "./probability/discrete/Binomial";
import Geometric from "./probability/discrete/Geometric";
import NegativeBinomial from "./probability/discrete/NegativeBinomial";
import Poisson from "./probability/discrete/Poisson";

// Continuous & CLT
import ContinuousIntro from "./probability/continuous/ContinuousIntro";
import Uniform from "./probability/continuous/Uniform";
import Exponential from "./probability/continuous/Exponential";
import Gamma from "./probability/continuous/Gamma";
import Normal from "./probability/continuous/Normal";
import CLT from "./probability/continuous/CLT";

export default function TutorialsApp() {
  return (
    <Routes>
      {/* /tutorials */}
      <Route index element={<TutorialsHome />} />

      {/* /tutorials/introduction-to-probability-distribution/* */}
      <Route path="introduction-to-probability-distribution">
        <Route index element={<Navigate to="foundations" replace />} />

        {/* Foundations */}
        <Route path="foundations" element={<Foundations />} />

        {/* Discrete topics */}
        <Route path="discrete" element={<Outlet />}>
          {/* When user hits /.../discrete, send them to the first lesson */}
          <Route index element={<Navigate to="bernoulli" replace />} />
          <Route path="bernoulli" element={<Bernoulli />} />
          <Route path="binomial" element={<Binomial />} />
          <Route path="geometric" element={<Geometric />} />
          <Route path="negative-binomial" element={<NegativeBinomial />} />
          <Route path="poisson" element={<Poisson />} />
        </Route>

        {/* Continuous topics */}
        <Route path="continuous" element={<Outlet />}>
          {/* When user hits /.../continuous, send them to the intro or first topic */}
          <Route index element={<Navigate to="uniform" replace />} />
          <Route index element={<ContinuousIntro />} />
          <Route path="uniform" element={<Uniform />} />
          <Route path="exponential" element={<Exponential />} />
          <Route path="gamma" element={<Gamma />} />
          <Route path="normal" element={<Normal />} />
          <Route path="clt" element={<CLT />} />
        </Route>

        {/* Practice */}
        <Route path="practice" element={<Practice />} />
      </Route>

      {/* Fallback */}
      <Route path="*" element={<Navigate to="/tutorials" replace />} />
    </Routes>
  );
}





================================================================================
üìÑ File: src\tutorials\tutorialsIndex.js
================================================================================

// src/tutorials/tutorialsIndex.js
const tutorials = [
  {
    slug: "introduction-to-probability-distribution",
    title: "Introduction to Probability",
    summary:
      "Foundations, discrete & continuous models, CLT, and practice with quizzes and flashcards.",
    href: "/tutorials/introduction-to-probability-distribution",
    cover:
      `${import.meta.env.BASE_URL}probability/Probability-Banner.jpg`,
    // Sections listed on TutorialsHome; used only for navigation (no progress)
    sections: [
      {
        id: "foundations",
        title: "Foundations",
        href: "/tutorials/introduction-to-probability-distribution/foundations",
      },
      {
        id: "discrete",
        title: "Discrete",
        href: "/tutorials/introduction-to-probability-distribution/discrete/bernoulli",
        children: [
          { id: "bernoulli", title: "Bernoulli", href: "/tutorials/introduction-to-probability-distribution/discrete/bernoulli" },
          { id: "binomial", title: "Binomial", href: "/tutorials/introduction-to-probability-distribution/discrete/binomial" },
          { id: "geometric", title: "Geometric", href: "/tutorials/introduction-to-probability-distribution/discrete/geometric" },
          { id: "negative-binomial", title: "Negative Binomial", href: "/tutorials/introduction-to-probability-distribution/discrete/negative-binomial" },
          { id: "poisson", title: "Poisson", href: "/tutorials/introduction-to-probability-distribution/discrete/poisson" },
        ],
      },
      {
        id: "continuous",
        title: "Continuous",
        href: "/tutorials/introduction-to-probability-distribution/continuous",
        children: [
          { id: "uniform", title: "Uniform", href: "/tutorials/introduction-to-probability-distribution/continuous/uniform" },
          { id: "exponential", title: "Exponential", href: "/tutorials/introduction-to-probability-distribution/continuous/exponential" },
          { id: "gamma", title: "Gamma", href: "/tutorials/introduction-to-probability-distribution/continuous/gamma" },
          { id: "normal", title: "Normal", href: "/tutorials/introduction-to-probability-distribution/continuous/normal" },
          { id: "clt", title: "Central Limit Theorem", href: "/tutorials/introduction-to-probability-distribution/continuous/clt" },
        ],
      },
      {
        id: "practice",
        title: "Practice & Exam",
        href: "/tutorials/introduction-to-probability-distribution/practice",
      },
    ],
  },
];

export default tutorials;


================================================================================
üìÑ File: src\tutorials\probability\continuous\CLT.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * CLT.jsx ‚Äî Central Limit Theorem page
 *
 * - Loads ./clt.md via Vite ?raw
 * - Builds sticky "On This Page" TOC from rendered headings (ids added by RichMarkdown)
 * - Interactive CLT demo with several parent distributions (incl. heavy-tail counterexamples)
 * - Flashcards and a quiz CTA
 * - Responsive: 2 cols on large screens (content + TOC), stacked on mobile
 * - No progress/memory features
 */

export default function CLT() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id,text,level}]

  // Load markdown
  useEffect(() => {
    let mounted = true;
    import("./clt.md?raw")
      .then((mod) => mounted && setMd(mod.default || ""))
      .catch((err) => console.error("Failed to load clt.md", err));
    return () => { mounted = false; };
  }, []);

  // Build TOC (H2/H3)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;
    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      setToc(
        nodes.map((n) => ({
          id: n.id || "",
          text: n.textContent || "",
          level: n.tagName === "H2" ? 2 : 3,
        }))
      );
    };
    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  const flashcards = useMemo(
    () => [
      { front: "CLT (i.i.d.)", back: "(»≤‚àíŒº)/(œÉ/‚àön) ‚áí N(0,1)" },
      { front: "LLN vs CLT", back: "LLN: »≤‚ÜíŒº; CLT: ‚àön(»≤‚àíŒº) ‚Üí Normal" },
      { front: "Berry‚ÄìEsseen", back: "sup|F_n‚àíŒ¶| ‚â§ C¬∑œÅ‚ÇÉ/(œÉ¬≥‚àön)" },
      { front: "When it fails", back: "Infinite variance (e.g., Cauchy), strong dependence, heavy tails Œ±‚â§2" },
      { front: "Studentized mean", back: "(»≤‚àíŒº)/(S/‚àön) ‚âà t_{n‚àí1} ‚Üí N(0,1)" },
      { front: "Lindeberg cond.", back: "For non-i.i.d. arrays ‚áí CLT if Lindeberg holds" },
      { front: "Skewness effect", back: "More skew ‚Üí slower Normal convergence" },
      { front: "Finite pop. corr.", back: "If sampling w/o replacement, use ‚àö((N‚àín)/(N‚àí1))" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Central Limit Theorem (CLT)
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Why standardized sample means look Normal. Explore rate of convergence, Berry‚ÄìEsseen bounds, and failure
            cases (heavy tails, dependence).
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* Interactive CLT demo */}
            <section aria-labelledby="clt-panel" className="space-y-4">
              <h2 id="clt-panel" className="text-xl font-bold text-slate-900">
                Interactive: CLT Demo (Standardized Sample Mean)
              </h2>
              <CLTPanel />
            </section>
          </article>

          {/* On This Page */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">On this page</div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous/normal"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Normal
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Back to Continuous Intro ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/clt/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start CLT Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ---------------------------- Interactive CLT Panel ---------------------------- */
function CLTPanel() {
  const [dist, setDist] = useState("uniform"); // 'uniform' | 'exponential' | 'bernoulli' | 'pareto' | 'cauchy'
  const [p, setP] = useState(0.2);             // Bernoulli p
  const [alpha, setAlpha] = useState(2.5);     // Pareto shape Œ± (xm=1)
  const [n, setN] = useState(20);              // sample size
  const [m, setM] = useState(5000);            // replications
  const [stats, setStats] = useState(null);    // results object

  // Distribution draws + theoretical moments (when defined)
  const draw = useMemo(() => {
    if (dist === "uniform") return () => Math.random(); // U(0,1)
    if (dist === "exponential") return () => -Math.log(1 - Math.random()); // Exp(1)
    if (dist === "bernoulli") return () => (Math.random() < p ? 1 : 0);
    if (dist === "pareto") return () => Math.pow(1 - Math.random(), -1 / alpha); // Pareto(Œ±) with xm=1
    // cauchy(0,1)
    return () => Math.tan(Math.PI * (Math.random() - 0.5));
  }, [dist, p, alpha]);

  const theo = useMemo(() => {
    if (dist === "uniform") return { mean: 0.5, var: 1 / 12, finiteVar: true, label: "Uniform(0,1)" };
    if (dist === "exponential") return { mean: 1, var: 1, finiteVar: true, label: "Exponential(1)" };
    if (dist === "bernoulli") return { mean: p, var: Math.max(0, p * (1 - p)), finiteVar: true, label: `Bernoulli(${p.toFixed(2)})` };
    if (dist === "pareto") {
      const finiteMean = alpha > 1;
      const finiteVar = alpha > 2;
      const mean = finiteMean ? alpha / (alpha - 1) : Infinity;
      const v = finiteVar ? alpha / ((alpha - 1) ** 2 * (alpha - 2)) : Infinity;
      return { mean, var: v, finiteVar, label: `Pareto(Œ±=${alpha.toFixed(2)})` };
    }
    return { mean: NaN, var: NaN, finiteVar: false, label: "Cauchy(0,1)" };
  }, [dist, p, alpha]);

  function simulate() {
    const N = Math.max(200, Math.min(20000, Math.floor(m)));
    const mu = theo.mean;
    const sig = Math.sqrt(theo.var);

    let coverage1 = 0, coverage2 = 0, coverage3 = 0;
    let sumMeans = 0, sumMeansSq = 0;
    let drawsForRho3 = 0;
    let sumAbs3 = 0;

    for (let j = 0; j < N; j++) {
      let s = 0;

      for (let i = 0; i < n; i++) {
        const x = draw();
        s += x;

        // accumulate absolute central 3rd moment if Œº finite
        if (Number.isFinite(mu)) {
          sumAbs3 += Math.abs(x - mu) ** 3;
          drawsForRho3++;
        }
      }

      const ybar = s / n;
      sumMeans += ybar;
      sumMeansSq += ybar * ybar;

      if (theo.finiteVar && sig > 0) {
        const z = (ybar - mu) / (sig / Math.sqrt(n));
        if (Math.abs(z) <= 1) coverage1++;
        if (Math.abs(z) <= 2) coverage2++;
        if (Math.abs(z) <= 3) coverage3++;
      }
    }

    const empMean = sumMeans / N;
    const empVar = sumMeansSq / N - empMean * empMean;

    // Coverage proportions
    const prop1 = coverage1 / N;
    const prop2 = coverage2 / N;
    const prop3 = coverage3 / N;

    // Normal targets
    const targ1 = 0.682689492; // P(|Z|‚â§1)
    const targ2 = 0.954499736; // P(|Z|‚â§2)
    const targ3 = 0.997300204; // P(|Z|‚â§3)

    // Simple "normality gap" score (L1 sum of abs deviations)
    const gap =
      (Number.isFinite(prop1) ? Math.abs(prop1 - targ1) : 1) +
      (Number.isFinite(prop2) ? Math.abs(prop2 - targ2) : 1) +
      (Number.isFinite(prop3) ? Math.abs(prop3 - targ3) : 1);

    // Berry‚ÄìEsseen estimate when moments exist: C * œÅ3 / (œÉ^3 ‚àön)
    let beBound = null;
    if (theo.finiteVar && sig > 0 && drawsForRho3 > 0) {
      const rho3 = sumAbs3 / drawsForRho3; // empirical E|X‚àíŒº|^3
      const C = 0.56; // classical non-tight universal constant (illustrative)
      beBound = (C * rho3) / (Math.pow(sig, 3) * Math.sqrt(n));
    }

    setStats({
      parent: theo.label,
      n, N,
      empMean, empVar,
      theoMean: mu, theoSDBar: theo.finiteVar ? (sig / Math.sqrt(n)) : NaN,
      coverage: { prop1, prop2, prop3, targ1, targ2, targ3, gap },
      beBound,
      notes:
        !theo.finiteVar
          ? "Variance is infinite or undefined ‚Äî classical CLT fails."
          : null,
    });
  }

  useEffect(() => {
    simulate();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // initial run

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-5">
        <label className="block text-sm font-medium text-slate-700">
          Parent distribution
          <select
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1 bg-white"
            value={dist}
            onChange={(e) => setDist(e.target.value)}
          >
            <option value="uniform">Uniform(0,1)</option>
            <option value="exponential">Exponential(1)</option>
            <option value="bernoulli">Bernoulli(p)</option>
            <option value="pareto">Pareto(Œ±) (xm=1)</option>
            <option value="cauchy">Cauchy(0,1) (CLT counterexample)</option>
          </select>
        </label>

        {dist === "bernoulli" && (
          <label className="block text-sm font-medium text-slate-700">
            Bernoulli p
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={p}
              onChange={(e) => setP(Number(e.target.value))}
              className="mt-2 w-full"
            />
            <div className="mt-1 text-slate-800 tabular-nums">p = {p.toFixed(2)}</div>
          </label>
        )}

        {dist === "pareto" && (
          <label className="block text-sm font-medium text-slate-700">
            Pareto shape Œ±
            <input
              type="number"
              step="0.1"
              min="0.5"
              value={alpha}
              onChange={(e) => setAlpha(Math.max(0.5, Number(e.target.value) || 0.5))}
              className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
            />
            <div className="mt-1 text-xs text-slate-600">
              Mean exists if Œ±&gt;1, variance if Œ±&gt;2.
            </div>
          </label>
        )}

        <label className="block text-sm font-medium text-slate-700">
          Sample size n
          <input
            type="number"
            min="1"
            max="5000"
            value={n}
            onChange={(e) => setN(Math.max(1, Math.min(5000, Number(e.target.value) || 1)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          Replications m
          <input
            type="number"
            min="200"
            max="20000"
            value={m}
            onChange={(e) => setM(Math.max(200, Math.min(20000, Number(e.target.value) || 200)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <div className="flex items-end">
          <button
            onClick={simulate}
            className="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Resimulate
          </button>
        </div>
      </div>

      {stats && (
        <>
          <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-6 text-sm">
            <Metric label="Parent" value={stats.parent} />
            <Metric label="n (per mean)" value={String(stats.n)} />
            <Metric label="Replications m" value={String(stats.N)} />
            <Metric label="»≤ empirical mean" value={stats.empMean.toFixed(6)} />
            <Metric label="»≤ empirical var" value={stats.empVar.toFixed(6)} />
            <Metric
              label="Theory SD(»≤)"
              value={Number.isFinite(stats.theoSDBar) ? stats.theoSDBar.toFixed(6) : "‚Äî"}
            />
          </div>

          <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-6 text-sm">
            <Metric
              label="P(|Z|‚â§1)"
              value={
                Number.isFinite(stats.coverage.prop1)
                  ? `${stats.coverage.prop1.toFixed(4)} (target ${stats.coverage.targ1.toFixed(4)})`
                  : "‚Äî"
              }
            />
            <Metric
              label="P(|Z|‚â§2)"
              value={
                Number.isFinite(stats.coverage.prop2)
                  ? `${stats.coverage.prop2.toFixed(4)} (target ${stats.coverage.targ2.toFixed(4)})`
                  : "‚Äî"
              }
            />
            <Metric
              label="P(|Z|‚â§3)"
              value={
                Number.isFinite(stats.coverage.prop3)
                  ? `${stats.coverage.prop3.toFixed(4)} (target ${stats.coverage.targ3.toFixed(4)})`
                  : "‚Äî"
              }
            />
            <Metric label="Normality gap (‚Üì better)" value={stats.coverage.gap.toFixed(4)} />
            <Metric
              label="Berry‚ÄìEsseen bound"
              value={stats.beBound !== null ? stats.beBound.toFixed(4) : "‚Äî"}
            />
            <Metric label="Note" value={stats.notes || "‚Äî"} />
          </div>
        </>
      )}

      <p className="mt-3 text-sm text-slate-700">
        Coverage compares the standardized mean to the Normal 68‚Äì95‚Äì99.7% rule. The Berry‚ÄìEsseen number is a rough
        bound on the maximum CDF error; it shrinks ‚âà 1/‚àön when the third absolute central moment exists.
      </p>
    </div>
  );
}

function Metric({ label, value }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">{label}</div>
      <div className="text-slate-900 font-semibold tabular-nums break-words">{value}</div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\CLTQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * CLTQuiz.jsx ‚Äî dedicated quiz page for the Central Limit Theorem
 */

const questions = [
  {
    question: "Classical CLT (i.i.d.) says that",
    options: [
      "(»≤‚àíŒº)/(œÉ/‚àön) ‚áí N(0,1)",
      "»≤ ‚áí N(Œº,œÉ¬≤)",
      "Œ£Xi ‚áí N(nŒº, nœÉ¬≤) for any n",
      "»≤ ‚Üí Œº almost surely only",
    ],
    correctIndex: 0,
    rationale: "Standardized sample mean converges in distribution to N(0,1).",
  },
  {
    question: "Which of the following is NOT required for the classical i.i.d. CLT?",
    options: [
      "Finite variance œÉ¬≤",
      "Independence",
      "Identically distributed",
      "Parent distribution is Normal",
    ],
    correctIndex: 3,
    rationale: "Parent need not be Normal; finite variance & i.i.d. suffice.",
  },
  {
    question: "Berry‚ÄìEsseen inequality implies the Normal approximation error typically shrinks like",
    options: ["1/‚àön", "1/n", "log n / n", "constant"],
    correctIndex: 0,
    rationale: "sup|F_n‚àíŒ¶| ‚â§ C¬∑œÅ‚ÇÉ/(œÉ¬≥‚àön).",
  },
  {
    question: "Which parent would violate the classical CLT assumptions?",
    options: [
      "Uniform(0,1)",
      "Exponential(1)",
      "Bernoulli(p)",
      "Cauchy(0,1)",
    ],
    correctIndex: 3,
    rationale: "Cauchy has undefined mean/variance; classical CLT fails.",
  },
  {
    question: "For Pareto(Œ±) with xm=1, the CLT applies only if",
    options: [
      "Œ± > 2",
      "Œ± > 1",
      "Œ± ‚â• 0",
      "Never",
    ],
    correctIndex: 0,
    rationale: "Finite variance requires Œ±>2; CLT needs œÉ¬≤ finite.",
  },
  {
    question: "Studentization replaces œÉ with S (sample sd). As n increases, the Studentized mean distribution tends to",
    options: [
      "t_{n‚àí1} exactly, regardless of parent",
      "Normal(0,1)",
      "Cauchy(0,1)",
      "Uniform(‚àí1,1)",
    ],
    correctIndex: 1,
    rationale: "In general T_n ‚áí N(0,1); exactly t only for Normal parent.",
  },
  {
    question: "Which statement best contrasts LLN and CLT?",
    options: [
      "LLN gives the limit distribution; CLT gives convergence in probability",
      "LLN gives consistency of »≤; CLT gives its approximate distribution for large n",
      "Both say the same thing",
      "LLN requires stronger conditions than CLT",
    ],
    correctIndex: 1,
    rationale: "LLN: »≤‚ÜíŒº; CLT: ‚àön(»≤‚àíŒº) ‚Üí Normal.",
  },
  {
    question: "A rule-of-thumb for using a Normal approx to a Binomial proportion p is",
    options: [
      "np and n(1‚àíp) are both at least around 10",
      "n‚â•5 regardless of p",
      "p‚â•0.5",
      "Only when p is unknown",
    ],
    correctIndex: 0,
    rationale: "Ensures tails not too sparse; improves approximation.",
  },
  {
    question: "If observations are sampled without replacement from a finite population, a variance correction uses",
    options: [
      "‚àö((N‚àín)/(N‚àí1))",
      "‚àö(N/(N‚àín))",
      "n/N",
      "No correction is possible",
    ],
    correctIndex: 0,
    rationale: "Finite population correction (FPC).",
  },
  {
    question: "Which factor typically slows CLT convergence (requires larger n)?",
    options: [
      "High skewness or heavy right tails",
      "Symmetry around the mean",
      "Small variance",
      "Independence",
    ],
    correctIndex: 0,
    rationale: "Skew/heavy tails inflate higher moments ‚Üí larger BE term.",
  },
];

export default function CLTQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Central Limit Theorem
          </h1>
          <p className="mt-2 text-slate-700">
            Test your understanding of the CLT, Berry‚ÄìEsseen rates, and when Normal approximations are (or aren‚Äôt) valid.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:clt" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/clt"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to CLT Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Back to Continuous Intro ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\ContinuousIntro.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * ContinuousIntro.jsx ‚Äî section overview (Continuous & CLT)
 *
 * - Loads ./continuous_intro.md (co-located) via Vite ?raw
 * - Builds a sticky "On This Page" TOC from rendered headings (ids added by RichMarkdown)
 * - Includes a lightweight CLT demo panel (no charts; simple simulation + metrics)
 * - Flashcards at the bottom
 * - Bottom navigation + (optional) quiz CTA placeholder
 * - Responsive 2-col on large screens (content + TOC), 1-col on mobile
 * - No progress/memory features
 */

export default function ContinuousIntro() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown once
  useEffect(() => {
    let mounted = true;
    import("./continuous_intro.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load continuous_intro.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build TOC from rendered headings (H2/H3)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth scroll on TOC click
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  // Quick flashcards for the section
  const flashcards = useMemo(
    () => [
      { front: "pdf f(x)", back: "f(x) ‚â• 0 and ‚à´ f(x) dx = 1; P(a ‚â§ X ‚â§ b)=‚à´_a^b f(x)dx" },
      { front: "cdf F(x)", back: "F(x)=P(X‚â§x)=‚à´_{-‚àû}^x f(t)dt; non-decreasing, right-continuous" },
      { front: "Expectation", back: "E[X]=‚à´ x f(x) dx; Var(X)=E[X^2]‚àí(E[X])^2" },
      { front: "Change of var.", back: "If Y=g(X) monotone: f_Y(y)=f_X(g^{-1}(y))¬∑|d g^{-1}/dy|" },
      { front: "Independence", back: "f_{X,Y}(x,y)=f_X(x)f_Y(y) ‚áí F(x,y)=F_X(x)F_Y(y)" },
      { front: "LLN (intuition)", back: "Sample mean ‚Üí true mean as n grows (converges in probability)" },
      { front: "CLT (standardized)", back: "(»≤‚àíŒº)/(œÉ/‚àön) ‚áí N(0,1) under mild conditions" },
      { front: "Exponential link", back: "Poisson process inter-arrivals ~ Exp(Œª)" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Continuous Variables & the Central Limit Theorem
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            PDFs, CDFs, expectations by integration, transformations, and a practical intuition for the Law of Large
            Numbers and the Central Limit Theorem.
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* CLT mini-demo (lightweight) */}
            <section aria-labelledby="clt-demo" className="space-y-4">
              <h2 id="clt-demo" className="text-xl font-bold text-slate-900">
                Interactive: CLT Mini-Demo (Sample Means)
              </h2>
              <CLTDemo />
            </section>
          </article>

          {/* On This Page (desktop) */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA (intro quiz is optional; link now, add later if desired) */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete/poisson"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Poisson
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous/uniform"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Uniform ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/intro/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Intro Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ----------------------------- CLT Mini Demo -------------------------------- */
function CLTDemo() {
  const [dist, setDist] = useState("uniform"); // 'uniform' | 'exponential' | 'bernoulli'
  const [p, setP] = useState(0.2);             // only for bernoulli
  const [n, setN] = useState(10);              // sample size
  const [m, setM] = useState(1000);            // number of replications
  const [stats, setStats] = useState(null);    // {empMean, empSD, theoMean, theoSD}

  // Distribution generators and moments
  const draw = useMemo(() => {
    if (dist === "uniform") {
      return () => Math.random(); // U(0,1)
    } else if (dist === "exponential") {
      // Exp(1): inverse CDF
      return () => -Math.log(1 - Math.random());
    } else {
      // Bernoulli(p)
      return () => (Math.random() < p ? 1 : 0);
    }
  }, [dist, p]);

  const moments = useMemo(() => {
    if (dist === "uniform") {
      return { mean: 0.5, var: 1 / 12 };
    } else if (dist === "exponential") {
      return { mean: 1, var: 1 };
    } else {
      return { mean: p, var: p * (1 - p) };
    }
  }, [dist, p]);

  function simulate() {
    const means = new Float64Array(m);
    for (let j = 0; j < m; j++) {
      let s = 0;
      for (let i = 0; i < n; i++) s += draw();
      means[j] = s / n;
    }
    // empirical mean & sd of sample means
    let mu = 0;
    for (let j = 0; j < m; j++) mu += means[j];
    mu /= m;
    let v = 0;
    for (let j = 0; j < m; j++) {
      const d = means[j] - mu;
      v += d * d;
    }
    v /= (m - 1);
    const empMean = mu;
    const empSD = Math.sqrt(v);

    const theoMean = moments.mean;
    const theoSD = Math.sqrt(moments.var / n);

    setStats({ empMean, empSD, theoMean, theoSD });
  }

  useEffect(() => {
    // quick initial run
    simulate();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // run once

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-4">
        <label className="block text-sm font-medium text-slate-700">
          Parent distribution
          <select
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1 bg-white"
            value={dist}
            onChange={(e) => setDist(e.target.value)}
          >
            <option value="uniform">Uniform(0,1)</option>
            <option value="exponential">Exponential(1)</option>
            <option value="bernoulli">Bernoulli(p)</option>
          </select>
        </label>

        {dist === "bernoulli" && (
          <label className="block text-sm font-medium text-slate-700">
            Bernoulli p
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={p}
              onChange={(e) => setP(Number(e.target.value))}
              className="mt-2 w-full"
            />
            <div className="mt-1 text-slate-800 tabular-nums">p = {p.toFixed(2)}</div>
          </label>
        )}

        <label className="block text-sm font-medium text-slate-700">
          Sample size n
          <input
            type="number"
            min={1}
            max={2000}
            value={n}
            onChange={(e) => setN(Math.max(1, Math.min(2000, Number(e.target.value) || 1)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          Replications m
          <input
            type="number"
            min={50}
            max={20000}
            value={m}
            onChange={(e) => setM(Math.max(50, Math.min(20000, Number(e.target.value) || 50)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>
      </div>

      <div className="mt-3 flex flex-wrap gap-2">
        <button
          onClick={simulate}
          className="inline-flex items-center rounded-md bg-blue-600 px-3 py-1.5 text-sm font-semibold text-white hover:bg-blue-700"
        >
          Resimulate
        </button>
      </div>

      <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-4 text-sm">
        <Metric label="Theoretical mean Œº" value={moments.mean.toFixed(4)} />
        <Metric label="Theoretical SD(»≤)" value={Math.sqrt(moments.var / n).toFixed(4)} />
        <Metric label="Empirical mean of »≤" value={stats ? stats.empMean.toFixed(4) : "‚Äî"} />
        <Metric label="Empirical SD(»≤)" value={stats ? stats.empSD.toFixed(4) : "‚Äî"} />
      </div>

      <p className="mt-3 text-sm text-slate-700">
        As <em>n</em> increases, the distribution of the standardized sample mean approaches Normal(0,1), regardless of
        the parent distribution (provided basic regularity holds). Here we compare empirical and theoretical moments of
        »≤. Try larger <em>n</em> and different parents to see stabilization.
      </p>
    </div>
  );
}

function Metric({ label, value }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">{label}</div>
      <div className="text-slate-900 font-semibold tabular-nums">{value}</div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\Exponential.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * Exponential.jsx ‚Äî lesson page
 *
 * Convention:
 * - X ~ Exponential(Œª) with rate Œª>0 (support x‚â•0)
 * - pdf: f(x)=Œª e^{‚àíŒªx}, cdf: F(x)=1‚àíe^{‚àíŒªx}, survival S(x)=e^{‚àíŒªx}
 * - mean 1/Œª, variance 1/Œª^2, MGF Œª/(Œª‚àít) for t<Œª
 * - memoryless: P(X>s+t | X>s)=P(X>t)
 */

export default function Exponential() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown content (via Vite ?raw)
  useEffect(() => {
    let mounted = true;
    import("./exponential.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load exponential.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build TOC from rendered headings (ids assigned by RichMarkdown)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth scroll for TOC links
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  // Flashcards
  const flashcards = useMemo(
    () => [
      { front: "Support", back: "x ‚â• 0" },
      { front: "pdf", back: "f(x)=Œª e^{‚àíŒªx}" },
      { front: "cdf / survival", back: "F(x)=1‚àíe^{‚àíŒªx}, S(x)=e^{‚àíŒªx}" },
      { front: "Mean / Var", back: "E[X]=1/Œª, Var(X)=1/Œª¬≤" },
      { front: "MGF", back: "M_X(t)=Œª/(Œª‚àít), t<Œª" },
      { front: "Memoryless", back: "P(X>s+t|X>s)=P(X>t)" },
      { front: "Poisson link", back: "Inter-arrival in Poisson(Œª) process" },
      { front: "Min property", back: "min of Exp(Œª_i) ~ Exp(Œ£Œª_i)" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Exponential Distribution
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Waiting times with constant hazard. Learn the pdf/cdf, moments, the memoryless property, and connections to
            Poisson processes, minima, and Gamma sums.
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* Interactive panel */}
            <section aria-labelledby="exponential-panel" className="space-y-4">
              <h2 id="exponential-panel" className="text-xl font-bold text-slate-900">
                Interactive: Explore Exponential(Œª)
              </h2>
              <ExponentialPanel />
            </section>
          </article>

          {/* On This Page (desktop sidebar) */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous/uniform"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Uniform
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous/gamma"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Gamma ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/exponential/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Exponential Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ------------------------ Interactive Exponential Panel ------------------------ */
function ExponentialPanel() {
  const [lambda, setLambda] = useState(1.2);
  const [x, setX] = useState(1.0);
  const [c, setC] = useState(0.5);
  const [d, setD] = useState(2.0);
  const [s, setS] = useState(1.0); // memoryless: offset
  const [t, setT] = useState(0.7); // memoryless: horizon
  const [m, setM] = useState(5000); // simulation size
  const [stats, setStats] = useState(null); // {empMean, empVar}

  // guards
  useEffect(() => {
    if (lambda <= 0) setLambda(0.1);
    if (x < 0) setX(0);
    if (c < 0) setC(0);
    if (d < 0) setD(0);
    if (c > d) setD(c);
    if (s < 0) setS(0);
    if (t < 0) setT(0);
  }, [lambda, x, c, d, s, t]);

  // closed forms
  const pdfAtX = useMemo(() => (x >= 0 ? lambda * Math.exp(-lambda * x) : 0), [lambda, x]);
  const cdfAtX = useMemo(() => (x <= 0 ? 0 : 1 - Math.exp(-lambda * x)), [lambda, x]);
  const survAtX = useMemo(() => (x <= 0 ? 1 : Math.exp(-lambda * x)), [lambda, x]);
  const mean = useMemo(() => 1 / lambda, [lambda]);
  const variance = useMemo(() => 1 / (lambda * lambda), [lambda]);

  const intervalProb = useMemo(() => {
    const left = Math.max(0, Math.min(c, d));
    const right = Math.max(0, Math.max(c, d));
    if (right < left) return 0;
    return Math.exp(-lambda * left) - Math.exp(-lambda * right); // P(c‚â§X‚â§d)=S(c)‚àíS(d)
  }, [lambda, c, d]);

  // Memoryless delta: |P(X>s+t | X>s) ‚àí P(X>t)|
  const memDelta = useMemo(() => {
    const num = Math.exp(-lambda * (s + t));
    const den = Math.exp(-lambda * s);
    const cond = den > 0 ? num / den : 0;
    const rhs = Math.exp(-lambda * t);
    return Math.abs(cond - rhs);
  }, [lambda, s, t]);

  function simulate() {
    const N = Math.max(100, Math.min(20000, Math.floor(m)));
    let s1 = 0;
    let s2 = 0;
    for (let i = 0; i < N; i++) {
      // inverse-CDF: X = ‚àíln(1‚àíU)/Œª
      const u = Math.random();
      const val = -Math.log(1 - u) / lambda;
      s1 += val;
      s2 += val * val;
    }
    const empMean = s1 / N;
    const empVar = s2 / N - empMean * empMean;
    setStats({ empMean, empVar });
  }

  useEffect(() => {
    simulate();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // initial run

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-4">
        <label className="block text-sm font-medium text-slate-700">
          Rate Œª {"(>0)"}
          <input
            type="number"
            step="0.1"
            min="0.1"
            value={lambda}
            onChange={(e) => setLambda(Math.max(0.1, Number(e.target.value) || 0.1))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          x (for f,F,S)
          <input
            type="number"
            min="0"
            value={x}
            onChange={(e) => setX(Math.max(0, Number(e.target.value) || 0))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <div className="grid grid-cols-2 gap-3">
          <label className="block text-xs font-medium text-slate-700">
            c (interval)
            <input
              type="number"
              min="0"
              value={c}
              onChange={(e) => setC(Math.max(0, Number(e.target.value) || 0))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
          <label className="block text-xs font-medium text-slate-700">
            d (interval)
            <input
              type="number"
              min="0"
              value={d}
              onChange={(e) => setD(Math.max(0, Number(e.target.value) || 0))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
        </div>

        <div className="grid grid-cols-2 gap-3">
          <label className="block text-xs font-medium text-slate-700">
            s (memoryless)
            <input
              type="number"
              min="0"
              value={s}
              onChange={(e) => setS(Math.max(0, Number(e.target.value) || 0))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
          <label className="block text-xs font-medium text-slate-700">
            t (memoryless)
            <input
              type="number"
              min="0"
              value={t}
              onChange={(e) => setT(Math.max(0, Number(e.target.value) || 0))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
        </div>
      </div>

      <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-6 text-sm">
        <Metric label="E[X]" value={mean.toFixed(6)} />
        <Metric label="Var(X)" value={variance.toFixed(6)} />
        <Metric label="f(x)" value={pdfAtX.toPrecision(4)} />
        <Metric label="F(x)" value={cdfAtX.toPrecision(4)} />
        <Metric label="S(x)" value={survAtX.toPrecision(4)} />
        <Metric label="P(c‚â§X‚â§d)" value={intervalProb.toPrecision(4)} />
      </div>

      <div className="mt-5 grid gap-4 md:grid-cols-3">
        <label className="block text-sm font-medium text-slate-700">
          Simulation size m
          <input
            type="number"
            min={100}
            max={20000}
            value={m}
            onChange={(e) => setM(Math.max(100, Math.min(20000, Number(e.target.value) || 100)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <div className="flex items-end">
          <button
            onClick={simulate}
            className="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Resimulate Exp(Œª)
          </button>
        </div>

        <div className="text-sm text-slate-700">
          <div className="rounded-lg border border-slate-200 p-3">
            <div className="text-slate-500">Empirical vs theoretical</div>
            <div className="mt-1 tabular-nums">
              ŒºÃÇ = {stats ? stats.empMean.toFixed(6) : "‚Äî"} (theory {(1 / lambda).toFixed(6)})
            </div>
            <div className="tabular-nums">
              œÉÃÇ¬≤ = {stats ? stats.empVar.toFixed(6) : "‚Äî"} (theory {(1 / (lambda * lambda)).toFixed(6)})
            </div>
          </div>
        </div>
      </div>

      <div className="mt-3 grid gap-3 sm:grid-cols-2 lg:grid-cols-3 text-sm">
        <Metric label="Hazard h(x)" value={`${lambda.toFixed(3)} (constant)`} />
        <Metric label="Median" value={(Math.log(2) / lambda).toFixed(6)} />
        <Metric label="Memoryless Œî" value={memDelta.toExponential(2)} />
      </div>

      <p className="mt-3 text-sm text-slate-700">
        Simulation uses inverse-CDF: X = ‚àíln(1‚àíU)/Œª with U~Uniform(0,1). Interval probability uses the survival
        function: P(c‚â§X‚â§d)=S(c)‚àíS(d). Memoryless Œî should be ~0 up to floating error.
      </p>
    </div>
  );
}

function Metric({ label, value }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">{label}</div>
      <div className="text-slate-900 font-semibold tabular-nums">{value}</div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\ExponentialQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * ExponentialQuiz.jsx ‚Äî dedicated quiz page for Exponential(Œª)
 */

const questions = [
  {
    question: "For X ~ Exponential(Œª) with Œª>0 and support x‚â•0, the pdf is",
    options: [
      "f(x)=Œª e^{‚àíŒªx}",
      "f(x)=e^{‚àíx/Œª}/Œª for x‚àà‚Ñù",
      "f(x)=1/(b‚àía) on [a,b]",
      "f(x)=p^x(1‚àíp)^{1‚àíx} on {0,1}",
    ],
    correctIndex: 0,
    rationale: "Rate parametrisation: f(x)=Œª e^{‚àíŒªx} for x‚â•0.",
  },
  {
    question: "Which cdf/survival pair is correct for Exponential(Œª)?",
    options: [
      "F(x)=1‚àíe^{‚àíŒªx},  S(x)=e^{‚àíŒªx}",
      "F(x)=e^{‚àíŒªx},  S(x)=1‚àíe^{‚àíŒªx}",
      "F(x)=(x‚àía)/(b‚àía),  S(x)=1‚àíF(x)",
      "F(x)=x^n,  S(x)=1‚àíx^n",
    ],
    correctIndex: 0,
    rationale: "Classic forms with support x‚â•0.",
  },
  {
    question: "Mean and variance of X ~ Exponential(Œª) are",
    options: [
      "E[X]=1/Œª and Var(X)=1/Œª^2",
      "E[X]=Œª and Var(X)=Œª",
      "E[X]=0 and Var(X)=1",
      "E[X]=1/Œª and Var(X)=1/Œª",
    ],
    correctIndex: 0,
    rationale: "Single-parameter model; both scale with 1/Œª.",
  },
  {
    question: "Which statement captures the memoryless property?",
    options: [
      "P(X>t+s | X>t)=P(X>s)",
      "P(X>t+s | X>t)=P(X>t+s)",
      "P(X>t+s | X>t)=P(X>t)P(X>s)",
      "P(X>t+s | X>t)=1",
    ],
    correctIndex: 0,
    rationale: "For all s,t‚â•0, conditional tail equals fresh tail.",
  },
  {
    question: "Connection to the Poisson process:",
    options: [
      "Inter-arrival times are Exponential(Œª)",
      "Counts in [0,t] are Exponential(Œªt)",
      "Min of exponentials is Normal",
      "Exponential has increasing hazard only",
    ],
    correctIndex: 0,
    rationale: "Arrivals imply exponential waiting with rate Œª.",
  },
  {
    question: "If X1,‚Ä¶,Xk i.i.d. Exponential(Œª), then Œ£Xi is",
    options: [
      "Poisson(kŒª)",
      "Gamma(k, Œª) (rate form)",
      "Normal(k/Œª, 1/Œª)",
      "Uniform(0,k/Œª)",
    ],
    correctIndex: 1,
    rationale: "Sum of k exponentials with same rate is Gamma with shape k and rate Œª.",
  },
  {
    question: "If X ~ Exponential(Œª), the median m solves F(m)=0.5. What is m?",
    options: [
      "m = ln 2 / Œª",
      "m = 1/Œª",
      "m = Œª / ln 2",
      "m = ‚àö(1/Œª)",
    ],
    correctIndex: 0,
    rationale: "Set 1‚àíe^{‚àíŒªm}=0.5 ‚áí m=ln(2)/Œª.",
  },
  {
    question: "Min property: If Xi ~ Exponential(Œªi) indep, then Y=min Xi has",
    options: [
      "Y ~ Exponential(min Œªi)",
      "Y ~ Exponential(sum Œªi)",
      "Y ~ Gamma(‚àè Œªi, 1)",
      "No simple distribution",
    ],
    correctIndex: 1,
    rationale: "Competing exponentials: minimum is exponential with rate Œ£Œªi.",
  },
];

export default function ExponentialQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Exponential(Œª)
          </h1>
          <p className="mt-2 text-slate-700">
            Check your understanding of exponential waiting times, memorylessness, and key connections.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:exponential" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/exponential"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/gamma"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Continue to Gamma ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\Gamma.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * Gamma.jsx ‚Äî lesson page
 *
 * Convention in this page:
 *  - We use the (shape k, rate Œª) parametrisation unless otherwise stated.
 *  - pdf: f(x) = Œª^k x^{k-1} e^{-Œª x} / Œì(k),  x‚â•0
 *  - cdf: F(x) = P(k, Œª x) (regularized lower incomplete gamma)
 *  - mean k/Œª, variance k/Œª^2
 *  - For k=1, Gamma reduces to Exponential(Œª)
 *  - Waiting time to the k-th Poisson(Œª) event ~ Gamma(k, Œª)
 */

export default function Gamma() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown content (via Vite ?raw)
  useEffect(() => {
    let mounted = true;
    import("./gamma.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load gamma.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build "On This Page" TOC from rendered headings (ids assigned by RichMarkdown)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth scroll for TOC links
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  // Flashcards
  const flashcards = useMemo(
    () => [
      { front: "Support", back: "x ‚â• 0" },
      { front: "pdf", back: "f(x)=Œª^k x^{k‚àí1} e^{‚àíŒªx} / Œì(k)" },
      { front: "Mean / Var", back: "E[X]=k/Œª, Var(X)=k/Œª¬≤" },
      { front: "MGF", back: "M_X(t)=(Œª/(Œª‚àít))^k, t<Œª" },
      { front: "Sum of Exp", back: "If k‚àà‚Ñï, X ‚âç Œ£_i^k Exp(Œª)" },
      { front: "Poisson link", back: "Waiting time to k-th event of Poisson(Œª)" },
      { front: "œá¬≤ link", back: "œá¬≤_ŒΩ = Gamma(k=ŒΩ/2, Œ∏=2) (scale form)" },
      { front: "Hazard", back: "‚Üë if k>1, ‚Üì if k<1, const if k=1" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Gamma Distribution
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Positive, skewed waiting-time models with flexible shapes. Learn the pdf, moments, cdf via the incomplete
            gamma, Poisson-process links, and œá¬≤ connections.
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* Interactive panel */}
            <section aria-labelledby="gamma-panel" className="space-y-4">
              <h2 id="gamma-panel" className="text-xl font-bold text-slate-900">
                Interactive: Explore Gamma(k, Œª)
              </h2>
              <GammaPanel />
            </section>
          </article>

          {/* On This Page (desktop sidebar) */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous/exponential"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Exponential
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous/normal"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Normal ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/gamma/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Gamma Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ------------------------ Interactive Gamma Panel ------------------------ */
function GammaPanel() {
  const [k, setK] = useState(2.5);     // shape > 0
  const [lambda, setLambda] = useState(1.0); // rate > 0
  const [x, setX] = useState(1.2);
  const [c, setC] = useState(0.5);
  const [d, setD] = useState(3.0);
  const [m, setM] = useState(5000); // simulation size
  const [stats, setStats] = useState(null); // {empMean, empVar}

  useEffect(() => {
    if (k <= 0) setK(0.1);
    if (lambda <= 0) setLambda(0.1);
    if (x < 0) setX(0);
    if (c < 0) setC(0);
    if (d < 0) setD(0);
    if (c > d) setD(c);
  }, [k, lambda, x, c, d]);

  // --- Special functions: Œì, regularized P(a,x) and Q(a,x) ---
  // Lanczos log-gamma (good accuracy for our teaching ranges)
  function logGamma(z) {
    const p = [
      676.5203681218851,   -1259.1392167224028,
      771.32342877765313,  -176.61502916214059,
      12.507343278686905,  -0.13857109526572012,
      9.9843695780195716e-6, 1.5056327351493116e-7
    ];
    const g = 7;
    if (z < 0.5) {
      // Reflection formula Œì(z)Œì(1‚àíz)=œÄ/sin(œÄz)
      return Math.log(Math.PI) - Math.log(Math.sin(Math.PI * z)) - logGamma(1 - z);
    }
    z -= 1;
    let xg = 0.99999999999980993;
    for (let i = 0; i < p.length; i++) xg += p[i] / (z + i + 1);
    const t = z + g + 0.5;
    return 0.5 * Math.log(2 * Math.PI) + (z + 0.5) * Math.log(t) - t + Math.log(xg);
  }

  // Regularized lower Œ≥(a,x)/Œì(a) via series; upper via Lentz CF
  function gammP(a, x) {
    if (x <= 0) return 0;
    if (x < a + 1) {
      // series
      let ap = a, sum = 1 / a, del = sum;
      for (let n = 1; n <= 200; n++) {
        ap += 1;
        del *= x / ap;
        sum += del;
        if (Math.abs(del) < Math.abs(sum) * 1e-12) break;
      }
      return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));
    } else {
      // continued fraction for Q, then P=1-Q
      let b = x + 1 - a;
      let ccf = 1 / 1e-30;
      let dcf = 1 / b;
      let h = dcf;
      for (let i = 1; i <= 200; i++) {
        const an = -i * (i - a);
        b += 2;
        dcf = an * dcf + b;
        if (Math.abs(dcf) < 1e-30) dcf = 1e-30;
        ccf = b + an / ccf;
        if (Math.abs(ccf) < 1e-30) ccf = 1e-30;
        dcf = 1 / dcf;
        const del = dcf * ccf;
        h *= del;
        if (Math.abs(del - 1) < 1e-12) break;
      }
      const q = Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;
      return 1 - q;
    }
  }
  function gammQ(a, x) { return 1 - gammP(a, x); }

  // pdf/cdf/survival
  const pdfAtX = useMemo(() => {
    if (x < 0) return 0;
    const lg = logGamma(k);
    const val = (k - 1) * Math.log(Math.max(x, 1e-300)) + k * Math.log(lambda) - lambda * x - lg;
    return Math.exp(val);
  }, [k, lambda, x]);

  const cdfAtX = useMemo(() => {
    if (x <= 0) return 0;
    return gammP(k, lambda * x);
  }, [k, lambda, x]);

  const survAtX = useMemo(() => {
    if (x <= 0) return 1;
    return gammQ(k, lambda * x);
  }, [k, lambda, x]);

  const mean = useMemo(() => k / lambda, [k, lambda]);
  const variance = useMemo(() => k / (lambda * lambda), [k, lambda]);

  const intervalProb = useMemo(() => {
    const left = Math.max(0, Math.min(c, d));
    const right = Math.max(0, Math.max(c, d));
    if (right < left) return 0;
    return Math.max(0, gammP(k, lambda * right) - gammP(k, lambda * left));
  }, [k, lambda, c, d]);

  // For integer k, Poisson equivalence: F(x)=1‚àí‚àë_{n=0}^{k‚àí1} e^{‚àíŒªx}(Œªx)^n/n!
  const poissonEquivDelta = useMemo(() => {
    const ks = Math.round(k);
    if (Math.abs(k - ks) > 1e-9 || x < 0) return null; // only for integer shape
    const lx = lambda * x;
    let sum = 0;
    let term = 1; // (Œªx)^0/0!
    for (let n = 0; n <= ks - 1; n++) {
      if (n > 0) term *= lx / n;
      sum += term;
    }
    const altCdf = 1 - Math.exp(-lx) * sum;
    return Math.abs(altCdf - cdfAtX);
  }, [k, lambda, x, cdfAtX]);

  // Simulation (Marsaglia‚ÄìTsang for general k)
  function rngGamma(shape, rate) {
    const scale = 1 / rate;
    if (shape < 1) {
      // boost: draw u, g ~ Gamma(shape+1,1), then u^{1/shape} * g
      const u = Math.random();
      return rngGamma(shape + 1, 1) * Math.pow(u, 1 / shape) * scale;
    }
    const d = shape - 1 / 3;
    const c = 1 / Math.sqrt(9 * d);
    while (true) {
      let xNorm, v;
      // Box-Muller for Normal(0,1)
      let u1 = Math.random(), u2 = Math.random();
      xNorm = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
      v = Math.pow(1 + c * xNorm, 3);
      if (v <= 0) continue;
      const u = Math.random();
      const x2 = xNorm * xNorm;
      if (u < 1 - 0.0331 * x2 * x2) return d * v * scale;
      if (Math.log(u) < 0.5 * x2 + d * (1 - v + Math.log(v))) return d * v * scale;
    }
  }

  function simulate() {
    const N = Math.max(200, Math.min(20000, Math.floor(m)));
    let s1 = 0, s2 = 0;
    for (let i = 0; i < N; i++) {
      const g = rngGamma(k, lambda);
      s1 += g;
      s2 += g * g;
    }
    const empMean = s1 / N;
    const empVar = s2 / N - empMean * empMean;
    setStats({ empMean, empVar });
  }

  useEffect(() => {
    simulate();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // initial run

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-4">
        <label className="block text-sm font-medium text-slate-700">
          Shape k {"(>0)"}
          <input
            type="number"
            step="0.1"
            min="0.1"
            value={k}
            onChange={(e) => setK(Math.max(0.1, Number(e.target.value) || 0.1))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          Rate Œª {"(>0)"}
          <input
            type="number"
            step="0.1"
            min="0.1"
            value={lambda}
            onChange={(e) => setLambda(Math.max(0.1, Number(e.target.value) || 0.1))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          x (for f,F,S,h)
          <input
            type="number"
            min="0"
            value={x}
            onChange={(e) => setX(Math.max(0, Number(e.target.value) || 0))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <div className="grid grid-cols-2 gap-3">
          <label className="block text-xs font-medium text-slate-700">
            c (interval)
            <input
              type="number"
              min="0"
              value={c}
              onChange={(e) => setC(Math.max(0, Number(e.target.value) || 0))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
          <label className="block text-xs font-medium text-slate-700">
            d (interval)
            <input
              type="number"
              min="0"
              value={d}
              onChange={(e) => setD(Math.max(0, Number(e.target.value) || 0))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
        </div>
      </div>

      <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-7 text-sm">
        <Metric label="E[X]" value={mean.toFixed(6)} />
        <Metric label="Var(X)" value={variance.toFixed(6)} />
        <Metric label="f(x)" value={pdfAtX.toPrecision(4)} />
        <Metric label="F(x)" value={cdfAtX.toPrecision(4)} />
        <Metric label="S(x)" value={survAtX.toPrecision(4)} />
        <Metric label="P(c‚â§X‚â§d)" value={intervalProb.toPrecision(4)} />
        <Metric
          label="h(x)=f/S"
          value={(survAtX > 0 ? (pdfAtX / survAtX).toFixed(6) : "‚àû")}
        />
      </div>

      <div className="mt-5 grid gap-4 md:grid-cols-3">
        <label className="block text-sm font-medium text-slate-700">
          Simulation size m
          <input
            type="number"
            min={200}
            max={20000}
            value={m}
            onChange={(e) => setM(Math.max(200, Math.min(20000, Number(e.target.value) || 200)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <div className="flex items-end">
          <button
            onClick={simulate}
            className="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Resimulate Gamma(k,Œª)
          </button>
        </div>

        <div className="text-sm text-slate-700">
          <div className="rounded-lg border border-slate-200 p-3">
            <div className="text-slate-500">Empirical vs theoretical</div>
            <div className="mt-1 tabular-nums">
              ŒºÃÇ = {stats ? stats.empMean.toFixed(6) : "‚Äî"} (theory {(k / lambda).toFixed(6)})
            </div>
            <div className="tabular-nums">
              œÉÃÇ¬≤ = {stats ? stats.empVar.toFixed(6) : "‚Äî"} (theory {(k / (lambda * lambda)).toFixed(6)})
            </div>
          </div>
        </div>
      </div>

      {poissonEquivDelta !== null && (
        <p className="mt-3 text-sm text-slate-700">
          Integer-shape check: |Gamma CDF - (1 - e^{-Œªx}‚àë_{n=0}^{k-1}(Œªx)^n/n!)| ={" "}
          <span className="font-semibold tabular-nums">{poissonEquivDelta.toExponential(2)}</span>
        </p>
      )}

      <p className="mt-3 text-sm text-slate-700">
        CDF uses the **regularized incomplete gamma** (numerical series/continued fractions). For integer k, the CDF
        equals 1 minus a truncated Poisson tail; we show the small numerical delta above when k is an integer.
      </p>
    </div>
  );
}

function Metric({ label, value }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">{label}</div>
      <div className="text-slate-900 font-semibold tabular-nums">{value}</div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\GammaQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * GammaQuiz.jsx ‚Äî dedicated quiz page for Gamma(k, Œª)
 * Convention: (shape k, rate Œª) with support x‚â•0.
 */

const questions = [
  {
    question: "For X ~ Gamma(k, Œª) (rate form), the pdf is",
    options: [
      "f(x)=Œª^k x^{k‚àí1} e^{‚àíŒªx} / Œì(k), x‚â•0",
      "f(x)=x^{k‚àí1} e^{‚àíx/Œ∏} / (Œì(k) Œ∏^k), x‚â•0",
      "f(x)=Œª e^{‚àíŒªx}, x‚â•0",
      "f(x)=1/(b‚àía), a‚â§x‚â§b",
    ],
    correctIndex: 0,
    rationale:
      "Rate parametrisation; scale form is option 2 (equivalent under Œ∏=1/Œª).",
  },
  {
    question: "Mean and variance of X ~ Gamma(k, Œª) are",
    options: [
      "E[X]=k/Œª, Var(X)=k/Œª^2",
      "E[X]=1/Œª, Var(X)=1/Œª^2",
      "E[X]=kŒª, Var(X)=kŒª^2",
      "E[X]=k, Var(X)=2k",
    ],
    correctIndex: 0,
    rationale: "Divide shape by rate for the mean; variance scales with 1/Œª¬≤.",
  },
  {
    question: "Which statement is TRUE?",
    options: [
      "Gamma is memoryless for any k",
      "Gamma reduces to Exponential when k=1",
      "Gamma is defined on ‚Ñù",
      "Gamma has constant hazard for all k",
    ],
    correctIndex: 1,
    rationale: "Only k=1 (Exponential) is memoryless; hazard is constant only at k=1.",
  },
  {
    question: "Poisson-process link: the time to the k-th event in a Poisson(Œª) process is",
    options: [
      "Exponential(Œª)",
      "Gamma(k, Œª)",
      "Normal(k/Œª, k/Œª^2)",
      "Uniform(0, k/Œª)",
    ],
    correctIndex: 1,
    rationale: "Waiting time to the k-th arrival is Gamma with that rate.",
  },
  {
    question: "Which identity is correct for integer k?",
    options: [
      "F(x)=1‚àíe^{‚àíŒªx} ‚àë_{n=0}^{k‚àí1} (Œªx)^n/n!",
      "F(x)=e^{‚àíŒªx} ‚àë_{n=0}^{k‚àí1} (Œªx)^n/n!",
      "F(x)=‚àë_{n=k}^{‚àû} (Œªx)^n/n!",
      "F(x)=Œ¶((x‚àík/Œª)/‚àö(k/Œª^2))",
    ],
    correctIndex: 0,
    rationale: "Gamma CDF equals one minus a truncated Poisson tail when k is an integer.",
  },
  {
    question: "Which relation with œá¬≤ is correct?",
    options: [
      "œá¬≤_ŒΩ ~ Gamma(k=ŒΩ/2, Œ∏=2) (scale form)",
      "œá¬≤_ŒΩ ~ Gamma(k=ŒΩ, Œª=1)",
      "œá¬≤_ŒΩ ~ Gamma(k=ŒΩ/2, Œª=2)",
      "œá¬≤_ŒΩ ~ Gamma(k=ŒΩ, Œ∏=1/2)",
    ],
    correctIndex: 0,
    rationale: "Standard mapping; equivalently rate form has Œª=1/2.",
  },
  {
    question: "Hazard behaviour of Gamma(k, Œª) is",
    options: [
      "Decreasing for all k",
      "Increasing for all k",
      "Constant for all k",
      "Decreasing if k<1, constant if k=1, increasing if k>1",
    ],
    correctIndex: 3,
    rationale: "Gamma spans DFR ‚Üí constant ‚Üí IFR as k increases.",
  },
  {
    question: "If X1 ~ Gamma(k1, Œª) and X2 ~ Gamma(k2, Œª) independent, then X1+X2 is",
    options: [
      "Gamma(k1+k2, Œª)",
      "Gamma(k1k2, Œª)",
      "Gamma(k1+k2, 2Œª)",
      "No simple form",
    ],
    correctIndex: 0,
    rationale: "Additivity holds for common rate (or common scale).",
  },
  {
    question: "Mode of Gamma(k, Œª) when k>1 is",
    options: [
      "(k‚àí1)/Œª",
      "k/Œª",
      "1/Œª",
      "Œª/(k‚àí1)",
    ],
    correctIndex: 0,
    rationale: "Take derivative of log-pdf; set to zero.",
  },
  {
    question: "Convert Gamma(k, Œª) (rate) to scale form Gamma(k, Œ∏). What is Œ∏?",
    options: [
      "Œ∏ = 1/Œª",
      "Œ∏ = Œª",
      "Œ∏ = kŒª",
      "Œ∏ = k/Œª",
    ],
    correctIndex: 0,
    rationale: "Scale is the reciprocal of rate.",
  },
];

export default function GammaQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Gamma(k, Œª)
          </h1>
          <p className="mt-2 text-slate-700">
            Check your understanding of the Gamma family, parametrisations, Poisson-process links, and œá¬≤ connections.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:gamma" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/gamma"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/normal"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Continue to Normal ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\Normal.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * Normal.jsx ‚Äî lesson page
 *
 * Conventions:
 * - X ~ Normal(Œº, œÉ¬≤) with œÉ>0
 * - pdf: f(x) = (1/(œÉ‚àö(2œÄ))) * exp(-(x-Œº)¬≤/(2œÉ¬≤))
 * - cdf: F(x) = Œ¶((x-Œº)/œÉ) with Œ¶ standard normal cdf
 * - z-score: z=(x-Œº)/œÉ; 68‚Äì95‚Äì99.7 rule
 * - linear & sum closures: aX+b and sums of independent Normals remain Normal
 */

export default function Normal() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown content
  useEffect(() => {
    let mounted = true;
    import("./normal.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load normal.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build TOC from rendered headings (H2/H3)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;
    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };
    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth-scroll TOC links
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  // Flashcards
  const flashcards = useMemo(
    () => [
      { front: "pdf", back: "f(x)= (1/(œÉ‚àö(2œÄ))) e^{-(x‚àíŒº)¬≤/(2œÉ¬≤)}" },
      { front: "cdf", back: "F(x)=Œ¶((x‚àíŒº)/œÉ)" },
      { front: "z-score", back: "z=(x‚àíŒº)/œÉ" },
      { front: "68‚Äì95‚Äì99.7", back: "¬±1œÉ ~68%, ¬±2œÉ ~95%, ¬±3œÉ ~99.7%" },
      { front: "Linear transform", back: "aX+b ~ Normal(aŒº+b, a¬≤œÉ¬≤)" },
      { front: "Sum closure", back: "Œ£ indep Normals ‚áí Normal (Œº sums, variances add)" },
      { front: "Standard normal", back: "Z~N(0,1); Œ¶, œÜ" },
      { front: "CLT link", back: "Means approx Normal for large n" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Normal (Gaussian) Distribution
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            The bell curve: pdf/cdf, z-scores, the 68‚Äì95‚Äì99.7 rule, and the Normal family‚Äôs powerful closure properties.
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* Interactive panel */}
            <section aria-labelledby="normal-panel" className="space-y-4">
              <h2 id="normal-panel" className="text-xl font-bold text-slate-900">
                Interactive: Explore Normal(Œº, œÉ¬≤)
              </h2>
              <NormalPanel />
            </section>
          </article>

          {/* On This Page (desktop) */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous/gamma"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Gamma
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Back to Continuous Intro ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/normal/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Normal Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ------------------------ Interactive Normal Panel ------------------------ */
function NormalPanel() {
  const [mu, setMu] = useState(0);
  const [sigma, setSigma] = useState(1);
  const [x, setX] = useState(0.5);
  const [a, setA] = useState(-1);
  const [b, setB] = useState(1);
  const [m, setM] = useState(5000); // simulation size
  const [stats, setStats] = useState(null); // {empMean, empVar}

  useEffect(() => {
    if (sigma <= 0) setSigma(0.1);
    if (a > b) setB(a);
  }, [sigma, a, b]);

  // Standard normal helpers
  const SQRT2 = Math.SQRT2;
  function erf(z) {
    // Abramowitz & Stegun 7.1.26 approximation (good to ~1e-7)
    const sign = z < 0 ? -1 : 1;
    const t = 1 / (1 + 0.3275911 * Math.abs(z));
    const a1 = 0.254829592, a2 = -0.284496736, a3 = 1.421413741, a4 = -1.453152027, a5 = 1.061405429;
    const poly = (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t;
    const y = 1 - poly * Math.exp(-z * z);
    return sign * y;
  }
  function phi(z) {
    return Math.exp(-0.5 * z * z) / Math.sqrt(2 * Math.PI);
  }
  function Phi(z) {
    return 0.5 * (1 + erf(z / SQRT2));
  }

  // Transform to standard normal
  const z = useMemo(() => (x - mu) / sigma, [x, mu, sigma]);

  const pdfAtX = useMemo(() => phi(z) / sigma, [z, sigma]);
  const cdfAtX = useMemo(() => Phi(z), [z]);

  const intervalProb = useMemo(() => {
    const za = (a - mu) / sigma;
    const zb = (b - mu) / sigma;
    return Math.max(0, Phi(Math.max(za, zb)) - Phi(Math.min(za, zb)));
  }, [a, b, mu, sigma]);

  const p1 = useMemo(() => Phi(1) - Phi(-1), []);
  const p2 = useMemo(() => Phi(2) - Phi(-2), []);
  const p3 = useMemo(() => Phi(3) - Phi(-3), []);

  // Simulation with Box‚ÄìMuller
  function boxMuller() {
    const u1 = Math.random();
    const u2 = Math.random();
    const r = Math.sqrt(-2 * Math.log(1 - u1));
    const theta = 2 * Math.PI * u2;
    return r * Math.cos(theta);
  }
  function simulate() {
    const N = Math.max(200, Math.min(20000, Math.floor(m)));
    let s1 = 0, s2 = 0;
    for (let i = 0; i < N; i++) {
      const z0 = boxMuller();
      const val = mu + sigma * z0;
      s1 += val;
      s2 += val * val;
    }
    const empMean = s1 / N;
    const empVar = s2 / N - empMean * empMean;
    setStats({ empMean, empVar });
  }

  useEffect(() => {
    simulate();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // initial run

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-4">
        <label className="block text-sm font-medium text-slate-700">
          Œº (mean)
          <input
            type="number"
            value={mu}
            onChange={(e) => setMu(Number(e.target.value))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          œÉ (stdev, {">"}0)
          <input
            type="number"
            step="0.1"
            min="0.1"
            value={sigma}
            onChange={(e) => setSigma(Math.max(0.1, Number(e.target.value) || 0.1))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          x (for f and F)
          <input
            type="number"
            value={x}
            onChange={(e) => setX(Number(e.target.value))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <div className="grid grid-cols-2 gap-3">
          <label className="block text-xs font-medium text-slate-700">
            a (interval)
            <input
              type="number"
              value={a}
              onChange={(e) => setA(Number(e.target.value))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
          <label className="block text-xs font-medium text-slate-700">
            b (interval)
            <input
              type="number"
              value={b}
              onChange={(e) => setB(Number(e.target.value))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
        </div>
      </div>

      <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-7 text-sm">
        <Metric label="z=(x‚àíŒº)/œÉ" value={z.toFixed(6)} />
        <Metric label="f(x)" value={pdfAtX.toPrecision(4)} />
        <Metric label="F(x)" value={cdfAtX.toPrecision(4)} />
        <Metric label="P(a‚â§X‚â§b)" value={intervalProb.toPrecision(4)} />
        <Metric label="P(|X‚àíŒº|‚â§1œÉ)" value={p1.toPrecision(4)} />
        <Metric label="P(|X‚àíŒº|‚â§2œÉ)" value={p2.toPrecision(4)} />
        <Metric label="P(|X‚àíŒº|‚â§3œÉ)" value={p3.toPrecision(4)} />
      </div>

      <div className="mt-5 grid gap-4 md:grid-cols-3">
        <label className="block text-sm font-medium text-slate-700">
          Simulation size m
          <input
            type="number"
            min={200}
            max={20000}
            value={m}
            onChange={(e) => setM(Math.max(200, Math.min(20000, Number(e.target.value) || 200)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>
        <div className="flex items-end">
          <button
            onClick={simulate}
            className="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Resimulate N(Œº,œÉ¬≤)
          </button>
        </div>

        <div className="text-sm text-slate-700">
          <div className="rounded-lg border border-slate-200 p-3">
            <div className="text-slate-500">Empirical vs theoretical</div>
            <div className="mt-1 tabular-nums">
              ŒºÃÇ = {stats ? stats.empMean.toFixed(6) : "‚Äî"} (theory {mu.toFixed(6)})
            </div>
            <div className="tabular-nums">
              œÉÃÇ¬≤ = {stats ? stats.empVar.toFixed(6) : "‚Äî"} (theory {(sigma * sigma).toFixed(6)})
            </div>
          </div>
        </div>
      </div>

      <p className="mt-3 text-sm text-slate-700">
        We use Œ¶(z)=¬Ω(1+erf(z/‚àö2)) with an accurate erf approximation. Box‚ÄìMuller sampling checks mean/variance.
      </p>
    </div>
  );
}

function Metric({ label, value }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">{label}</div>
      <div className="text-slate-900 font-semibold tabular-nums">{value}</div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\NormalQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * NormalQuiz.jsx ‚Äî dedicated quiz page for Normal(Œº, œÉ¬≤)
 */

const questions = [
  {
    question: "For X ~ Normal(Œº, œÉ¬≤), the pdf is",
    options: [
      "f(x)= (1/(œÉ‚àö(2œÄ))) exp(‚àí(x‚àíŒº)¬≤/(2œÉ¬≤))",
      "f(x)= Œª e^{‚àíŒªx},  x‚â•0",
      "f(x)= 1/(b‚àía) on [a,b]",
      "f(x)= (1/‚àö(2œÄ)) exp(‚àíx¬≤/2),  x‚àà‚Ñù",
    ],
    correctIndex: 0,
    rationale:
      "Option 4 is the standard Normal pdf; with general Œº,œÉ, shift/scale by œÉ.",
  },
  {
    question: "Which statement about the cdf is correct?",
    options: [
      "P(X‚â§x)=Œ¶((x‚àíŒº)/œÉ)",
      "P(X‚â§x)=1‚àíŒ¶((x‚àíŒº)/œÉ)",
      "P(X‚â§x)=e^{‚àí(x‚àíŒº)¬≤/(2œÉ¬≤)}",
      "P(X‚â§x)= (x‚àíŒº)/(œÉ‚àö(2œÄ))",
    ],
    correctIndex: 0,
    rationale: "Standardize with z=(x‚àíŒº)/œÉ and use the standard Normal cdf Œ¶.",
  },
  {
    question: "z-score is defined as",
    options: [
      "z = (x‚àíŒº)/œÉ",
      "z = (x‚àíŒº)œÉ",
      "z = (x+Œº)/œÉ",
      "z = x/œÉ¬≤",
    ],
    correctIndex: 0,
    rationale: "Standardization maps Normal(Œº,œÉ¬≤) to standard Normal.",
  },
  {
    question: "Approximate mass within ¬±1œÉ for a Normal is",
    options: ["‚âà68%", "‚âà50%", "‚âà95%", "‚âà99.7%"],
    correctIndex: 0,
    rationale: "68‚Äì95‚Äì99.7 rule.",
  },
  {
    question: "If X ~ N(Œº, œÉ¬≤), then aX+b is distributed as",
    options: [
      "N(aŒº+b, a¬≤œÉ¬≤)",
      "N(aŒº+b, œÉ¬≤/a¬≤)",
      "N(Œº, œÉ¬≤)+b",
      "N(a+b, œÉ¬≤)",
    ],
    correctIndex: 0,
    rationale: "Linear transformation preserves Normal with mean/variance scaling.",
  },
  {
    question: "If X ~ N(Œº1, œÉ1¬≤) and Y ~ N(Œº2, œÉ2¬≤) independent, then X+Y ~",
    options: [
      "N(Œº1+Œº2, œÉ1¬≤+œÉ2¬≤)",
      "N(Œº1+Œº2, (œÉ1+œÉ2)¬≤)",
      "N(Œº1Œº2, œÉ1¬≤œÉ2¬≤)",
      "Not Normal",
    ],
    correctIndex: 0,
    rationale: "Sums of independent Normals are Normal; variances add.",
  },
  {
    question: "Which symmetry identity holds for the standard Normal?",
    options: [
      "Œ¶(‚àíz)=1‚àíŒ¶(z)",
      "Œ¶(‚àíz)=Œ¶(z)",
      "œÜ(‚àíz)=‚àíœÜ(z)",
      "P(Z>z)=Œ¶(z)",
    ],
    correctIndex: 0,
    rationale: "Standard Normal is symmetric: œÜ(‚àíz)=œÜ(z), hence Œ¶(‚àíz)=1‚àíŒ¶(z).",
  },
  {
    question: "Quick calc: X ~ N(10, 2¬≤). P(X ‚â§ 12) equals",
    options: [
      "Œ¶((12‚àí10)/2)",
      "Œ¶((12‚àí10)¬∑2)",
      "1 ‚àí Œ¶((12‚àí10)/2)",
      "Œ¶(12)",
    ],
    correctIndex: 0,
    rationale: "Standardize with z=(12‚àí10)/2=1.",
  },
  {
    question: "For large z>0, a quick right-tail bound is",
    options: [
      "P(Z>z) ‚âà œÜ(z)/z (Mills ratio)",
      "P(Z>z) ‚âà 1/z",
      "P(Z>z) ‚âà e^{‚àíz}",
      "P(Z>z) ‚âà z¬∑œÜ(z)",
    ],
    correctIndex: 0,
    rationale: "Mills ratio gives a sharp asymptotic approximation.",
  },
];

export default function NormalQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Normal(Œº, œÉ¬≤)
          </h1>
          <p className="mt-2 text-slate-700">
            Check your understanding of pdf/cdf, z-scores, rule-of-thumb coverage, and closure properties.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:normal" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/normal"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Back to Continuous Intro ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\Uniform.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * Uniform.jsx ‚Äî lesson page
 *
 * Convention:
 * - X ~ Uniform(a,b), with a < b
 * - pdf: f(x) = 1/(b-a) for a ‚â§ x ‚â§ b, 0 otherwise
 * - cdf: F(x) = 0 (x<a), (x-a)/(b-a) (a‚â§x‚â§b), 1 (x>b)
 * - mean (a+b)/2, variance (b-a)^2/12
 */

export default function Uniform() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown content (via Vite ?raw)
  useEffect(() => {
    let mounted = true;
    import("./uniform.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load uniform.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build "On This Page" TOC from rendered headings (ids assigned by RichMarkdown)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth scroll for TOC links
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  // Flashcards
  const flashcards = useMemo(
    () => [
      { front: "Support", back: "x ‚àà [a,b] with a<b" },
      { front: "pdf", back: "f(x)=1/(b‚àía) on [a,b], 0 otherwise" },
      { front: "cdf", back: "F(x)=0 (x<a), (x‚àía)/(b‚àía) (a‚â§x‚â§b), 1 (x>b)" },
      { front: "Mean", back: "E[X]=(a+b)/2" },
      { front: "Variance", back: "Var(X)=(b‚àía)^2/12" },
      { front: "Transform", back: "If U~U(0,1), then a+(b‚àía)U ~ U(a,b)" },
      { front: "Interval prob.", back: "P(c‚â§X‚â§d)=max(0, min(d,b)‚àímax(c,a))/(b‚àía)" },
      { front: "Order stats (U(0,1))", back: "max has pdf n x^{n‚àí1}; min has pdf n(1‚àíx)^{n‚àí1}" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Uniform Distribution
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            A flat density on an interval. Learn the pdf/cdf, moments, interval probabilities, and the key{" "}
            <em>U(0,1) transformation</em> trick for simulation.
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* Interactive panel */}
            <section aria-labelledby="uniform-panel" className="space-y-4">
              <h2 id="uniform-panel" className="text-xl font-bold text-slate-900">
                Interactive: Explore Uniform(a, b)
              </h2>
              <UniformPanel />
            </section>
          </article>

          {/* On This Page (desktop sidebar) */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Continuous Intro
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous/exponential"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Exponential ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/uniform/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Uniform Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* --------------------------- Interactive Uniform Panel --------------------------- */
function UniformPanel() {
  const [a, setA] = useState(0);
  const [b, setB] = useState(1);
  const [x, setX] = useState(0.3);
  const [c, setC] = useState(0.2);
  const [d, setD] = useState(0.6);
  const [m, setM] = useState(5000); // simulation size
  const [stats, setStats] = useState(null); // {empMean, empVar}

  // keep constraints: a < b, c ‚â§ d
  useEffect(() => {
    if (a >= b) setB(a + 1e-6);
    if (c > d) setD(c);
    // clamp x inside [a,b]
    if (x < a) setX(a);
    if (x > b) setX(b);
  }, [a, b, c, d, x]);

  const width = useMemo(() => b - a, [a, b]);
  const mean = useMemo(() => (a + b) / 2, [a, b]);
  const variance = useMemo(() => (width * width) / 12, [width]);

  const pdfAtX = useMemo(() => (x >= a && x <= b && width > 0 ? 1 / width : 0), [x, a, b, width]);
  const cdfAtX = useMemo(() => {
    if (x <= a) return 0;
    if (x >= b) return 1;
    return (x - a) / width;
  }, [x, a, b, width]);

  const intervalProb = useMemo(() => {
    if (width <= 0) return 0;
    const left = Math.max(a, c);
    const right = Math.min(b, d);
    return Math.max(0, right - left) / width;
  }, [a, b, c, d, width]);

  function simulate() {
    if (!(width > 0) || m < 1) {
      setStats(null);
      return;
    }
    let s = 0;
    let s2 = 0;
    for (let i = 0; i < m; i++) {
      const u = Math.random(); // U(0,1)
      const val = a + width * u; // transform to U(a,b)
      s += val;
      s2 += val * val;
    }
    const empMean = s / m;
    const empVar = s2 / m - empMean * empMean;
    setStats({ empMean, empVar });
  }

  useEffect(() => {
    simulate();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // initial run

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-4">
        <label className="block text-sm font-medium text-slate-700">
          a (left endpoint)
          <input
            type="number"
            value={a}
            onChange={(e) => setA(Number(e.target.value))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          b (right endpoint)
          <input
            type="number"
            value={b}
            onChange={(e) => setB(Number(e.target.value))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          x (for f(x), F(x))
          <input
            type="number"
            value={x}
            onChange={(e) => setX(Number(e.target.value))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <div className="grid grid-cols-2 gap-3">
          <label className="block text-xs font-medium text-slate-700">
            c (interval)
            <input
              type="number"
              value={c}
              onChange={(e) => setC(Number(e.target.value))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
          <label className="block text-xs font-medium text-slate-700">
            d (interval)
            <input
              type="number"
              value={d}
              onChange={(e) => setD(Number(e.target.value))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
        </div>
      </div>

      <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-6 text-sm">
        <Metric label="Width (b‚àía)" value={width.toFixed(6)} />
        <Metric label="E[X]" value={mean.toFixed(6)} />
        <Metric label="Var(X)" value={variance.toFixed(6)} />
        <Metric label="f(x)" value={pdfAtX.toPrecision(4)} />
        <Metric label="F(x)" value={cdfAtX.toPrecision(4)} />
        <Metric label="P(c‚â§X‚â§d)" value={intervalProb.toPrecision(4)} />
      </div>

      <div className="mt-5 grid gap-4 md:grid-cols-3">
        <label className="block text-sm font-medium text-slate-700">
          Simulation size m
          <input
            type="number"
            min={100}
            max={20000}
            value={m}
            onChange={(e) => setM(Math.max(100, Math.min(20000, Number(e.target.value) || 100)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>
        <div className="flex items-end">
          <button
            onClick={simulate}
            className="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Resimulate U(a,b)
          </button>
        </div>

        <div className="text-sm text-slate-700">
          <div className="rounded-lg border border-slate-200 p-3">
            <div className="text-slate-500">Empirical vs theoretical</div>
            <div className="mt-1 tabular-nums">
              ŒºÃÇ = {stats ? stats.empMean.toFixed(6) : "‚Äî"} (theory {(mean).toFixed(6)})
            </div>
            <div className="tabular-nums">
              œÉÃÇ¬≤ = {stats ? stats.empVar.toFixed(6) : "‚Äî"} (theory {(variance).toFixed(6)})
            </div>
          </div>
        </div>
      </div>

      <p className="mt-3 text-sm text-slate-700">
        Simulation uses the transformation <code>a+(b‚àía)U</code> with <code>U~Uniform(0,1)</code>. Interval probability
        uses overlap length divided by width.
      </p>
    </div>
  );
}

function Metric({ label, value }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">{label}</div>
      <div className="text-slate-900 font-semibold tabular-nums">{value}</div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\UniformQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * UniformQuiz.jsx ‚Äî dedicated quiz page for Uniform(a,b)
 */

const questions = [
  {
    question: "For X ~ Uniform(a,b) with a<b, the pdf is",
    options: [
      "f(x)=1/(b‚àía) for a‚â§x‚â§b, 0 otherwise",
      "f(x)=(x‚àía)/(b‚àía) for a‚â§x‚â§b, 0 otherwise",
      "f(x)=e^{‚àí(x‚àía)} on [a,‚àû)",
      "f(x)=p^x(1‚àíp)^{1‚àíx} on {0,1}",
    ],
    correctIndex: 0,
    rationale: "Uniform has constant density on [a,b].",
  },
  {
    question: "The cdf of X ~ Uniform(a,b) is",
    options: [
      "0 (x<a), (x‚àía)/(b‚àía) (a‚â§x‚â§b), 1 (x>b)",
      "e^{‚àí(x‚àía)} (x‚â•a)",
      "x^n on [0,1]",
      "1‚àí(1‚àíx)^n on [0,1]",
    ],
    correctIndex: 0,
    rationale: "Integrating the flat pdf yields a linear cdf on [a,b].",
  },
  {
    question: "Which moments are correct for Uniform(a,b)?",
    options: [
      "E[X]=(a+b)/2 and Var(X)=(b‚àía)^2/12",
      "E[X]=a and Var(X)=b‚àía",
      "E[X]=(b‚àía)/2 and Var(X)=(a+b)^2",
      "E[X]=0 and Var(X)=1",
    ],
    correctIndex: 0,
    rationale: "Standard formulas for Uniform(a,b) moments.",
  },
  {
    question: "If U ~ Uniform(0,1), then a+(b‚àía)U has distribution",
    options: [
      "Uniform(a,b)",
      "Exponential(b‚àía)",
      "Normal((a+b)/2, (b‚àía)^2/12)",
      "Beta(a,b)",
    ],
    correctIndex: 0,
    rationale: "Linear transform maps U(0,1) to U(a,b).",
  },
  {
    question: "Let X ~ Uniform(2,8). What is P(3 ‚â§ X ‚â§ 5)?",
    options: ["(5‚àí3)/(8‚àí2)", "(5‚àí2)/(8‚àí3)", "(5‚àí3)/8", "Cannot be determined"],
    correctIndex: 0,
    rationale: "Interval length divided by width: (5‚àí3)/(8‚àí2)=1/3.",
  },
  {
    question: "For U1,‚Ä¶,Un i.i.d. Uniform(0,1), the pdf of max(Ui) is",
    options: [
      "n x^{n‚àí1} on [0,1]",
      "n (1‚àíx)^{n‚àí1} on [0,1]",
      "1 on [0,1]",
      "e^{‚àíx} on [0,‚àû)",
    ],
    correctIndex: 0,
    rationale: "Fmax(x)=x^n ‚áí fmax(x)=n x^{n‚àí1}.",
  },
  {
    question: "Which statement is TRUE?",
    options: [
      "P(X=a)=1/(b‚àía)",
      "P(X=b)=1/(b‚àía)",
      "P(X=c)=0 for any single point c",
      "P(X‚â§a)=1",
    ],
    correctIndex: 2,
    rationale: "Continuous distributions assign zero mass to single points.",
  },
];

export default function UniformQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="continuous"
        sectionTitle="Continuous"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Uniform(a,b)
          </h1>
          <p className="mt-2 text-slate-700">
            Quick check on pdf/cdf, moments, transformation, and simple interval probabilities.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:uniform" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/uniform"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous/exponential"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Continue to Exponential ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\continuous\clt.md
================================================================================

# Central Limit Theorem (CLT)

Let \(X_1, X_2, \dots\) be i.i.d. with finite mean \( \mu \) and variance \( \sigma^2>0 \). Define the **sample mean**
\[
\overline{X}_n = \frac{1}{n}\sum_{i=1}^n X_i.
\]
The **CLT** states that the standardized mean
\[
Z_n \;=\; \frac{\overline{X}_n-\mu}{\sigma/\sqrt{n}}
\]
converges **in distribution** to the **standard Normal**:
\[
Z_n \;\Rightarrow\; \mathcal{N}(0,1)\qquad\text{as }n\to\infty.
\]

> üí° **Interpretation**  
> Sums/averages of many small, independent contributions behave approximately **Normal**, regardless of the parent distribution (provided basic regularity holds).

---

## 1) LLN vs CLT

- **Law of Large Numbers (LLN):** \( \overline{X}_n \xrightarrow{P} \mu \) (convergence in probability).  
- **CLT:** \( \sqrt{n}(\overline{X}_n-\mu) \Rightarrow \mathcal{N}(0,\sigma^2) \) (distributional convergence).

LLN ensures **consistency** of the mean; CLT gives an **approximate sampling distribution** for finite \(n\).

---

## 2) Rates: Berry‚ÄìEsseen (sketch)

If \( \rho_3 = \mathbb{E}|X-\mu|^3 < \infty \), then for some universal constant \(C\) (e.g., \(C\approx 0.56\)),
\[
\sup_{x}\big| P(Z_n\le x) - \Phi(x) \big| \;\le\; C\frac{\rho_3}{\sigma^3\sqrt{n}}.
\]
So Normal approximation **improves like \(1/\sqrt{n}\)**, and is slower when the parent is **skewed/heavy-tailed**.

---

## 3) When CLT can fail

- **Infinite variance:** heavy-tailed distributions with tail index \( \alpha\le 2 \) (e.g., **Cauchy**, **Pareto(Œ±‚â§2)**) do **not** satisfy the classical CLT.  
- **Strong dependence:** correlations across observations can break the i.i.d. conditions (there are dependent CLTs with extra assumptions).  
- **Non-identical:** require additional conditions (e.g., **Lindeberg** or **Lyapunov** CLTs for triangular arrays).

> ‚ö†Ô∏è **Caution**  
> Even with finite variance, **very heavy skew** can require **larger n** for a good Normal approximation.

---

## 4) Studentization & t-approximation

In practice \( \sigma \) is unknown. Replace it with the sample standard deviation \( S \). The **Studentized** mean
\[
T_n=\frac{\overline{X}_n-\mu}{S/\sqrt{n}}
\]
has an exact **t** distribution when the parent is Normal (with \(n-1\) degrees of freedom), and more generally \(T_n\Rightarrow \mathcal{N}(0,1)\).

---

## 5) Finite population correction (FPC)

If sampling **without replacement** from a finite population of size \(N\) (SRSWOR), the variance of \( \overline{X} \) is
\[
\mathrm{Var}(\overline{X})= \frac{\sigma^2}{n}\left(1-\frac{n}{N}\right)\cdot \frac{N}{N-1},
\]
often approximated by multiplying the standard error by \( \sqrt{\frac{N-n}{N-1}} \).

---

## 6) Quick examples

- **Bernoulli(p):** \( \mu=p, \ \sigma^2=p(1-p) \). Then \( Z_n \) approximates \( \mathcal{N}(0,1) \).  
- **Exponential(1):** \( \mu=1, \ \sigma^2=1 \). Despite skew, \( Z_n \) moves toward Normal; coverage is slower than symmetric cases.  
- **Cauchy(0,1):** no mean/variance ‚áí the classical CLT **does not apply**; sample means are Cauchy distributed for all \(n\).

---

## 7) Practical guidance

- Check **skewness/heavy tails**; consider **transformations** or **robust** summaries if needed.  
- For **proportions** \( \hat{p} \), use Normal only if \( np \) and \( n(1-p) \) are both moderate (e.g., ‚â•10).  
- Prefer **exact** or **Wilson/Agresti‚ÄìCoull** intervals for small \(n\) in binomial problems.  
- Plot the empirical distribution of standardized means if possible; compare coverage to the **68‚Äì95‚Äì99.7** rule.

---

## 8) Visual intuition

CLT stacks independent ‚Äújittery‚Äù contributions; after standardisation, the sum smooths toward a bell curve:

![clt-schematic](./images/clt-schematic-placeholder.png)

<small>Place images for this page under `src/tutorials/probability/continuous/images/`.</small>


================================================================================
üìÑ File: src\tutorials\probability\continuous\continuous_intro.md
================================================================================

# Continuous Variables & the CLT

Many real-world quantities‚Äîtime to failure, height, latency, returns‚Äîare best modelled as **continuous** random variables. In this section we recap key ideas (pdf/cdf, expectations by integration, transformations) and build intuition for the **Law of Large Numbers (LLN)** and the **Central Limit Theorem (CLT)**.

> üí° **Key idea**  
> Continuous models replace discrete sums with **integrals**. Probabilities are **areas under a curve** (the **pdf**) and cumulative probabilities are given by the **cdf**.

---

## 1) pdf and cdf

A continuous random variable \(X\) admits a **probability density function** (pdf) \(f(x)\) with:
\[
f(x)\ge 0,\qquad \int_{-\infty}^{\infty} f(x)\,dx=1.
\]
For any interval \([a,b]\),
\[
P(a\le X\le b)=\int_a^b f(x)\,dx.
\]

The **cumulative distribution function** (cdf) \(F(x)=P(X\le x)\) satisfies:
- \(F\) is non-decreasing and right-continuous;
- \(F(x)=\int_{-\infty}^{x} f(t)\,dt\) when \(f\) exists;
- \(P(X=x)=0\) at any single point (area under a ‚Äúline‚Äù is zero).

---

## 2) Expectation and variance (by integration)

For integrable \(X\),
\[
\mathbb{E}[X]=\int_{-\infty}^{\infty} x\,f(x)\,dx, \qquad
\mathbb{E}[g(X)]=\int_{-\infty}^{\infty} g(x)\,f(x)\,dx.
\]
The **variance** is
\[
\mathrm{Var}(X)=\mathbb{E}[X^2]-\big(\mathbb{E}[X]\big)^2.
\]

> üí° **Shortcut**  
> If \(X\) has mean \(\mu\) and variance \(\sigma^2\), then for independent \(X_1,\ldots,X_n\):  
> \(\mathbb{E}[\overline{X}]=\mu\), \(\mathrm{Var}(\overline{X})=\sigma^2/n\).

---

## 3) Transformations & change of variables

For a **monotone** differentiable mapping \(Y=g(X)\), with inverse \(x=g^{-1}(y)\),
\[
f_Y(y)= f_X\!\big(g^{-1}(y)\big)\,\left|\frac{d}{dy}g^{-1}(y)\right|.
\]
This is the **change-of-variables** rule for densities.

> ‚ö†Ô∏è **Non-monotone cases**  
> Break the domain into monotone pieces and **sum** contributions. For vector transforms \(\mathbf{Y}=g(\mathbf{X})\), use the **Jacobian determinant** \( |\det J| \).

---

## 4) Joint, marginal, conditional

For two continuous variables \(X,Y\) with joint pdf \(f_{X,Y}(x,y)\):
- **Marginals:** \(f_X(x)=\int f_{X,Y}(x,y)\,dy\), \(f_Y(y)=\int f_{X,Y}(x,y)\,dx\).
- **Conditionals:** \(f_{X\mid Y}(x\mid y)=\dfrac{f_{X,Y}(x,y)}{f_Y(y)}\) (if \(f_Y(y)>0\)).
- **Independence:** \(f_{X,Y}(x,y)=f_X(x)f_Y(y)\) for all \(x,y\).

---

## 5) LLN & CLT (practical intuition)

Let \(X_1,\ldots, X_n\) be i.i.d. with mean \(\mu\) and variance \(\sigma^2\).

- **LLN:** the sample mean \(\overline{X}\) **converges** to \(\mu\) as \(n\to\infty\).
- **CLT:** the **standardized** sample mean approaches a **standard Normal**:
  \[
  \frac{\overline{X}-\mu}{\sigma/\sqrt{n}} \;\Rightarrow\; \mathcal{N}(0,1).
  \]

**Why this matters.**  
Even when the data are **not Normal**, sums/averages behave **approximately Normal** for moderate \(n\), enabling confidence intervals and hypothesis tests based on Normal quantiles. Heavy tails or strong dependence may **slow** convergence‚Äîalways check assumptions.

---

## 6) Modelling guidelines

- Pick a **simple** family first (Uniform, Exponential, Normal); check fit with plots/residuals.
- Ensure units and supports match the story (e.g., times \(\ge 0\)).
- Prefer models with interpretable parameters (e.g., Exponential rate \(\lambda\)).
- For skewed, positive data, try **Gamma/Log-Normal**; for symmetric unimodal, **Normal** may suffice.
- Use **transformations** (e.g., log) when variance scales with the mean.

---

## 7) Visual intuition

PDFs and CDFs connect by integration:

![pdf-cdf-schematic](./images/pdf-cdf-schematic-placeholder.png)

<small>Place images for this section under `src/tutorials/probability/continuous/images/` and reference them relatively as above.</small>

---

## 8) What‚Äôs next

We‚Äôll tour common continuous families:

- **Uniform(a,b):** equal density on an interval.  
- **Exponential(Œª):** waiting times with memorylessness.  
- **Gamma(k,Œ∏):** sums of exponentials; flexible positive-support models.  
- **Normal(Œº,œÉ¬≤):** the CLT‚Äôs fixed point.  

Each page includes examples, tips, an ‚ÄúOn This Page‚Äù menu, flashcards, and a dedicated quiz.


================================================================================
üìÑ File: src\tutorials\probability\continuous\exponential.md
================================================================================

# Exponential Distribution

The **Exponential(Œª)** distribution (rate \(Œª>0\)) models **waiting times** with a **constant hazard**. It is the continuous analogue of the **Geometric** distribution and is the inter-arrival time in a **Poisson process**.

> üí° **Key idea**  
> Exponential is **memoryless**: \(P(X>s+t\mid X>s)=P(X>t)\). Past waiting does not change the remaining wait.

---

## 1) Definition, pdf / cdf / survival / hazard

For \(X \sim \mathrm{Exp}(Œª)\) with support \([0,\infty)\):

- **pdf:** \(f(x)=Œª e^{-Œªx}\) for \(x\ge 0\), else \(0\)  
- **cdf:** \(F(x)=P(X\le x)=1-e^{-Œªx}\) for \(x\ge 0\), else \(0\)  
- **survival:** \(S(x)=P(X>x)=e^{-Œªx}\)  
- **hazard:** \(h(x)=\dfrac{f(x)}{S(x)}=Œª\) (constant)

> ‚ö†Ô∏è **Parameterisation alert**  
> Some texts use **scale** \(Œ∏=1/Œª\) and write \(X\sim\mathrm{Exp}(Œ∏)\) with pdf \(f(x)=\frac{1}{Œ∏}e^{-x/Œ∏}\). We use the **rate** form \(Œª\).

---

## 2) Moments & transforms

- **Mean:** \(\mathbb{E}[X]=\dfrac{1}{Œª}\)  
- **Variance:** \(\mathrm{Var}(X)=\dfrac{1}{Œª^2}\)  
- **MGF:** \(M_X(t)=\dfrac{Œª}{Œª-t}\) for \(t<Œª\)  
- **Quantile (p-th):** \(x_p=F^{-1}(p)=-\dfrac{1}{Œª}\ln(1-p)\)  
- **Median:** \(x_{0.5}=\dfrac{\ln 2}{Œª}\)

**Memoryless property.** For \(s,t\ge 0\),
\[
P(X>s+t\mid X>s)=\frac{S(s+t)}{S(s)}=\frac{e^{-Œª(s+t)}}{e^{-Œªs}}=e^{-Œªt}=P(X>t).
\]

---

## 3) When Exponential fits

- **Poisson arrivals:** time between events when counts follow **Poisson(Œªt)** over length \(t\).  
- **Reliability with constant hazard:** electronic components in the ‚Äúuseful life‚Äù phase (no wear-in/out).  
- **Service/queue times:** when waiting time variability is well-approximated by a single-parameter positive model.

> üí° **Model check**  
> If hazard increases or decreases with \(x\), Exponential may be inappropriate‚Äîconsider **Weibull** (increasing/decreasing hazard) or **Gamma**.

---

## 4) Connections

- **Poisson process:** inter-arrivals i.i.d. Exponential(Œª); \(N(t)\sim \mathrm{Pois}(Œªt)\).  
- **Min of exponentials:** if \(X_i\sim\mathrm{Exp}(Œª_i)\) independent, then \(\min_i X_i \sim \mathrm{Exp}\!\big(\sum_i Œª_i\big)\).  
- **Argmin selection:** \(P(\arg\min X_i = j)=\dfrac{Œª_j}{\sum_i Œª_i}\).  
- **Sum to Gamma:** If \(X_1,\dots,X_k\stackrel{iid}{\sim} \mathrm{Exp}(Œª)\), then \(\sum_i X_i \sim \mathrm{Gamma}(k, Œª)\) (rate form).

---

## 5) Quick identities & checks

- \(P(X>c)=e^{-Œªc}\)  
- \(P(c\le X\le d)=e^{-Œªc}-e^{-Œªd}\) for \(0\le c\le d\)  
- Scaling: if \(Y=aX\) with \(a>0\) and \(X\sim\mathrm{Exp}(Œª)\), then \(Y\sim\mathrm{Exp}(Œª/a)\).

---

## 6) Micro-example

Let \(Œª=1.5\) (events per hour).

- \(E[X]=1/1.5=0.6667\) hours  
- \(P(X>1)=e^{-1.5}\approx 0.2231\)  
- \(P(0.5\le X\le 2)=e^{-1.5\cdot 0.5}-e^{-1.5\cdot 2}\approx 0.4724-0.0498\approx 0.4226\)

Try these in the interactive panel on this page.

---

## 7) Visual intuition

An exponentially decaying pdf from \(x=0\); the cdf climbs quickly at small \(x\) and flattens:

![exp-shapes](./images/exp-shapes-placeholder.png)

<small>Place images for this page under `src/tutorials/probability/continuous/images/` and reference them relatively.</small>


================================================================================
üìÑ File: src\tutorials\probability\continuous\gamma.md
================================================================================

# Gamma Distribution

The **Gamma(k, Œª)** distribution (shape \(k>0\), **rate** \(Œª>0\)) models **positive** waiting times and is a flexible generalisation of the Exponential. We use the **rate** form on this page; the **scale** form is \(\mathrm{Gamma}(k, Œ∏)\) with \(Œ∏=1/Œª\).

> üí° **Key idea**  
> If arrivals follow a Poisson process with rate \(Œª\), the waiting time to the **\(k\)-th event** is \( \mathrm{Gamma}(k, Œª) \).

---

## 1) Definition & pdf

For \(X \sim \mathrm{Gamma}(k, Œª)\) (rate form), support \([0,\infty)\),
\[
f(x) = \frac{Œª^k}{\Gamma(k)}\, x^{k-1} e^{-Œª x}, \qquad x \ge 0.
\]

- **Mean / Variance:** \( \mathbb{E}[X]=\dfrac{k}{Œª}, \ \mathrm{Var}(X)=\dfrac{k}{Œª^2}\)  
- **MGF:** \( M_X(t)=\left(\dfrac{Œª}{Œª-t}\right)^k, \ t<Œª \)  
- **cdf:** \( F(x)=P(k, Œªx) \), the **regularised lower incomplete gamma**.

> ‚ö†Ô∏è **Parametrisation alert**  
> Some sources use \( \mathrm{Gamma}(k, Œ∏) \) with **scale** \(Œ∏\). Convert via \( Œ∏=1/Œª \). Then \( f(x)=x^{k-1}e^{-x/Œ∏}/(\Gamma(k)\,Œ∏^k) \), \( \mathbb{E}[X]=kŒ∏ \), \( \mathrm{Var}(X)=kŒ∏^2 \).

---

## 2) Connections

- **Exponential:** \(k=1 \Rightarrow X \sim \mathrm{Exp}(Œª)\).  
- **Sum of exponentials:** If \(E_i \stackrel{iid}{\sim} \mathrm{Exp}(Œª)\), then \(\sum_{i=1}^{k} E_i \sim \mathrm{Gamma}(k,Œª)\) for integer \(k\).  
- **Poisson process:** \(T_k\), the time to the \(k\)-th arrival, is \(\mathrm{Gamma}(k,Œª)\). Equivalently, \( P(T_k\le x)=1-\sum_{n=0}^{k-1} e^{-Œªx} (Œªx)^n/n! \).  
- **Chi-square:** \( \chi^2_\nu \sim \mathrm{Gamma}\big(k=\nu/2,\ Œ∏=2\big) \) (scale form) ‚áî \( \mathrm{Gamma}\big(k=\nu/2,\ Œª=1/2\big) \) (rate form).

---

## 3) Shapes & hazard

- For \(k<1\), the pdf is decreasing and the **hazard** \(h(x)=f(x)/S(x)\) is **decreasing**.  
- For \(k=1\), hazard is **constant** (Exponential).  
- For \(k>1\), the pdf is unimodal and hazard is **increasing** (IFR).

Gamma thus adapts from heavy right-skew to near-symmetric as \(k\) grows.

---

## 4) When Gamma fits

Use Gamma for **positive**, right-skewed quantities:

- **Response/repair/service times** with more-than-exponential variability.  
- **Reliability** with monotone (up/down) hazard.  
- **Aggregated waiting**: time to complete \(k\) independent exponential phases.

> üí° **Model check**  
> Inspect skew and hazard shape; if hazard is non-monotone, consider **Weibull** or **log-normal**.

---

## 5) Useful identities

- **Scaling:** If \(X\sim\mathrm{Gamma}(k,Œª)\) and \(Y=aX\) with \(a>0\), then \(Y\sim\mathrm{Gamma}(k, Œª/a)\).  
- **Additivity (common Œª):** independent \(X_i \sim \mathrm{Gamma}(k_i, Œª)\) ‚áí \(\sum X_i \sim \mathrm{Gamma}(\sum k_i, Œª)\).  
- **Mode (k>1):** \((k-1)/Œª\).  
- **Median:** no closed form; use numerical solve of \(F(m)=0.5\).

---

## 6) Micro-example

Let \(k=3\), \(Œª=2\) (rate per hour).

- \(E[X]=3/2=1.5\) hours, \(\mathrm{Var}(X)=3/4=0.75\).  
- \(P(X\le 1)=F(1)=P(3, 2\cdot 1)=1 - e^{-2}\big(1 + 2 + 2^2/2!\big)\approx 1 - e^{-2}(1+2+2)=1 - 5e^{-2}\).  
- Mode \(=(k-1)/Œª=1\) hour.

Try these in the interactive panel.

---

## 7) Bayesian note (optional)

As a prior for a **rate** (Poisson or Exponential models), \( \mathrm{Gamma}(Œ±, Œ≤) \) (shape-rate) is **conjugate**:
- **Poisson(y | Œª)** with exposure \(t\): posterior \( \mathrm{Gamma}(Œ± + y, Œ≤ + t) \).
- **Exponential(x_i | Œª)** data: posterior \( \mathrm{Gamma}\!\left(Œ± + n,\; Œ≤ + \sum x_i\right) \).

---

## 8) Visual intuition

Gamma pdfs for varying \(k\) and common \(Œª\):

![gamma-shapes](./images/gamma-shapes-placeholder.png)

<small>Place images for this page under `src/tutorials/probability/continuous/images/` and reference them relatively.</small>


================================================================================
üìÑ File: src\tutorials\probability\continuous\normal.md
================================================================================

# Normal (Gaussian) Distribution

The **Normal(Œº, œÉ¬≤)** distribution is the bell-shaped model that often appears as a **limit** for sums/averages (via the **CLT**) and as a convenient model for **symmetric, unimodal** data.

> üí° **Key idea**  
> Standardize by the **z-score** \(z=(x-Œº)/œÉ\). Probabilities and quantiles reduce to the **standard Normal** cdf \(Œ¶\) and pdf \(œÜ\).

---

## 1) Definition, pdf & cdf

If \(X \sim \mathcal{N}(Œº, œÉ^2)\) with \(œÉ>0\), then

- **pdf**
  \[
  f(x) = \frac{1}{œÉ\sqrt{2\pi}}\exp\!\left(-\frac{(x-Œº)^2}{2œÉ^2}\right).
  \]

- **cdf**
  \[
  F(x)=P(X\le x)=Œ¶\!\left(\frac{x-Œº}{œÉ}\right), \quad
  Œ¶(z) = \int_{-\infty}^{z} \frac{1}{\sqrt{2\pi}}e^{-t^2/2}\,dt.
  \]

- **Mean / Variance:** \( \mathbb{E}[X]=Œº, \ \mathrm{Var}(X)=œÉ^2 \)

---

## 2) z-scores & the 68‚Äì95‚Äì99.7 rule

For \(Z\sim \mathcal{N}(0,1)\), \(P(|Z|\le 1)\approx 0.6827\), \(P(|Z|\le 2)\approx 0.9545\), \(P(|Z|\le 3)\approx 0.9973\).

> **Common tasks**
> - \(P(X\le x)=Œ¶\!\big((x-Œº)/œÉ\big)\)  
> - \(P(a\le X\le b)=Œ¶\!\big((b-Œº)/œÉ\big) - Œ¶\!\big((a-Œº)/œÉ\big)\)

---

## 3) Symmetry & tails

- \(œÜ(z)=œÜ(-z)\), \(Œ¶(-z)=1-Œ¶(z)\).  
- Right-tail: \(P(Z>z)=1-Œ¶(z)\).  
- For large \(z>0\), the **Mills ratio** \(P(Z>z)\approx \dfrac{œÜ(z)}{z}\) gives a quick bound.

---

## 4) Closure properties

- **Linear transforms:** \(aX+b \sim \mathcal{N}(aŒº+b, a^2 œÉ^2)\).  
- **Sums:** If \(X_i \stackrel{ind}{\sim} \mathcal{N}(Œº_i, œÉ_i^2)\), then \(\sum X_i \sim \mathcal{N}(\sum Œº_i, \sum œÉ_i^2)\).  
- **Conditional/marginal (multivariate):** subsets and conditionals of a **multivariate Normal** are Normal (with updated means/covariances).

---

## 5) When Normal fits

Appropriate for **symmetric** data with light tails; for sample **averages**; and as a working approximation by the **CLT**.

> ‚ö†Ô∏è **Cautions**  
> Heavy tails/outliers violate Normal assumptions; consider **t**, **Laplace**, or robust approaches.

---

## 6) Micro-examples

- If \(X\sim \mathcal{N}(10, 2^2)\), then \(P(X\le 12)=Œ¶\!\big((12-10)/2\big)=Œ¶(1)=0.8413\).  
- If \(Z\sim \mathcal{N}(0,1)\), then \(P(|Z|\le 2)=Œ¶(2)-Œ¶(-2)\approx 0.9545\).

Try similar calculations with the interactive controls on this page.

---

## 7) Visual intuition

Smooth bell-shaped pdf centered at \(Œº\); the cdf is sigmoid-like and approaches 0/1 in the tails:

![normal-shape](./images/normal-shape-placeholder.png)

<small>Place images for this page under `src/tutorials/probability/continuous/images/`.</small>

---

## 8) Connections

- **CLT:** Sample means normalize to **Z ~ N(0,1)** under mild conditions.  
- **Quadratics:** If \(Z\sim N(0,1)\), then \(Z^2\sim œá^2_1\); sums of squares lead to **œá¬≤** and **t** families.  
- **Standardization:** Any Normal reduces to standard Normal via \(Z=(X-Œº)/œÉ\).


================================================================================
üìÑ File: src\tutorials\probability\continuous\uniform.md
================================================================================

# Uniform Distribution

The **Uniform(a,b)** distribution has a **constant density** on the interval \([a,b]\) with \(a<b\). It is the simplest continuous model and is fundamental to **simulation** via \(U(0,1)\).

> üí° **Key idea**  
> On \([a,b]\), every sub-interval of the same length has the **same probability mass**.

---

## 1) Definition, pdf & cdf

For \(X \sim \mathrm{Uniform}(a,b)\) with \(a<b\):

- **pdf**
  \[
  f(x)=
  \begin{cases}
  \dfrac{1}{b-a}, & a \le x \le b,\\[4pt]
  0, & \text{otherwise}.
  \end{cases}
  \]

- **cdf**
  \[
  F(x)=
  \begin{cases}
  0, & x < a,\\
  \dfrac{x-a}{b-a}, & a \le x \le b,\\
  1, & x > b.
  \end{cases}
  \]

- **Support:** \([a,b]\)  
- **Quantile:** \(F^{-1}(u)=a+(b-a)u\) for \(u\in[0,1]\)

> ‚ö†Ô∏è **Endpoints**  
> The density is defined on the **closed** interval \([a,b]\). Since points have zero measure, any choice of open/closed at endpoints yields the same probabilities.

---

## 2) Moments & quick identities

- **Mean:** \(\mathbb{E}[X]=\dfrac{a+b}{2}\)
- **Variance:** \(\mathrm{Var}(X)=\dfrac{(b-a)^2}{12}\)
- **Symmetry:** \(X-(a+b)/2\) is symmetric around 0.
- **Scaling:** If \(U\sim \mathrm{U}(0,1)\) then \(X=a+(b-a)U \sim \mathrm{U}(a,b)\).

**Interval probability** (for any \(c\le d\)):
\[
P(c\le X\le d)=\frac{\max(0,\ \min(d,b)-\max(c,a))}{b-a}.
\]

---

## 3) When Uniform fits

Use Uniform when you explicitly **assume ignorance** within an interval (all sub-intervals equally likely) or when a **randomized offset** is appropriate:

- Start time within a given minute/second.
- Phase offsets, hash seeds, randomized delays.
- First-order approximations with no preferred sub-interval.

> üí° **Model check**  
> If data cluster or show trends within the interval, Uniform is likely **inappropriate**; consider triangular, beta, or empirical distributions.

---

## 4) Simulation via U(0,1)

Most RNGs produce \(U(0,1)\). Transform to \(\mathrm{U}(a,b)\) via:
\[
X = a+(b-a)U.
\]
This mapping preserves uniformity because \(F_X(x)=P(X\le x)=P\!\left(U\le\dfrac{x-a}{b-a}\right)\).

---

## 5) Order statistics (U(0,1))

If \(U_1,\dots,U_n \stackrel{iid}{\sim} \mathrm{U}(0,1)\):

- \(U_{(1)}=\min U_i\) has cdf \(1-(1-x)^n\), pdf \(n(1-x)^{n-1}\).
- \(U_{(n)}=\max U_i\) has cdf \(x^n\), pdf \(n x^{n-1}\).
- More generally, \(U_{(k)} \sim \mathrm{Beta}(k, n-k+1)\).

These facts are handy for thresholds and extremes.

---

## 6) Micro-example

Let \(X \sim \mathrm{U}(2,8)\).

- \(E[X]=(2+8)/2=5\)
- \(\mathrm{Var}(X)=(6)^2/12=3\)
- \(P(3\le X\le 5)=\dfrac{5-3}{8-2}=\dfrac{2}{6}=\dfrac{1}{3}\)

Try these in the interactive panel on the page.

---

## 7) Visual intuition

A flat pdf on \([a,b]\), linearly increasing cdf:

![uniform-shapes](./images/uniform-shapes-placeholder.png)

<small>Place images for this page under `src/tutorials/probability/continuous/images/` and reference them relatively.</small>


================================================================================
üìÑ File: src\tutorials\probability\discrete\Bernoulli.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * Bernoulli.jsx ‚Äî lesson page
 *
 * - Loads ./bernoulli.md (co-located) with Vite ?raw
 * - Builds sticky "On This Page" TOC from rendered headings
 * - Includes a lightweight interactive Bernoulli panel (mean/var/pmf)
 * - Flashcards at bottom, Quiz CTA, and Prev/Next navigation
 * - No progress/memory features
 */

export default function Bernoulli() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown content
  useEffect(() => {
    let mounted = true;
    import("./bernoulli.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load bernoulli.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build TOC from rendered headings (ids are assigned by RichMarkdown)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth-scroll for TOC links
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  // Flashcards for Bernoulli
  const flashcards = useMemo(
    () => [
      { front: "Support of Bernoulli", back: "X ‚àà {0,1}" },
      { front: "pmf", back: "P(X=1)=p, P(X=0)=1‚àíp" },
      { front: "Mean", back: "E[X]=p" },
      { front: "Variance", back: "Var(X)=p(1‚àíp)" },
      { front: "Indicator view", back: "X=1_A ‚áí E[X]=P(A)=p" },
      { front: "MGF (bonus)", back: "M_X(t)= (1‚àíp) + p e^t" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Bernoulli Distribution
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            The simplest building block: a single success/failure trial with success probability <em>p</em>.
            Understand the pmf, mean, variance, and how Bernoulli underpins Binomial and many indicator arguments.
          </p>
        </div>

        {/* 2-column responsive layout: content + sticky TOC (desktop) */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            {/* Markdown lesson */}
            <RichMarkdown content={md} />

            {/* Lightweight interactive panel */}
            <section aria-labelledby="bernoulli-panel" className="space-y-4">
              <h2 id="bernoulli-panel" className="text-xl font-bold text-slate-900">
                Interactive: Explore Bernoulli(p)
              </h2>
              <BernoulliPanel />
            </section>
          </article>

          {/* On This Page */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/foundations"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Foundations
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete/binomial"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Binomial ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/bernoulli/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Bernoulli Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ------------------------- Small Interactive Panel ------------------------ */
function BernoulliPanel() {
  const [p, setP] = useState(0.25);

  const pmf0 = useMemo(() => 1 - p, [p]);
  const pmf1 = useMemo(() => p, [p]);
  const mean = useMemo(() => p, [p]);
  const variance = useMemo(() => p * (1 - p), [p]);

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
        <label className="block text-sm font-medium text-slate-700">
          Success probability p
          <input
            type="range"
            min="0"
            max="1"
            step="0.01"
            value={p}
            onChange={(e) => setP(Number(e.target.value))}
            className="mt-2 w-full"
          />
          <div className="mt-1 text-slate-800 tabular-nums">p = {p.toFixed(2)}</div>
        </label>

        <div className="grid grid-cols-2 gap-3 text-sm">
          <div className="rounded-lg border border-slate-200 p-3">
            <div className="text-slate-500">P(X=0)</div>
            <div className="text-slate-900 font-semibold">{pmf0.toFixed(4)}</div>
          </div>
          <div className="rounded-lg border border-slate-200 p-3">
            <div className="text-slate-500">P(X=1)</div>
            <div className="text-slate-900 font-semibold">{pmf1.toFixed(4)}</div>
          </div>
          <div className="rounded-lg border border-slate-200 p-3">
            <div className="text-slate-500">E[X]</div>
            <div className="text-slate-900 font-semibold">{mean.toFixed(4)}</div>
          </div>
          <div className="rounded-lg border border-slate-200 p-3">
            <div className="text-slate-500">Var(X)</div>
            <div className="text-slate-900 font-semibold">{variance.toFixed(4)}</div>
          </div>
        </div>
      </div>

      <p className="mt-4 text-sm text-slate-700">
        Recall: for Bernoulli(p), the pmf is P(X=1)=p and P(X=0)=1‚àíp, with mean p and variance p(1‚àíp).
      </p>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\discrete\BernoulliQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * BernoulliQuiz.jsx ‚Äî dedicated MCQ quiz page for Bernoulli
 *
 * Uses QuizMCQ with multiple questions, rationales, and a simple layout.
 * Keep this page focused; no persistence or progress.
 */

const questions = [
  {
    question: "For X ~ Bernoulli(p), which is TRUE?",
    options: ["Support is {‚àí1,1}", "E[X]=p and Var(X)=p(1‚àíp)", "P(X=1)=1‚àíp", "Var(X)=p"],
    correctIndex: 1,
    rationale: "Bernoulli has support {0,1}; mean p; variance p(1‚àíp).",
  },
  {
    question: "Which is the pmf for X ~ Bernoulli(p)?",
    options: [
      "p(x)=p^x(1‚àíp)^{1‚àíx}, x‚àà{0,1}",
      "p(x)=p for all integers x",
      "p(x)=1/2 for x‚àà{0,1}",
      "p(x)=p^(1‚àíx)(1‚àíp)^x, x‚àà{0,1}",
    ],
    correctIndex: 0,
    rationale: "By definition: P(X=1)=p, P(X=0)=1‚àíp ‚áí p^x(1‚àíp)^{1‚àíx}.",
  },
  {
    question: "If X=1_A (indicator of event A), what is E[X]?",
    options: ["0", "1", "P(A)", "Cannot be determined"],
    correctIndex: 2,
    rationale: "Indicator expectation equals the probability of its event.",
  },
  {
    question: "Which statement is FALSE for Bernoulli(p)?",
    options: [
      "X^2=X almost surely",
      "Var(X)=p(1‚àíp)",
      "P(X=1)=p^2",
      "E[X]=p",
    ],
    correctIndex: 2,
    rationale: "P(X=1)=p, not p^2.",
  },
  {
    question: "Which construction leads from Bernoulli to Binomial?",
    options: [
      "Product of n Bernoulli(p)",
      "Sum of n i.i.d. Bernoulli(p)",
      "Maximum of n Bernoulli(p)",
      "Difference of two Bernoulli(p)",
    ],
    correctIndex: 1,
    rationale: "Summing n i.i.d. Bernoulli(p) yields Binomial(n,p).",
  },
];

export default function BernoulliQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Bernoulli
          </h1>
          <p className="mt-2 text-slate-700">
            Test your understanding before moving on to Binomial.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:bernoulli" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/bernoulli"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/binomial"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Continue to Binomial ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\discrete\Binomial.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * Binomial.jsx ‚Äî lesson page
 *
 * - Loads ./binomial.md (co-located) via Vite ?raw
 * - Builds sticky "On This Page" TOC by reading rendered headings (ids by RichMarkdown)
 * - Includes a compact BinomialPanel for pmf/cdf & quick approximations
 * - Flashcards, Quiz CTA, and Prev/Next navigation
 * - No progress/memory features (static-friendly)
 */

export default function Binomial() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown
  useEffect(() => {
    let mounted = true;
    import("./binomial.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load binomial.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build TOC from rendered headings
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  const flashcards = useMemo(
    () => [
      { front: "Support of Bin(n,p)", back: "k ‚àà {0,1,‚Ä¶,n}" },
      { front: "pmf", back: "P(X=k)=C(n,k)p^k(1‚àíp)^{n‚àík}" },
      { front: "Mean", back: "E[X]=np" },
      { front: "Variance", back: "Var(X)=np(1‚àíp)" },
      { front: "Normal approx (when?)", back: "np(1‚àíp) large; use continuity" },
      { front: "Poisson approx (when?)", back: "n large, p small, Œª=np fixed" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Binomial Distribution
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Number of successes in <em>n</em> independent Bernoulli(<em>p</em>) trials.
            Learn the pmf, moments, and when Normal or Poisson approximations make sense.
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* Compact interactive panel */}
            <section aria-labelledby="binomial-panel" className="space-y-4">
              <h2 id="binomial-panel" className="text-xl font-bold text-slate-900">
                Interactive: Explore Binomial(n,p)
              </h2>
              <BinomialPanel />
            </section>
          </article>

          {/* On This Page (desktop sidebar) */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete/bernoulli"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Bernoulli
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete/geometric"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Geometric ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/binomial/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Binomial Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ------------------------- Small Interactive Panel ------------------------ */
/* Self-contained helpers (stable binomial + approximations) */
function BinomialPanel() {
  const [n, setN] = useState(10);
  const [p, setP] = useState(0.3);
  const [k, setK] = useState(3);

  // Guard inputs
  useEffect(() => { if (k > n) setK(n); if (k < 0) setK(0); }, [n]);
  useEffect(() => { if (p < 0) setP(0); if (p > 1) setP(1); }, [p]);

  const mean = useMemo(() => n * p, [n, p]);
  const variance = useMemo(() => n * p * (1 - p), [n, p]);

  // Numerically stable log(n choose k)
  const logChoose = useMemo(() => {
    const MAX = Math.max(10000, n + 10);
    const LOGFACT = new Float64Array(Math.max(MAX + 1, 2));
    LOGFACT[0] = 0;
    for (let i = 1; i <= MAX; i++) LOGFACT[i] = LOGFACT[i - 1] + Math.log(i);
    const stirling = (m) => (m <= MAX ? LOGFACT[m] : m * Math.log(m) - m + 0.5 * Math.log(2 * Math.PI * m));
    return (nn, kk) => {
      if (kk < 0 || kk > nn) return -Infinity;
      return stirling(nn) - stirling(kk) - stirling(nn - kk);
    };
  }, [n]);

  const binomPMF = useMemo(() => {
    return (nn, pp, kk) => {
      if (kk < 0 || kk > nn) return 0;
      if (pp === 0) return kk === 0 ? 1 : 0;
      if (pp === 1) return kk === nn ? 1 : 0;
      const logp = logChoose(nn, kk) + kk * Math.log(pp) + (nn - kk) * Math.log(1 - pp);
      return Math.exp(logp);
    };
  }, [logChoose]);

  const binomCDF_LE = useMemo(() => {
    return (nn, pp, kk) => {
      let s = 0;
      for (let i = 0; i <= Math.min(kk, nn); i++) s += binomPMF(nn, pp, i);
      return s;
    };
  }, [binomPMF]);

  // Normal approximation with continuity correction
  function stdNormCDF(x) {
    const a1 = 0.254829592, a2 = -0.284496736, a3 = 1.421413741, a4 = -1.453152027, a5 = 1.061405429, p = 0.3275911;
    const sign = x < 0 ? -1 : 1;
    const t = 1 / (1 + p * Math.abs(x));
    const y = 1 - (((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t) * Math.exp(-x * x);
    return 0.5 * (1 + sign * y);
  }
  function normalApproxPMF(nn, pp, kk) {
    const mu = nn * pp, sig = Math.sqrt(nn * pp * (1 - pp));
    if (!(sig > 0)) return kk === Math.round(mu) ? 1 : 0;
    // continuity: P(k-0.5 ‚â§ X ‚â§ k+0.5)
    const z1 = ((kk + 0.5) - mu) / sig;
    const z0 = ((kk - 0.5) - mu) / sig;
    return Math.max(0, stdNormCDF(z1) - stdNormCDF(z0));
  }

  // Poisson approximation (rare-events) with Œª=np
  function poissonPMF(lambda, kk) {
    if (kk < 0) return 0;
    let p0 = Math.exp(-lambda);
    if (kk === 0) return p0;
    let v = p0;
    for (let i = 1; i <= kk; i++) v *= lambda / i;
    return v;
  }

  const pmf = useMemo(() => binomPMF(n, p, k), [n, p, k, binomPMF]);
  const cdf = useMemo(() => binomCDF_LE(n, p, k), [n, p, k, binomCDF_LE]);
  const pmfNormal = useMemo(() => normalApproxPMF(n, p, k), [n, p, k]);
  const pmfPoisson = useMemo(() => poissonPMF(n * p, k), [n, p, k]);

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-3">
        <label className="block text-sm font-medium text-slate-700">
          Number of trials n
          <input
            type="number"
            min={1}
            max={1000}
            value={n}
            onChange={(e) => setN(Math.max(1, Math.min(1000, Number(e.target.value) || 0)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          Success probability p
          <input
            type="range"
            min="0"
            max="1"
            step="0.01"
            value={p}
            onChange={(e) => setP(Number(e.target.value))}
            className="mt-2 w-full"
          />
          <div className="mt-1 text-slate-800 tabular-nums">p = {p.toFixed(2)}</div>
        </label>

        <label className="block text-sm font-medium text-slate-700">
          Target count k
          <input
            type="number"
            min={0}
            max={n}
            value={k}
            onChange={(e) => setK(Math.max(0, Math.min(n, Number(e.target.value) || 0)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>
      </div>

      <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-4 text-sm">
        <Metric label="E[X]" value={mean.toFixed(4)} />
        <Metric label="Var(X)" value={variance.toFixed(4)} />
        <Metric label="P(X=k)" value={pmf.toPrecision(4)} />
        <Metric label="P(X‚â§k)" value={cdf.toPrecision(4)} />
        <Metric label="Normal approx P(X=k)" value={pmfNormal.toPrecision(4)} hint="with continuity" />
        <Metric label="Poisson approx P(X=k)" value={pmfPoisson.toPrecision(4)} hint="Œª=np" />
      </div>

      <p className="mt-3 text-sm text-slate-700">
        Approximations are sensible when their conditions hold (see the section below). Use the exact pmf for precise answers.
      </p>
    </div>
  );
}

function Metric({ label, value, hint }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">{label}{hint ? <span className="text-slate-400"> ({hint})</span> : null}</div>
      <div className="text-slate-900 font-semibold tabular-nums">{value}</div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\discrete\BinomialQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * BinomialQuiz.jsx ‚Äî dedicated quiz page
 * Focused MCQs with rationales. No persistence beyond optional local shuffle/ordering in QuizMCQ.
 */

const questions = [
  {
    question: "X ~ Binomial(n,p). Which set of assumptions defines this model?",
    options: [
      "Independent trials, identical success probability p, fixed n",
      "Dependent trials, varying p, fixed n",
      "Independent trials, identical p, random n",
      "Trials with three outcomes, fixed n",
    ],
    correctIndex: 0,
    rationale: "Binomial assumes i.i.d. Bernoulli(p) trials with a fixed number n.",
  },
  {
    question: "For X ~ Binomial(n=10, p=0.3), what is P(X=0)?",
    options: ["(0.7)^10", "(0.3)^10", "10¬∑0.3¬∑(0.7)^9", "1‚àí(0.7)^10"],
    correctIndex: 0,
    rationale: "P(X=0)=C(10,0)¬∑(0.3)^0¬∑(0.7)^10=(0.7)^{10}.",
  },
  {
    question: "Which statements are TRUE for X ~ Binomial(n,p)?",
    options: [
      "E[X]=np and Var(X)=np(1‚àíp)",
      "E[X]=p and Var(X)=p(1‚àíp)",
      "E[X]=np and Var(X)=n^2 p",
      "E[X]=n and Var(X)=p",
    ],
    correctIndex: 0,
    rationale: "Classic moments: mean np, variance np(1‚àíp).",
  },
  {
    question: "When is the Normal approximation to Binomial most appropriate?",
    options: [
      "When np(1‚àíp) is large; use continuity correction",
      "When p is extremely small and n is small",
      "When n=1 (Bernoulli)",
      "Always, for any n and p",
    ],
    correctIndex: 0,
    rationale: "A common rule is np(1‚àíp) ‚â• 10‚Äì20; continuity correction improves accuracy.",
  },
  {
    question: "For rare events (n large, p small, Œª=np fixed), which approximation applies?",
    options: [
      "Cauchy with scale Œª",
      "Poisson(Œª)",
      "Exponential(Œª)",
      "Uniform(0,n)",
    ],
    correctIndex: 1,
    rationale: "Binomial ‚âà Poisson when n‚Üí‚àû, p‚Üí0 with Œª=np.",
  },
  {
    question: "If X ~ Binomial(20, 0.5), which is closest to P(X=10)? (Use symmetry/Normal intuition.)",
    options: [
      "About 0.25",
      "About 0.18",
      "About 0.07",
      "About 0.50",
    ],
    correctIndex: 1,
    rationale:
      "At the center for n=20, p=0.5, the pmf peak near k=10 is ~0.176 (Normal approx with continuity gives ‚âà0.176).",
  },
  {
    question: "Which statement is FALSE?",
    options: [
      "P(X=n)=p^n",
      "P(X=0)=(1‚àíp)^n",
      "X is defined on {0,1,‚Ä¶,n}",
      "Var(X)=np",
    ],
    correctIndex: 3,
    rationale: "Var(X)=np(1‚àíp), not np.",
  },
];

export default function BinomialQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Binomial
          </h1>
          <p className="mt-2 text-slate-700">
            Check your understanding of the Binomial model and its approximations.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:binomial" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/binomial"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/geometric"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Continue to Geometric ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\discrete\Geometric.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * Geometric.jsx ‚Äî lesson page
 *
 * Conventions in this chapter:
 * - We use the "trials until first success" parameterisation with support {1,2,...}
 * - pmf: P(X=k) = (1-p)^{k-1} p, k=1,2,...
 * - cdf: P(X‚â§k) = 1 - (1-p)^k
 * - memoryless: P(X>m+n | X>m) = P(X>n)
 */

export default function Geometric() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown content
  useEffect(() => {
    let mounted = true;
    import("./geometric.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load geometric.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build TOC from rendered headings (ids set by RichMarkdown)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth-scroll TOC links
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  const flashcards = useMemo(
    () => [
      { front: "Support", back: "X ‚àà {1,2,‚Ä¶} (trials until first success)" },
      { front: "pmf", back: "P(X=k)=(1‚àíp)^{k‚àí1} p" },
      { front: "cdf", back: "P(X‚â§k)=1‚àí(1‚àíp)^k" },
      { front: "Tail", back: "P(X>k)=(1‚àíp)^k" },
      { front: "Mean", back: "E[X]=1/p" },
      { front: "Variance", back: "Var(X)=(1‚àíp)/p^2" },
      { front: "Memoryless", back: "P(X>m+n | X>m)=P(X>n)" },
      { front: "NegBin link", back: "Geometric is NegBin(r=1)" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Geometric Distribution
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Trials until the <em>first</em> success, with success probability <em>p</em> each trial. Learn the pmf, cdf,
            moments, and the hallmark <strong>memoryless</strong> property.
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* Interactive panel */}
            <section aria-labelledby="geometric-panel" className="space-y-4">
              <h2 id="geometric-panel" className="text-xl font-bold text-slate-900">
                Interactive: Explore Geometric(p)
              </h2>
              <GeometricPanel />
            </section>
          </article>

          {/* On This Page */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete/binomial"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Binomial
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete/negative-binomial"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Negative Binomial ‚Üí
            </Link>
          </div>

        <Link
          to="/tutorials/introduction-to-probability-distribution/discrete/geometric/quiz"
          className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
        >
          Start Geometric Quiz
        </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ------------------------- Interactive Geometric Panel ------------------------ */
function GeometricPanel() {
  const [p, setP] = useState(0.3);
  const [k, setK] = useState(4);
  const [m, setM] = useState(2);
  const [n, setN] = useState(3);

  useEffect(() => { if (k < 1) setK(1); }, [k]);

  const pmf = useMemo(() => (k >= 1 ? Math.pow(1 - p, k - 1) * p : 0), [p, k]);
  const cdf = useMemo(() => (k >= 1 ? 1 - Math.pow(1 - p, k) : 0), [p, k]);
  const tail = useMemo(() => (k >= 0 ? Math.pow(1 - p, k) : 1), [p, k]); // P(X>k)
  const mean = useMemo(() => (p > 0 ? 1 / p : Infinity), [p]);
  const variance = useMemo(() => (p > 0 ? (1 - p) / (p * p) : Infinity), [p]);

  // Memoryless check: P(X>m+n | X>m) vs P(X>n)
  const tail_m = useMemo(() => Math.pow(1 - p, Math.max(0, m)), [p, m]);
  const tail_mn = useMemo(() => Math.pow(1 - p, Math.max(0, m + n)), [p, m, n]);
  const cond = useMemo(() => (tail_m > 0 ? tail_mn / tail_m : 0), [tail_m, tail_mn]);
  const tail_n = useMemo(() => Math.pow(1 - p, Math.max(0, n)), [p, n]);
  const delta = useMemo(() => Math.abs(cond - tail_n), [cond, tail_n]);

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-4">
        <label className="block text-sm font-medium text-slate-700 md:col-span-2">
          Success probability p
          <input
            type="range"
            min="0"
            max="1"
            step="0.01"
            value={p}
            onChange={(e) => setP(Number(e.target.value))}
            className="mt-2 w-full"
          />
          <div className="mt-1 text-slate-800 tabular-nums">p = {p.toFixed(2)}</div>
        </label>

        <label className="block text-sm font-medium text-slate-700">
          Target k (P(X=k), P(X‚â§k))
          <input
            type="number"
            min={1}
            value={k}
            onChange={(e) => setK(Math.max(1, Number(e.target.value) || 1))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <div className="grid grid-cols-2 gap-3">
          <label className="block text-xs font-medium text-slate-700">
            m (memoryless)
            <input
              type="number"
              min={0}
              value={m}
              onChange={(e) => setM(Math.max(0, Number(e.target.value) || 0))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
          <label className="block text-xs font-medium text-slate-700">
            n (memoryless)
            <input
              type="number"
              min={0}
              value={n}
              onChange={(e) => setN(Math.max(0, Number(e.target.value) || 0))}
              className="mt-1 w-full rounded-md border border-slate-300 px-2 py-1"
            />
          </label>
        </div>
      </div>

      <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-6 text-sm">
        <Metric label="E[X]" value={Number.isFinite(mean) ? mean.toFixed(4) : "‚àû"} />
        <Metric label="Var(X)" value={Number.isFinite(variance) ? variance.toFixed(4) : "‚àû"} />
        <Metric label="P(X=k)" value={pmf.toPrecision(4)} />
        <Metric label="P(X‚â§k)" value={cdf.toPrecision(4)} />
        <Metric label="P(X>k)" value={tail.toPrecision(4)} />
        <Metric label="Memoryless Œî" value={delta.toExponential(2)} hint="|P(X>m+n|X>m)‚àíP(X>n)|" />
      </div>

      <p className="mt-3 text-sm text-slate-700">
        With support starting at 1, the mean is 1/p and the variance is (1‚àíp)/p¬≤. The **memoryless** identity makes
        Geometric unique among discrete distributions.
      </p>
    </div>
  );
}

function Metric({ label, value, hint }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">
        {label}
        {hint ? <span className="text-slate-400"> ({hint})</span> : null}
      </div>
      <div className="text-slate-900 font-semibold tabular-nums">{value}</div>
    </div>
  );
}

================================================================================
üìÑ File: src\tutorials\probability\discrete\GeometricQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * GeometricQuiz.jsx ‚Äî dedicated quiz page for Geometric
 * Conventions: X is the number of trials until the first success (support {1,2,...})
 */

const questions = [
  {
    question: "For X ~ Geometric(p) with support {1,2,‚Ä¶}, which pmf is correct?",
    options: [
      "P(X=k)=(1‚àíp)^k p, k=0,1,2,‚Ä¶",
      "P(X=k)=(1‚àíp)^{k‚àí1} p, k=1,2,‚Ä¶",
      "P(X=k)=p^k (1‚àíp), k=1,2,‚Ä¶",
      "P(X=k)=p, for any integer k",
    ],
    correctIndex: 1,
    rationale: "Trials-until-first-success: P(X=k)=(1‚àíp)^{k‚àí1}p on {1,2,‚Ä¶}.",
  },
  {
    question: "What is E[X] for X ~ Geometric(p) (support {1,2,‚Ä¶})?",
    options: ["p", "1‚àíp", "1/p", "(1‚àíp)/p^2"],
    correctIndex: 2,
    rationale: "Mean equals 1/p under this parameterisation.",
  },
  {
    question: "Which statement is TRUE about the memoryless property?",
    options: [
      "Only Exponential is memoryless; Geometric is not",
      "P(X>m+n | X>m) = P(X>m+n)",
      "P(X>m+n | X>m) = P(X>n)",
      "P(X>m+n | X>m) = P(X>m)P(X>n)",
    ],
    correctIndex: 2,
    rationale: "Geometric (discrete) and Exponential (continuous) are the canonical memoryless laws.",
  },
  {
    question: "For p=0.2 and X ~ Geometric(p), which is P(X>3)?",
    options: ["0.8^3", "0.2^3", "1‚àí0.8^3", "0.8^4 ¬∑ 0.2"],
    correctIndex: 0,
    rationale: "Tail for support {1,2,‚Ä¶} is (1‚àíp)^k, so (0.8)^3.",
  },
  {
    question: "Which variance is correct for X ~ Geometric(p) (support {1,2,‚Ä¶})?",
    options: ["p(1‚àíp)", "p/(1‚àíp)", "(1‚àíp)/p^2", "1/p^2"],
    correctIndex: 2,
    rationale: "Var(X)=(1‚àíp)/p^2 for the trials-until-first-success version.",
  },
  {
    question: "Link to Negative Binomial: which statement is correct?",
    options: [
      "Geometric is NegBin with r‚Üí‚àû",
      "Geometric is NegBin with r=1",
      "Geometric is the product of two Bernoulli variables",
      "Geometric is Binomial with n=1",
    ],
    correctIndex: 1,
    rationale: "NegBin(r,p) counts trials until r-th success; for r=1 it reduces to Geometric.",
  },
  {
    question: "Which statement is FALSE (under support {1,2,‚Ä¶})?",
    options: [
      "P(X=1)=p",
      "P(X=2)=(1‚àíp)p",
      "P(X=0)=1‚àíp",
      "P(X>k)=(1‚àíp)^k",
    ],
    correctIndex: 2,
    rationale: "Under this convention, support begins at 1, so P(X=0)=0.",
  },
];

export default function GeometricQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Geometric
          </h1>
          <p className="mt-2 text-slate-700">
            Confirm your understanding of waiting-time mechanics and the memoryless property.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:geometric" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/geometric"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/negative-binomial"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Continue to Negative Binomial ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\discrete\NegativeBinomial.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * NegativeBinomial.jsx ‚Äî lesson page
 *
 * Convention used here:
 * - X = number of TRIALS until the r-th success (a.k.a. Pascal), support {r, r+1, ...}
 * - pmf: P(X=k) = C(k-1, r-1) * p^r * (1-p)^(k-r), for k >= r
 * - mean r/p, variance r(1-p)/p^2
 */

export default function NegativeBinomial() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown content
  useEffect(() => {
    let mounted = true;
    import("./negative_binomial.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load negative_binomial.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build TOC from rendered headings
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth-scroll for TOC links
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  // Flashcards (essentials)
  const flashcards = useMemo(
    () => [
      { front: "Support", back: "X ‚àà {r, r+1, ‚Ä¶} (trials until r-th success)" },
      { front: "pmf", back: "P(X=k)=C(k‚àí1,r‚àí1) p^r (1‚àíp)^{k‚àír}" },
      { front: "Mean", back: "E[X]=r/p" },
      { front: "Variance", back: "Var(X)=r(1‚àíp)/p^2" },
      { front: "Geom link", back: "For r=1, Geometric(p)" },
      { front: "Sum of Geoms", back: "X ‚âç sum of r i.i.d. Geom(p)" },
      { front: "Alternative param.", back: "‚ÄòFailures until r-th success‚Äô ‚áí support {0,1,‚Ä¶}" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Negative Binomial (Pascal) Distribution
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Trials needed to achieve the <em>r</em>-th success with success probability <em>p</em> per trial:
            pmf, moments, modelling choices, and quick approximations.
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* Interactive panel */}
            <section aria-labelledby="negbin-panel" className="space-y-4">
              <h2 id="negbin-panel" className="text-xl font-bold text-slate-900">
                Interactive: Explore NegBin(r, p)
              </h2>
              <NegativeBinomialPanel />
            </section>
          </article>

          {/* On This Page */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete/geometric"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Geometric
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete/poisson"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Poisson ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/negative-binomial/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Negative Binomial Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ------------------------- Interactive Negative Binomial Panel ------------------------ */
function NegativeBinomialPanel() {
  const [r, setR] = useState(3);
  const [p, setP] = useState(0.4);
  const [k, setK] = useState(6); // trials (k >= r)

  // Keep inputs sensible
  useEffect(() => {
    if (r < 1) setR(1);
    if (k < r) setK(r);
  }, [r, k]);

  const mean = useMemo(() => (p > 0 ? r / p : Infinity), [r, p]);
  const variance = useMemo(() => (p > 0 ? (r * (1 - p)) / (p * p) : Infinity), [r, p]);

  // Light-weight log-factorial via split rule: small exact, large Stirling (OK for teaching use)
  const logFact = (m) => {
    if (m < 2) return 0;
    if (m <= 200) {
      let s = 0;
      for (let i = 2; i <= m; i++) s += Math.log(i);
      return s;
    }
    // Stirling w/ first correction terms
    return m * Math.log(m) - m + 0.5 * Math.log(2 * Math.PI * m) + 1 / (12 * m) - 1 / (360 * m ** 3);
  };
  const logChoose = (n, k) => {
    if (k < 0 || k > n) return -Infinity;
    return logFact(n) - logFact(k) - logFact(n - k);
  };

  const pmf = useMemo(() => {
    if (!(k >= r)) return 0;
    if (p === 0) return k === Infinity ? 1 : 0;
    if (p === 1) return k === r ? 1 : 0;
    const logp = logChoose(k - 1, r - 1) + r * Math.log(p) + (k - r) * Math.log(1 - p);
    return Math.exp(logp);
  }, [k, r, p]);

  const cdf = useMemo(() => {
    // Sum pmf from r to k (reasonable for k <= ~400; input UI should keep within bounds)
    let s = 0;
    const maxIter = Math.min(k, r + 400); // guard
    for (let t = r; t <= maxIter; t++) {
      const logp = logChoose(t - 1, r - 1) + r * Math.log(p) + (t - r) * Math.log(1 - p);
      s += Math.exp(logp);
    }
    return s;
  }, [k, r, p]);

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-4">
        <label className="block text-sm font-medium text-slate-700">
          r (successes target)
          <input
            type="number"
            min={1}
            max={20}
            value={r}
            onChange={(e) => setR(Math.max(1, Math.min(20, Number(e.target.value) || 1)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <label className="block text-sm font-medium text-slate-700">
          Success probability p
          <input
            type="range"
            min="0"
            max="1"
            step="0.01"
            value={p}
            onChange={(e) => setP(Number(e.target.value))}
            className="mt-2 w-full"
          />
          <div className="mt-1 text-slate-800 tabular-nums">p = {p.toFixed(2)}</div>
        </label>

        <label className="block text-sm font-medium text-slate-700 md:col-span-2">
          Target trials k (‚â• r)
          <input
            type="number"
            min={r}
            max={400}
            value={k}
            onChange={(e) =>
              setK(Math.max(r, Math.min(400, Number(e.target.value) || r)))
            }
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>
      </div>

      <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-5 text-sm">
        <Metric label="E[X]" value={Number.isFinite(mean) ? mean.toFixed(4) : "‚àû"} />
        <Metric label="Var(X)" value={Number.isFinite(variance) ? variance.toFixed(4) : "‚àû"} />
        <Metric label="P(X=k)" value={pmf.toPrecision(4)} />
        <Metric label="P(X‚â§k)" value={cdf.toPrecision(4)} />
        <Metric label="Mode (approx.)" value={r > 1 ? String(Math.floor((r - 1) * (1 - p) / p) + r) : "r"} />
      </div>

      <p className="mt-3 text-sm text-slate-700">
        When r=1 this reduces to the Geometric(p) distribution on trials. The pmf shape is right-skewed for small p and
        tightens as p increases or r grows.
      </p>
    </div>
  );
}

function Metric({ label, value }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">{label}</div>
      <div className="text-slate-900 font-semibold tabular-nums">{value}</div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\discrete\NegativeBinomialQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * NegativeBinomialQuiz.jsx ‚Äî dedicated quiz page
 * Convention: X = number of trials until r-th success (support {r, r+1, ...})
 */

const questions = [
  {
    question: "Which pmf matches X = trials until r-th success (NegBin)?",
    options: [
      "P(X=k)=C(k+r-1,r-1)p^r(1-p)^k, k=0,1,2,‚Ä¶",
      "P(X=k)=C(k-1,r-1)p^r(1-p)^{k-r}, k=r,r+1,‚Ä¶",
      "P(X=k)=C(n,k)p^k(1-p)^{n-k}, k=0,‚Ä¶,n",
      "P(X=k)=(1-p)^{k-1}p, k=1,2,‚Ä¶",
    ],
    correctIndex: 1,
    rationale:
      "For trials-until-r-th-success: P(X=k)=C(k-1,r-1)p^r(1-p)^{k-r}, support {r, r+1, ‚Ä¶}.",
  },
  {
    question: "For X ~ NegBin(r,p) (trials version), which moments are correct?",
    options: [
      "E[X]=r/p, Var(X)=r(1-p)/p^2",
      "E[X]=p, Var(X)=p(1-p)",
      "E[X]=np, Var(X)=np(1-p)",
      "E[X]=r(1-p)/p, Var(X)=r/p^2",
    ],
    correctIndex: 0,
    rationale: "Mean r/p and variance r(1-p)/p^2 for the trials parameterisation.",
  },
  {
    question: "Which relationship is TRUE?",
    options: [
      "NegBin(r,p) is the product of r independent Geometric(p)",
      "NegBin(r,p) is the sum of r independent Geometric(p)",
      "NegBin(r,p) equals Binomial(n,p) for n=r",
      "NegBin(r,p) is memoryless",
    ],
    correctIndex: 1,
    rationale: "Waiting time to r-th success equals sum of r i.i.d. geometric waiting times.",
  },
  {
    question: "With r=1, NegBin reduces to:",
    options: ["Poisson", "Binomial", "Geometric", "Uniform"],
    correctIndex: 2,
    rationale: "r=1 gives the geometric distribution on trials {1,2,‚Ä¶}.",
  },
  {
    question: "Which is FALSE (trials parameterisation)?",
    options: [
      "Support is {r, r+1, ‚Ä¶}",
      "P(X=r)=p^r",
      "E[X]=r/p",
      "P(X=0)=(1-p)^r",
    ],
    correctIndex: 3,
    rationale: "Support starts at r, so P(X=0)=0 in this parameterisation.",
  },
  {
    question: "Micro-check: r=3, p=0.4 ‚áí P(X=4) equals",
    options: ["C(3,2) p^3 (1-p)", "C(4,3) p^3 (1-p)", "C(3,1) p^2 (1-p)^2", "p^4"],
    correctIndex: 0,
    rationale:
      "k=4 ‚áí C(k-1,r-1)=C(3,2)=3; so 3¬∑p^3¬∑(1-p).",
  },
  {
    question: "Which real-world scenario is best modelled by NegBin(r,p)?",
    options: [
      "Total successes in n fixed trials",
      "Time between two events in a Poisson process",
      "Number of trials needed to see r conversions",
      "Maximum of r geometric variables",
    ],
    correctIndex: 2,
    rationale:
      "Counting trials until r-th success matches the negative binomial waiting-time formulation.",
  },
];

export default function NegativeBinomialQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Negative Binomial
          </h1>
          <p className="mt-2 text-slate-700">
            Check your grasp of the trials-until-r-th-success model, moments, and modelling assumptions.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:negative-binomial" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/negative-binomial"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/poisson"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Continue to Poisson ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}



================================================================================
üìÑ File: src\tutorials\probability\discrete\Poisson.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * Poisson.jsx ‚Äî lesson page
 *
 * Convention used here:
 * - X = count of events in a fixed interval/region with rate Œª (lambda)
 * - pmf: P(X=k) = e^{-Œª} Œª^k / k!, k = 0,1,2,...
 * - mean Œª, variance Œª; superposition & thinning properties
 */

export default function Poisson() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown content
  useEffect(() => {
    let mounted = true;
    import("./poisson.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => console.error("Failed to load poisson.md", err));
    return () => {
      mounted = false;
    };
  }, []);

  // Build TOC from rendered headings (ids set by RichMarkdown)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth-scroll for TOC links
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  // Flashcards (essentials)
  const flashcards = useMemo(
    () => [
      { front: "Support", back: "k ‚àà {0,1,2,‚Ä¶}" },
      { front: "pmf", back: "P(X=k)=e^{-Œª} Œª^k / k!" },
      { front: "Mean / Var", back: "E[X]=Œª, Var(X)=Œª" },
      { front: "Binomial limit", back: "n‚Üí‚àû, p‚Üí0, np‚ÜíŒª ‚áí Bin(n,p)‚ÜíPois(Œª)" },
      { front: "Superposition", back: "If X_i~Pois(Œª_i) indep ‚áí Œ£X_i ~ Pois(Œ£Œª_i)" },
      { front: "Thinning", back: "Keep each event with q ‚áí Pois(Œª)‚ÜíPois(qŒª)" },
      { front: "Poisson process", back: "Inter-arrivals ~ Exponential(Œª)" },
      { front: "PGF/MGF (bonus)", back: "MGF: exp(Œª(e^t‚àí1))" },
    ],
    []
  );

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Poisson Distribution
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Counts of events in a fixed interval with average rate <em>Œª</em>. Learn the pmf, moments, modelling
            assumptions, and key properties (superposition, thinning, and the link to Poisson processes).
          </p>
        </div>

        {/* Content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentWrapRef} className="min-w-0 space-y-8">
            <RichMarkdown content={md} />

            {/* Interactive panel */}
            <section aria-labelledby="poisson-panel" className="space-y-4">
              <h2 id="poisson-panel" className="text-xl font-bold text-slate-900">
                Interactive: Explore Poisson(Œª)
              </h2>
              <PoissonPanel />
            </section>
          </article>

          {/* On This Page */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete/negative-binomial"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Negative Binomial
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/continuous"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Continuous & CLT ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/poisson/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Poisson Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}

/* ------------------------- Interactive Poisson Panel ------------------------ */
function PoissonPanel() {
  const [lambda, setLambda] = useState(3.0);
  const [k, setK] = useState(2);

  useEffect(() => { if (k < 0) setK(0); }, [k]);

  // Exact pmf/cdf via stable recurrence:
  // p0 = e^{-Œª}; p_k = p_{k-1} * Œª / k
  const p0 = useMemo(() => Math.exp(-lambda), [lambda]);
  const pmf = useMemo(() => {
    if (k === 0) return p0;
    let pk = p0;
    for (let i = 1; i <= k; i++) pk *= lambda / i;
    return pk;
  }, [p0, lambda, k]);

  const cdf = useMemo(() => {
    let s = p0;
    let pk = p0;
    for (let i = 1; i <= k; i++) {
      pk *= lambda / i;
      s += pk;
    }
    return s;
  }, [p0, lambda, k]);

  // Normal approximation with continuity correction (for Œª large)
  function stdNormCDF(x) {
    const a1 = 0.254829592, a2 = -0.284496736, a3 = 1.421413741, a4 = -1.453152027, a5 = 1.061405429, p = 0.3275911;
    const sign = x < 0 ? -1 : 1;
    const t = 1 / (1 + p * Math.abs(x));
    const y = 1 - (((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t) * Math.exp(-x * x);
    return 0.5 * (1 + sign * y);
  }
  const pmfNormal = useMemo(() => {
    const mu = lambda;
    const sig = Math.sqrt(lambda);
    if (!(sig > 0)) return k === Math.round(mu) ? 1 : 0;
    const z1 = ((k + 0.5) - mu) / sig;
    const z0 = ((k - 0.5) - mu) / sig;
    return Math.max(0, stdNormCDF(z1) - stdNormCDF(z0));
  }, [lambda, k]);

  const mean = useMemo(() => lambda, [lambda]);
  const variance = useMemo(() => lambda, [lambda]);

  return (
    <div className="rounded-xl border border-slate-200 bg-white p-4">
      <div className="grid gap-4 md:grid-cols-3">
        <label className="block text-sm font-medium text-slate-700">
          Rate Œª
          <input
            type="range"
            min="0"
            max="30"
            step="0.1"
            value={lambda}
            onChange={(e) => setLambda(Number(e.target.value))}
            className="mt-2 w-full"
          />
          <div className="mt-1 text-slate-800 tabular-nums">Œª = {lambda.toFixed(1)}</div>
        </label>

        <label className="block text-sm font-medium text-slate-700">
          Target count k
          <input
            type="number"
            min={0}
            max={150}
            value={k}
            onChange={(e) => setK(Math.max(0, Math.min(150, Number(e.target.value) || 0)))}
            className="mt-2 w-full rounded-md border border-slate-300 px-2 py-1"
          />
        </label>

        <div className="hidden md:block" />
      </div>

      <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-5 text-sm">
        <Metric label="E[X]" value={mean.toFixed(4)} />
        <Metric label="Var(X)" value={variance.toFixed(4)} />
        <Metric label="P(X=k)" value={pmf.toPrecision(4)} />
        <Metric label="P(X‚â§k)" value={cdf.toPrecision(4)} />
        <Metric label="Normal approx P(X=k)" value={pmfNormal.toPrecision(4)} hint="with continuity" />
      </div>

      <p className="mt-3 text-sm text-slate-700">
        Exact probabilities use the stable recurrence p<sub>k</sub>=p<sub>k‚àí1</sub>¬∑Œª/k with p<sub>0</sub>=e<sup>‚àíŒª</sup>.
        The Normal approximation improves as Œª grows; use continuity correction for better accuracy.
      </p>
    </div>
  );
}

function Metric({ label, value, hint }) {
  return (
    <div className="rounded-lg border border-slate-200 p-3">
      <div className="text-slate-500">
        {label}
        {hint ? <span className="text-slate-400"> ({hint})</span> : null}
      </div>
      <div className="text-slate-900 font-semibold tabular-nums">{value}</div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\discrete\PoissonQuiz.jsx
================================================================================

import React from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * PoissonQuiz.jsx ‚Äî dedicated quiz page
 * X ~ Poisson(Œª), pmf e^{-Œª} Œª^k / k!, mean/variance Œª, superposition & thinning
 */

const questions = [
  {
    question: "For X ~ Poisson(Œª), which pmf is correct?",
    options: [
      "P(X=k)=e^{-Œª} Œª^k / k!,  k=0,1,2,‚Ä¶",
      "P(X=k)=p^k(1‚àíp)^{n‚àík}",
      "P(X=k)=(1‚àíp)^{k‚àí1}p",
      "P(X=k)=C(k-1,r-1)p^r(1-p)^{k-r}",
    ],
    correctIndex: 0,
    rationale: "Defining pmf for Poisson counts.",
  },
  {
    question: "Which moments are correct for X ~ Poisson(Œª)?",
    options: [
      "E[X]=Œª and Var(X)=Œª",
      "E[X]=Œª and Var(X)=2Œª",
      "E[X]=Œª^2 and Var(X)=Œª",
      "E[X]=1/Œª and Var(X)=1/Œª^2",
    ],
    correctIndex: 0,
    rationale: "Mean equals variance for Poisson.",
  },
  {
    question: "When does Binomial(n,p) ‚âà Poisson(Œª)?",
    options: [
      "n large, p small, Œª=np fixed",
      "n small, p large",
      "n large, p‚âà0.5",
      "Always",
    ],
    correctIndex: 0,
    rationale: "Classical Poisson limit of Binomial.",
  },
  {
    question: "Superposition property: if X~Pois(Œª1) and Y~Pois(Œª2) independent, then X+Y is",
    options: [
      "Binomial(Œª1+Œª2, p)",
      "Poisson(Œª1+Œª2)",
      "Geometric with p=Œª1+Œª2",
      "Normal(Œª1+Œª2, 1)",
    ],
    correctIndex: 1,
    rationale: "Sum of independent Poissons is Poisson with summed rate.",
  },
  {
    question: "Thinning: if X~Pois(Œª) and each event is kept with prob q, the kept count is",
    options: [
      "Binomial(Œª, q)",
      "Poisson(qŒª)",
      "Poisson(Œª/q)",
      "Geometric(q)",
    ],
    correctIndex: 1,
    rationale: "Independent thinning preserves Poisson with scaled rate qŒª.",
  },
  {
    question: "Which statement is TRUE?",
    options: [
      "Poisson is memoryless",
      "Interarrival times in a Poisson process are Exponential(Œª)",
      "Poisson counts are bounded above by n",
      "Mean of Poisson is 1/Œª",
    ],
    correctIndex: 1,
    rationale: "The **Exponential** distribution is memoryless; Poisson counts are not.",
  },
  {
    question: "Quick calc: Œª=2.5 ‚áí P(X=0) equals",
    options: [
      "e^{‚àí2.5}",
      "2.5¬∑e^{‚àí2.5}",
      "1‚àíe^{‚àí2.5}",
      "e^{‚àí2.5}¬∑2.5^2/2!",
    ],
    correctIndex: 0,
    rationale: "P(0)=e^{‚àíŒª}.",
  },
  {
    question: "Which is closest to P(X=5) for Œª=5? (Normal approx with continuity)",
    options: [
      "‚âà 0.18",
      "‚âà 0.08",
      "‚âà 0.04",
      "‚âà 0.30",
    ],
    correctIndex: 0,
    rationale:
      "Near the mean, pmf peaks around k=Œª; Normal-with-continuity gives ~0.175‚Äì0.18.",
  },
];

export default function PoissonQuiz() {
  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="discrete"
        sectionTitle="Discrete"
      />

      <main className="mx-auto w-full max-w-4xl px-4 sm:px-6">
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Quiz ‚Äî Poisson
          </h1>
          <p className="mt-2 text-slate-700">
            Test your understanding of Poisson counts, approximations, and Poisson-process links.
          </p>
        </div>

        <section className="space-y-4">
          <QuizMCQ questions={questions} storageNamespace="quiz:poisson" />
        </section>

        <nav className="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <Link
            to="/tutorials/introduction-to-probability-distribution/discrete/poisson"
            className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
          >
            ‚Üê Back to Lesson
          </Link>
          <Link
            to="/tutorials/introduction-to-probability-distribution/continuous"
            className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Continue to Continuous & CLT ‚Üí
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\discrete\bernoulli.md
================================================================================

# Bernoulli Distribution

The **Bernoulli** distribution models a **single trial** with two outcomes: *success* (1) with probability \(p\) and *failure* (0) with probability \(1-p\). It is the fundamental building block for many discrete models.

> üí° **Key idea**  
> A Bernoulli variable is the indicator of an event \(A\): \(X=\mathbf{1}_{\{A\}}\). Then \(\mathbb{E}[X]=P(A)=p\).

---

## 1) Definition & pmf

A random variable \(X\) is **Bernoulli(p)** if
\[
P(X=1)=p,\qquad P(X=0)=1-p,\qquad 0\le p\le 1.
\]

- **Support:** \(\{0,1\}\).
- **pmf:** \(p(x)=p^x(1-p)^{1-x}\) for \(x\in\{0,1\}\).

> ‚ö†Ô∏è **Common pitfall**  
> Confusing the *parameter* \(p\) with an *estimate* of \(p\) from data. Here \(p\) is the true success probability.

---

## 2) Moments & useful identities

- **Mean:** \(\mathbb{E}[X]=p\).
- **Variance:** \(\mathrm{Var}(X)=p(1-p)\).
- **MGF (bonus):** \(M_X(t) = \mathbb{E}[e^{tX}] = (1-p) + p e^{t}\).
- **Indicator trick:** If \(X=\mathbf{1}_{\{A\}}\), then \(X^2=X\) and \(\mathrm{Var}(X)=p(1-p)\).

---

## 3) Modelling with Bernoulli

Use Bernoulli when the story is a **single yes/no outcome** with fixed probability \(p\), e.g.:

- A trade **fills** (1) or **doesn‚Äôt** (0).
- A customer **converts** (1) or **doesn‚Äôt** (0).
- A quality check **passes** (1) or **fails** (0).

> üí° **Tip**  
> Many complex models are built from Bernoulli pieces. For example, **Binomial(n,p)** sums \(n\) i.i.d. Bernoulli(p).

---

## 4) From Bernoulli to Binomial

If \(X_1,\dots,X_n\) are i.i.d. Bernoulli(p), the **count of successes**
\[
S_n=\sum_{i=1}^n X_i
\]
is **Binomial(n,p)** with \(\mathbb{E}[S_n]=np\) and \(\mathrm{Var}(S_n)=np(1-p)\).

---

## 5) Quick checks

- Does the event description fit a single trial with two outcomes?
- Is the success probability \(p\) stable across trials (if you repeat)?
- Are we aggregating multiple trials? (then consider Binomial)

---

## 6) Visual intuition

Think of Bernoulli as a biased **coin flip**: \(p\) is the chance of ‚Äúheads‚Äù (1), \(1-p\) the chance of ‚Äútails‚Äù (0).

![single-coin](./images/coin-placeholder.png)

<small>Place any images for this page under `src/tutorials/probability/discrete/images/` and reference them as above.</small>


================================================================================
üìÑ File: src\tutorials\probability\discrete\binomial.md
================================================================================

# Binomial Distribution

The **Binomial** distribution models the **number of successes** in \(n\) independent and identical Bernoulli(\(p\)) trials.

> üí° **Key idea**  
> If \(X_i \sim \mathrm{Bernoulli}(p)\) i.i.d., then \(S_n=\sum_{i=1}^n X_i \sim \mathrm{Binomial}(n,p)\).

---

## 1) Definition & pmf

For \(X \sim \mathrm{Binomial}(n,p)\), the probability of exactly \(k\) successes is
\[
P(X=k) = \binom{n}{k} p^k (1-p)^{n-k}, \qquad k=0,1,\dots,n.
\]

- **Support:** \(\{0,1,\dots,n\}\)  
- **Combinatorial term:** \(\binom{n}{k}=\dfrac{n!}{k!(n-k)!}\)

> ‚ö†Ô∏è **Assumptions**  
> - Trials are **independent**.  
> - Each trial has the **same** success probability \(p\).  
> - The number of trials \(n\) is **fixed in advance**.

---

## 2) Moments & shape

- **Mean:** \(\mathbb{E}[X]=np\)  
- **Variance:** \(\mathrm{Var}(X)=np(1-p)\)  
- **Mode(s):** approximately near \((n+1)p\).

The distribution is **skewed** when \(p\) is near 0 or 1, and approximately **symmetric** when \(p\approx 0.5\).

---

## 3) When Binomial applies

Use Binomial when you count successes across a fixed number of repeatable, like-for-like trials:

- Number of customers who convert out of \(n\) visitors (\(p\) constant).
- Number of successful fills out of \(n\) order attempts.
- Number of items passing QC out of \(n\) inspected.

> üí° **Indicator view**  
> Let \(X_i=\mathbf{1}_{\{\text{trial }i \text{ is success}\}}\). Then \(X=\sum_i X_i\) and  
> \(\mathbb{E}[X]=\sum_i \mathbb{E}[X_i]=np\) by **linearity**, no joint distributions needed.

---

## 4) Cdf & tail probabilities

The cdf \(F(k)=P(X\le k)=\sum_{i=0}^k \binom{n}{i}p^i(1-p)^{n-i}\).  
Right-tail \(P(X\ge k)=\sum_{i=k}^n \binom{n}{i}p^i(1-p)^{n-i}\).

For quick sanity checks:
- \(P(X=0)=(1-p)^n\)
- \(P(X=n)=p^n\)

---

## 5) Approximations

**Normal approximation (with continuity).** If \(np(1-p)\) is **large** (rule-of-thumb: \(\ge 10\)‚Äì\(20\)), then
\[
X \approx \mathcal{N}\big(np,\; np(1-p)\big)
\]
and
\[
P(X=k) \approx \Phi\!\left(\frac{k+0.5-np}{\sqrt{np(1-p)}}\right) - \Phi\!\left(\frac{k-0.5-np}{\sqrt{np(1-p)}}\right).
\]
Use continuity corrections (¬±0.5) for discrete-to-continuous bridging.

**Poisson approximation (rare events).** If \(n\) is **large**, \(p\) is **small**, and \(\lambda=np\) is **fixed**, then
\[
X \approx \mathrm{Poisson}(\lambda),
\quad P(X=k) \approx e^{-\lambda}\dfrac{\lambda^k}{k!}.
\]

> ‚ö†Ô∏è **Pitfall**  
> Don‚Äôt apply the Poisson approximation when \(p\) is moderate or large; the variance structure differs.

---

## 6) Worked micro-example

Suppose \(n=10\), \(p=0.3\).

- \(P(X=0)=(0.7)^{10}\)
- \(\mathbb{E}[X]=3\), \(\mathrm{Var}(X)=2.1\)
- \(P(X\le 3)=\sum_{i=0}^3 \binom{10}{i}0.3^i 0.7^{10-i}\)

Try these in the interactive panel below.

---

## 7) Visual intuition

Binomial pmfs for different \(p\) values:

![binomial-shapes](./images/binomial-shapes-placeholder.png)

<small>Put your images in `src/tutorials/probability/discrete/images/` and reference them relatively.</small>


================================================================================
üìÑ File: src\tutorials\probability\discrete\geometric.md
================================================================================

# Geometric Distribution

The **Geometric** distribution models the number of **trials until the first success**, when each trial is independent and has the same success probability \(p\).

> üí° **Key idea**  
> A sequence of Bernoulli(\(p\)) trials produces a **waiting time** to the first success. With the "trials-counting" convention used here, the support is \(\{1,2,\dots\}\).

---

## 1) Definition & pmf (support {1,2,‚Ä¶})

For \(X \sim \mathrm{Geom}(p)\) with support \(\{1,2,\dots\}\),
\[
P(X=k) = (1-p)^{k-1}\,p, \qquad k=1,2,\dots
\]

- **Support:** \(\{1,2,\dots\}\) (trial count until first success)
- **Tail:** \(P(X>k) = (1-p)^{k}\)
- **cdf:** \(P(X \le k) = 1-(1-p)^k\)

> ‚ö†Ô∏è **Parameterisation alert**  
> Some texts define Geometric as the **number of failures before the first success**, with support \(\{0,1,2,\dots\}\). Then \(P(Y=k)=(1-p)^k p\).  
> We adopt the **trials-until-first-success** version (\(X=Y+1\)).

---

## 2) Moments & properties

- **Mean:** \(\mathbb{E}[X] = \dfrac{1}{p}\)
- **Variance:** \(\mathrm{Var}(X) = \dfrac{1-p}{p^2}\)
- **Memoryless:** for \(m,n\ge 0\),
  \[
  P(X>m+n \mid X>m) = P(X>n).
  \]
  Geometric is the **only discrete** distribution with this property.

---

## 3) When Geometric applies

Use Geometric when you repeat identical, independent trials until the first success:

- Attempts until a **password** is guessed (in a simplified model).
- **Order retries** until a fill occurs.
- Phone **call attempts** until one is answered.

> üí° **Model check**  
> Is "success" clearly defined? Is \(p\) stable across attempts? Are trials independent? If not, reconsider the model.

---

## 4) Quick identities

- \(P(X=1)=p\), \(P(X=2)=(1-p)p\), \(P(X=3)=(1-p)^2 p\), ‚Ä¶
- \(P(X>k)=(1-p)^{k}\) gives fast tail estimates.
- With \(X\sim\mathrm{Geom}(p)\), the count of **failures** before the first success is \(X-1\sim\mathrm{Geom}_0(p)\) (support \(\{0,1,\dots\}\)).

---

## 5) Micro-example

If \(p=0.2\), then:
- \(E[X]=5\), \(Var(X)=20\).
- \(P(X>3)=(0.8)^3=0.512\).
- \(P(X=4)=(0.8)^3(0.2)=0.1024\).

Try these in the interactive panel on this page.

---

## 6) Visual intuition

The pmf **decays geometrically**: most mass is near 1 when \(p\) is large; heavier tails when \(p\) is small.

![geometric-shape](./images/geometric-shape-placeholder.png)

<small>Place images for this page under `src/tutorials/probability/discrete/images/`.</small>


================================================================================
üìÑ File: src\tutorials\probability\discrete\negative_binomial.md
================================================================================

# Negative Binomial (Pascal) Distribution

The **Negative Binomial** models the number of **trials** needed to achieve the **r-th success**, when each trial is an independent Bernoulli(\(p\)).

> üí° **Key idea**  
> The variable is a **waiting time** in discrete trials: for \(r=1\) this is **Geometric**(\(p\)); for general \(r\) it‚Äôs the **sum of \(r\) independent Geometric(\(p\))** waiting times.

---

## 1) Definition & pmf (support \(\{r, r+1, \dots\}\))

Let \(X \sim \text{NegBin}(r,p)\) denote the number of **trials** until the \(r\)-th success. Then, for \(k=r, r+1, \dots\),
\[
P(X=k) \;=\; \binom{k-1}{r-1}\, p^{\,r}\, (1-p)^{\,k-r}.
\]

- **Support:** \(k \in \{r, r+1, \dots\}\)  
- **Combinatorial term:** \(\binom{k-1}{r-1}\) counts the ways to place the first \(r-1\) successes among the first \(k-1\) trials; the \(k\)-th trial must be a success.

> ‚ö†Ô∏è **Parameterisation alert**  
> Another common version counts **failures before the \(r\)-th success** (support \(\{0,1,\dots\}\)) with pmf \(\binom{k+r-1}{r-1} p^r (1-p)^k\).  
> We use the **trials** version throughout this page.

---

## 2) Moments & shape

- **Mean:** \(\mathbb{E}[X]=\dfrac{r}{p}\)  
- **Variance:** \(\mathrm{Var}(X)=\dfrac{r(1-p)}{p^2}\)  
- **Mode (for \(r>1\))**: \(\left\lfloor \dfrac{(r-1)(1-p)}{p} \right\rfloor + r\) (a typical location of the pmf peak)

The distribution is **right-skewed** for small \(p\). As \(p\) increases (or \(r\) grows), the mass concentrates nearer the mean.

---

## 3) When Negative Binomial applies

Use NegBin(\(r,p\)) when repeating identical, independent trials until **\(r\) successes** are accumulated:

- **Retries** until the \(r\)-th successful API response.
- **Sales attempts** until closing \(r\) deals.
- **Quality tests** until \(r\) passes are observed.

> üí° **Model check**  
> Are trials independent? Is \(p\) reasonably stable across attempts? Is \(r\) fixed in advance?

---

## 4) Connections

- **Geometric:** \(r=1\) gives \(\text{Geom}(p)\) on trials \(\{1,2,\dots\}\).
- **Sum of Geom:** \(X \stackrel{d}{=} \sum_{i=1}^{r} G_i\), with \(G_i \sim \text{Geom}(p)\) i.i.d.
- **Failures version:** If \(Y=X-r\) is the number of **failures** before the \(r\)-th success, then \(Y\) has support \(\{0,1,\dots\}\) and mean \(r(1-p)/p\).

---

## 5) Cdf & tail checks

The cdf is
\[
F(k)=P(X\le k)=\sum_{t=r}^{k} \binom{t-1}{r-1} p^r (1-p)^{t-r}.
\]
Sanity checks:
- \(P(X=r)=p^r\) (all first \(r\) trials successes).
- \(P(X>k)=(1-p)^{k-r+1}\,\cdot\) (times a finite polynomial in \(k\) for small \(r\)); in practice we use partial sums.

---

## 6) Micro-example

Let \(r=3\), \(p=0.4\).

- \(\mathbb{E}[X]=3/0.4=7.5\)
- \(\mathrm{Var}(X)=3\cdot 0.6/0.16=11.25\)
- \(P(X=3)=p^3=0.064\)
- \(P(X=4)=\binom{3}{2} p^3(1-p)=3 \cdot 0.064 \cdot 0.6=0.1152\)

Try additional values in the interactive panel.

---

## 7) Visual intuition

Right-skew decreases as \(p\) rises or \(r\) increases:

![negbin-shapes](./images/negbin-shapes-placeholder.png)

<small>Put images for this page under `src/tutorials/probability/discrete/images/` and reference them as above.</small>


================================================================================
üìÑ File: src\tutorials\probability\discrete\poisson.md
================================================================================

# Poisson Distribution

The **Poisson** distribution models the **count of events** in a fixed interval (time/space/volume) when events occur independently at an average rate \( \lambda > 0 \).

> üí° **Key idea**  
> If events arrive according to a **Poisson process** with rate \( \lambda \), then the number of arrivals in any interval of length \(t\) is \( \mathrm{Pois}(\lambda t) \). Interarrival times are **Exponential(\(\lambda\))**.

---

## 1) Definition & pmf

For \( X \sim \mathrm{Pois}(\lambda) \),
\[
P(X=k) \;=\; e^{-\lambda}\,\frac{\lambda^k}{k!}, \qquad k=0,1,2,\dots
\]

- **Support:** \( \{0,1,2,\dots\} \)  
- **Mean / Variance:** \( \mathbb{E}[X]=\lambda \), \( \mathrm{Var}(X)=\lambda \)  
- **MGF (bonus):** \( M_X(t) = \exp\!\big(\lambda(e^t-1)\big) \)

> ‚ö†Ô∏è **Assumptions**  
> Events occur one at a time, independently, and the **rate is constant** across the interval (stationarity).

---

## 2) Modelling when Poisson fits

- **Counts per interval**: number of API requests per minute, arrivals per hour, defects per metre.  
- **Agnostic to ‚Äúcapacity‚Äù**: unlike Binomial, there‚Äôs no fixed maximum; the count can, in principle, be any non-negative integer.  
- **Independence & stationarity**: arrivals in disjoint time windows are independent; expected count is proportional to length.

> üí° **Check-list**  
> Is the rate roughly constant over the window? Are arrivals approximately independent? If not, consider an inhomogeneous Poisson process or alternatives.

---

## 3) Connections & limits

- **Binomial limit**: if \(n\to\infty\), \(p\to 0\), \(np\to \lambda\), then \(\mathrm{Bin}(n,p) \Rightarrow \mathrm{Pois}(\lambda)\).  
- **Superposition**: if \(X_i \sim \mathrm{Pois}(\lambda_i)\) independent, then \(\sum_i X_i \sim \mathrm{Pois}(\sum_i \lambda_i)\).  
- **Thinning**: if \(X \sim \mathrm{Pois}(\lambda)\) and each event is kept independently with prob. \(q\), the kept count is \(\mathrm{Pois}(q\lambda)\).  
- **Poisson process**: counts over time follow Poisson; **inter-arrivals** are i.i.d. Exponential\((\lambda)\).

---

## 4) Cdf & quick tails

The cdf is
\[
F(k)=P(X\le k) = e^{-\lambda}\sum_{i=0}^k \frac{\lambda^i}{i!}.
\]
Useful checks:
- \(P(X=0)=e^{-\lambda}\)
- \(P(X\ge 1)=1-e^{-\lambda}\)

For large \(\lambda\), a **Normal** approximation works:
\[
X \approx \mathcal{N}(\lambda, \lambda),
\]
with a **continuity correction** (\(\pm 0.5\)) for discrete probabilities.

---

## 5) Worked micro-example

Let \(\lambda=3\).

- \(P(X=0)=e^{-3}\approx 0.0498\)  
- \(P(X=2)=e^{-3}\dfrac{3^2}{2!}\approx 0.2240\)  
- \(\mathbb{E}[X]=\mathrm{Var}(X)=3\)

Try additional values in the interactive panel on this page.

---

## 6) Visual intuition

Poisson pmfs for different \(\lambda\) values:

![poisson-shapes](./images/poisson-shapes-placeholder.png)

<small>Place images for this page under `src/tutorials/probability/discrete/images/` and reference them relatively.</small>


================================================================================
üìÑ File: src\tutorials\probability\foundations\Foundations.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";

/**
 * Foundations.jsx ‚Äî sequential lesson page
 *
 * - Loads markdown content from ./foundations.md (co-located with this file)
 * - Builds a sticky "On This Page" TOC from rendered headings
 * - Shows flashcards at the bottom
 * - Provides Next/Previous nav + a dedicated Quiz route CTA
 * - Responsive: two columns (content + TOC) on large screens, single column on mobile
 * - No progress/memory features (static site-friendly)
 */

export default function Foundations() {
  const [md, setMd] = useState("");
  const contentWrapRef = useRef(null);
  const [toc, setToc] = useState([]); // [{id, text, level}]

  // Load markdown (Vite raw import)
  useEffect(() => {
    let mounted = true;
    import("./foundations.md?raw")
      .then((mod) => {
        if (mounted) setMd(mod.default || "");
      })
      .catch((err) => {
        console.error("Failed to load foundations.md", err);
      });
    return () => {
      mounted = false;
    };
  }, []);

  // Observe rendered content to extract H2/H3 headings for the TOC (ids are added by RichMarkdown)
  useEffect(() => {
    if (!contentWrapRef.current) return;
    const el = contentWrapRef.current;

    const buildToc = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };

    buildToc();
    const obs = new MutationObserver(buildToc);
    obs.observe(el, { childList: true, subtree: true });
    return () => obs.disconnect();
  }, [md]);

  // Smooth scroll for TOC links
  function handleTocClick(e, id) {
    e.preventDefault();
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: "start" });
      history.replaceState(null, "", `#${id}`);
    }
  }

  // Foundations flashcards (concise essentials)
  const flashcards = useMemo(
    () => [
      { front: "Complement rule", back: "P(A^c) = 1 ‚àí P(A)" },
      { front: "Inclusion‚Äìexclusion (2 sets)", back: "P(A‚à™B)=P(A)+P(B)‚àíP(A‚à©B)" },
      { front: "Conditional probability", back: "P(A|B)=P(A‚à©B)/P(B), if P(B)>0" },
      { front: "Independence", back: "A ‚üÇ B iff P(A‚à©B)=P(A)P(B)" },
      { front: "Law of total probability", back: "P(A)=‚àë P(A|B_i)P(B_i) for a partition {B_i}" },
      { front: "Bayes‚Äô theorem", back: "P(B_i|A)= P(A|B_i)P(B_i) / ‚àë_j P(A|B_j)P(B_j)" },
      { front: "Linearity of expectation", back: "E[aX+bY+c]=aE[X]+bE[Y]+c" },
      { front: "Variance identity", back: "Var(X)=E[X^2]‚àí(E[X])^2" },
      { front: "Discrete vs continuous", back: "pmf p(x) vs pdf f(x); cdf F(x)=P(X‚â§x)" },
    ],
    []
  );

  return (
    <>
      {/* Top header with breadcrumbs + Back to Blog / All Tutorials */}
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="foundations"
        sectionTitle="Foundations"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title strip (optional; H1 is also in the markdown) */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Foundations of Probability
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Axioms and event algebra, conditional probability & independence, Bayes‚Äô theorem, counting,
            and random variables & moments.
          </p>
        </div>

        {/* Responsive content + sticky TOC */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article
            ref={contentWrapRef}
            className="min-w-0"
          >
            {/* RichMarkdown renders headings with ids; it also supports KaTeX, admonitions, code copy, etc. */}
            <RichMarkdown content={md} />
          </article>

          {/* On This Page (desktop) */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => handleTocClick(e, item.id)}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                  title="Open print dialog (you can save as PDF)"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>

        {/* Flashcards */}
        <section className="mt-12">
          <h2 className="text-xl font-bold text-slate-900 mb-3">Quick flashcards</h2>
          <Flashcards deck={flashcards} />
        </section>

        {/* Bottom nav + Quiz CTA */}
        <nav className="mt-10 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-3">
            <Link
              to="/tutorials/introduction-to-probability-distribution"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              ‚Üê Overview
            </Link>
            <Link
              to="/tutorials/introduction-to-probability-distribution/discrete"
              className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next: Discrete ‚Üí
            </Link>
          </div>

          <Link
            to="/tutorials/introduction-to-probability-distribution/foundations/quiz"
            className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Start Foundations Quiz
          </Link>
        </nav>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\probability\foundations\foundations.md
================================================================================

# Foundations of Probability

Uncertainty pervades engineering, finance, science, and everyday life. This chapter equips you with the **core rules and tools** to reason rigorously about uncertain events and numerical quantities.

> üí° **Key idea**  
> Probability is a **consistent calculus of plausibility**. The axioms enforce internal consistency; everything else is technique and interpretation.

## Learning outcomes

By the end of this chapter you should be able to:

- Work with **events** and set operations; apply complement, union, intersection, and De Morgan‚Äôs laws.
- Compute **conditional probability** \(P(A\mid B)\), recognise **independence**, and use the **law of total probability**.
- Apply **Bayes‚Äô theorem** to update beliefs from data.
- Use **counting** (permutations/combinations) to justify discrete models.
- Define **random variables** (pmf/pdf, cdf), compute **expectation** \(\mathbb{E}[X]\) and **variance** \(\mathrm{Var}(X)\), and use **linearity of expectation**.

---

## 1) Axioms & event algebra

Let \(\Omega\) be the **sample space** of all possible outcomes, and \(\mathcal{F}\) a collection of events (subsets of \(\Omega\)).

**Kolmogorov‚Äôs axioms.** A function \(P:\mathcal{F}\to[0,1]\) is a probability measure if:

1. \(0 \le P(E) \le 1\) for any event \(E\in\mathcal{F}\)
2. \(P(\Omega) = 1\)
3. (**Countable additivity**) For pairwise disjoint events \(\{E_i\}\),
   \[
   P\!\left(\bigcup_{i=1}^\infty E_i\right) = \sum_{i=1}^\infty P(E_i).
   \]

**Basic identities.**

- Complement: \(P(A^c)=1-P(A)\).
- Inclusion‚Äìexclusion (two sets): \(P(A\cup B)=P(A)+P(B)-P(A\cap B)\).
- Monotonicity: if \(A\subseteq B\) then \(P(A)\le P(B)\).
- De Morgan: \((A\cup B)^c=A^c\cap B^c\), \((A\cap B)^c=A^c\cup B^c\).

> ‚ö†Ô∏è **Common pitfall**  
> Do **not** add probabilities for overlapping events without subtracting the intersection.

---

## 2) Conditional probability & independence

Given \(P(B)>0\),
\[
P(A\mid B) = \frac{P(A\cap B)}{P(B)}.
\]

Events \(A,B\) are **independent** iff
\[
P(A\cap B) = P(A)P(B).
\]
Independence is stronger than disjointness and does **not** follow from it.

**Law of total probability.** If \(\{B_i\}\) is a partition of \(\Omega\) (disjoint, exhaustive, with \(P(B_i)>0\)),
\[
P(A)=\sum_i P(A\mid B_i)P(B_i).
\]

> üí° **Tip**  
> Draw a quick Venn diagram or tree: it clarifies where conditionals and intersections live.

---

## 3) Bayes‚Äô theorem

For a partition \(\{H_i\}\) of hypotheses and data/event \(D\) with \(P(D)>0\),
\[
P(H_i\mid D)
= \frac{P(D\mid H_i)\,P(H_i)}{\sum_j P(D\mid H_j)\,P(H_j)}.
\]

Interpretation: **posterior** \(\propto\) **likelihood** \(\times\) **prior**.  
Diagnostic testing: prevalence is the prior \(P(H)\); sensitivity/specificity live in \(P(D\mid H)\), \(P(D\mid H^c)\).

---

## 4) Counting: permutations & combinations

Counting underpins many discrete models.

- Factorial: \(n! = n(n-1)\cdots 1\), \(0!=1\).
- Permutations (ordered selections): \(_nP_r = \frac{n!}{(n-r)!}\).
- Combinations (unordered selections): \(_nC_r = \binom{n}{r} = \frac{n!}{r!(n-r)!}\).

**Example.** Number of 5-card hands from a 52-card deck: \(\binom{52}{5}\).

> ‚ö†Ô∏è **Mind the assumptions**  
> Many formulas assume **sampling without replacement** and **distinct items**. Check the model matches the story.

---

## 5) Random variables & moments

A **random variable** \(X\) maps outcomes to numbers.

- **Discrete:** pmf \(p(x)=P(X=x)\), with \(\sum_x p(x)=1\).
- **Continuous:** pdf \(f(x)\ge 0\), with \(\int_{-\infty}^{\infty} f(x)\,dx=1\).
- **Cdf:** \(F(x)=P(X\le x)\) equals \(\sum_{t\le x}p(t)\) (discrete) or \(\int_{-\infty}^x f(t)\,dt\) (continuous).

**Expectation and variance.**
\[
\mathbb{E}[X] =
\begin{cases}
\sum_x x\,p(x), & \text{discrete} \\
\int_{-\infty}^{\infty} x\,f(x)\,dx, & \text{continuous}
\end{cases}
\quad\quad
\mathrm{Var}(X)=\mathbb{E}[X^2] - \big(\mathbb{E}[X]\big)^2.
\]

**Linearity of expectation.** For constants \(a,b,c\),
\[
\mathbb{E}[aX+bY+c] = a\,\mathbb{E}[X] + b\,\mathbb{E}[Y] + c
\]
(no independence needed).

> üí° **Heuristic**  
> Use linearity to compute \(\mathbb{E}[\text{sum}]\) by summing expectations, even when variables are dependent.

---

## Notation & conventions

- \(\Omega\): sample space; \(A,B\subseteq\Omega\) events. \(P\): probability.
- Discrete rv \(X\): pmf \(p(x)\). Continuous rv \(X\): pdf \(f(x)\), cdf \(F(x)\).
- Expectation \(\mathbb{E}[X]\) and variance \(\mathrm{Var}(X)\).
- Independence: \(A\perp B\).
- Indicator \(\mathbf{1}_{\{\cdot\}}\) for event truth values in formulas.

---

## (Optional) Visual: sets & probability

An illustrative Venn diagram can help cement the identities above.

![Venn diagram: A, B, A‚à©B, complements](/tutorials/introduction-to-probability-distribution/foundations/images/venn-placeholder.png)



================================================================================
üìÑ File: src\tutorials\probability\practice\Practice.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import AppHeaderMini from "../../shell/components/AppHeaderMini";
import AppFooterMini from "../../shell/components/AppFooterMini";
import RichMarkdown from "../../shell/components/RichMarkdown";
import Flashcards from "../../shell/components/Flashcards";
import QuizMCQ from "../../shell/components/QuizMCQ";

/**
 * Practice.jsx ‚Äî Probability Practice Hub
 *
 * - Mixed practice for the whole Probability tutorial (discrete, continuous, CLT)
 * - Sections:
 *    1) How to use this page (tips + printable)
 *    2) Short exercises (with collapsible solutions) ‚Äî rendered from inline markdown
 *    3) Exam-length MCQ (40 items) using QuizMCQ
 *    4) Flashcards recap
 * - Sticky "On This Page" sidebar built from headings inside the article
 * - Responsive: 2 columns (content + TOC) on wide screens, stacked on mobile
 * - No progress/memory features (static site)
 */

export default function Practice() {
  const [toc, setToc] = useState([]);
  const contentRef = useRef(null);

  // ---------- Inline markdown for the Exercises section ----------
  const practiceMd = useMemo(
    () => `
# Practice & Exam Preparation

> üí° **How to use this page**  
> 1) Warm up with short exercises (open *Solutions* after you commit).  
> 2) Take the full **40-question MCQ exam** below, or use **Exam Mode** for a quick 30Q subset.  
> 3) Print or Save as PDF (button in the sidebar) to work offline.  
> 4) Review with flashcards at the bottom.

---

## A. Warm-ups & Short Exercises

Each problem targets the core skills from the tutorial (Bernoulli/Binomial/Geometric/NegBin/Poisson, Uniform/Exponential/Gamma/Normal, CLT, transformations).  
  
Open the *Solution* only after you‚Äôve tried it.

### 1) Bernoulli mean/var
Let \\(X\\sim \\mathrm{Bernoulli}(p)\\). Compute \\(\\mathbb E[X]\\) and \\(\\mathrm{Var}(X)\\).

<details><summary>Solution</summary>
\\(\\mathbb E[X]=p\\), \\(\\mathrm{Var}(X)=p(1-p)\\).
</details>

### 2) Binomial pmf & mean/var
If \\(Y\\sim\\mathrm{Binomial}(n,p)\\), write \\(P(Y=k)\\) and give mean/variance.

<details><summary>Solution</summary>
\\(P(Y=k)=\\binom{n}{k}p^k(1-p)^{n-k}\\), \\(\\mathbb E[Y]=np\\), \\(\\mathrm{Var}(Y)=np(1-p)\\).
</details>

### 3) Geometric tail & mean
For \\(G\\sim\\mathrm{Geom}(p)\\) (# of trials until first success, support \\(1,2,\\dots\\)), show \\(P(G>k)=(1-p)^k\\) and \\(\\mathbb E[G]=1/p\\).

<details><summary>Solution</summary>
No success in first \\(k\\) trials: \\((1-p)^k\\). Mean is \\(1/p\\).
</details>

### 4) NegBin interpretation
\\(X\\sim\\mathrm{NegBin}(r,p)\\) = # of trials until \\(r\\)th success. What is \\(\\mathbb E[X]\\)?

<details><summary>Solution</summary>
\\(\\mathbb E[X]=r/p\\).
</details>

### 5) Poisson mean/var & interval prob
\\(N\\sim\\mathrm{Pois}(\\lambda)\\). Give mean/variance and \\(P(N=0)\\).

<details><summary>Solution</summary>
Mean=Var=\\(\\lambda\\). \\(P(N=0)=e^{-\\lambda}\\).
</details>

### 6) Poisson thinning
If arrivals ~ Poisson(\\(\\lambda\\)), each kept with prob \\(q\\) independently. Distribution of kept arrivals?

<details><summary>Solution</summary>
Thinned process is \\(\\mathrm{Pois}(q\\lambda)\\).
</details>

### 7) Uniform interval probability
\\(X\\sim\\mathrm{U}(a,b)\\). Compute \\(P(c\\le X\\le d)\\).

<details><summary>Solution</summary>
\\(\\dfrac{\\max(0,\\min(d,b)-\\max(c,a))}{b-a}\\).
</details>

### 8) Exponential memoryless
\\(T\\sim\\mathrm{Exp}(\\lambda)\\). Show \\(P(T>s+t\\mid T>s)=P(T>t)\\).

<details><summary>Solution</summary>
\\(\\dfrac{e^{-\\lambda(s+t)}}{e^{-\\lambda s}}=e^{-\\lambda t}\\).
</details>

### 9) Sum of exponentials
If \\(X_i\\stackrel{iid}{\\sim}\\mathrm{Exp}(\\lambda)\\) for \\(i=1..k\\), distribution of \\(\\sum X_i\\)?

<details><summary>Solution</summary>
\\(\\mathrm{Gamma}(k,\\lambda)\\) (rate form).
</details>

### 10) Gamma moments
For \\(G\\sim\\mathrm{Gamma}(k,\\lambda)\\) (rate), give mean/variance.

<details><summary>Solution</summary>
\\(\\mathbb E[G]=k/\\lambda\\), \\(\\mathrm{Var}(G)=k/\\lambda^2\\).
</details>

### 11) Normal standardization
\\(X\\sim\\mathcal N(\\mu,\\sigma^2)\\). Express \\(P(X\\le x)\\) using \\(\\Phi\\).

<details><summary>Solution</summary>
\\(P(X\\le x)=\\Phi\\big((x-\\mu)/\\sigma\\big)\\).
</details>

### 12) CLT statement
Write the classical i.i.d. CLT for standardized \\(\\overline{X}\\).

<details><summary>Solution</summary>
\\((\\overline{X}-\\mu)/(\\sigma/\\sqrt{n}) \\Rightarrow \\mathcal N(0,1)\\).
</details>

### 13) Change of variables (monotone)
If \\(X\\) has density \\(f_X\\), and \\(Y=g(X)\\) strictly increasing, derive \\(f_Y\\).

<details><summary>Solution</summary>
\\(f_Y(y)=f_X(g^{-1}(y))\\left|\\dfrac{d}{dy}g^{-1}(y)\\right|\\).
</details>

### 14) Order stats for U(0,1)
For \\(U_1,..,U_n\\sim \\mathrm U(0,1)\\), pdf of \\(\\max U_i\\)?

<details><summary>Solution</summary>
\\(f(x)=n x^{n-1},\\ 0\\le x\\le 1\\).
</details>

### 15) Bayes (quick numbers)
Test has sensitivity 0.95, specificity 0.98, prevalence 0.01. Compute \\(P(\\text{disease}|\\text{positive})\\).

<details><summary>Solution</summary>
\\(\\frac{0.95\\cdot 0.01}{0.95\\cdot 0.01 + 0.02\\cdot 0.99}\\approx 0.324\\).
</details>
`,
    []
  );

  // ---------- Build TOC by scanning headings ----------
  useEffect(() => {
    if (!contentRef.current) return;
    const el = contentRef.current;
    const rebuild = () => {
      const nodes = Array.from(el.querySelectorAll("h2, h3"));
      const items = nodes.map((n) => ({
        id: n.id || "",
        text: n.textContent || "",
        level: n.tagName === "H2" ? 2 : 3,
      }));
      setToc(items);
    };
    rebuild();
    const obs = new MutationObserver(rebuild);
    obs.observe(el, { childList: true, subtree: true, attributes: true });
    return () => obs.disconnect();
  }, [practiceMd]);

  // ---------- MCQ: 40 comprehensive questions ----------
  const fullQuestions = useMemo(
    () => [
      {
        question: "For X ~ Bernoulli(p), which is correct?",
        options: [
          "E[X]=p, Var(X)=p(1‚àíp)",
          "E[X]=1‚àíp, Var(X)=p",
          "E[X]=p, Var(X)=p",
          "E[X]=1, Var(X)=0",
        ],
        correctIndex: 0,
        rationale: "Bernoulli basics.",
      },
      {
        question: "Y ~ Binomial(n,p). P(Y=k) equals",
        options: [
          "C(n,k) p^k (1‚àíp)^{n‚àík}",
          "p^k (1‚àíp)^{n‚àík}",
          "Œª^k e^{‚àíŒª}/k!",
          "1/(b‚àía)",
        ],
        correctIndex: 0,
        rationale: "Binomial pmf.",
      },
      {
        question: "Geometric(p) (# of trials until first success) has mean",
        options: ["1/p", "p", "1‚àíp", "p/(1‚àíp)"],
        correctIndex: 0,
        rationale: "Standard mean for this parameterization (support 1,2,‚Ä¶).",
      },
      {
        question: "Negative Binomial(r,p) represents",
        options: [
          "Trials until r-th success",
          "Failures until 1st success",
          "Number of successes in n trials",
          "Poisson arrivals in time t",
        ],
        correctIndex: 0,
        rationale: "Trials-to-rth-success convention.",
      },
      {
        question: "If N ~ Poisson(Œª), then E[N] and Var(N) are",
        options: ["Œª and Œª", "Œª and ‚àöŒª", "‚àöŒª and Œª", "Œª and 2Œª"],
        correctIndex: 0,
        rationale: "Poisson has equal mean and variance.",
      },
      {
        question: "Poisson superposition: sum of independent Poisson(Œªi) variables is",
        options: [
          "Poisson(‚àëŒªi)",
          "Binomial(‚àëŒªi, p)",
          "Normal(‚àëŒªi,‚àëŒªi¬≤)",
          "Gamma(‚àëŒªi,1)",
        ],
        correctIndex: 0,
        rationale: "Rates add.",
      },
      {
        question: "Poisson as a Binomial limit holds when",
        options: [
          "n‚Üí‚àû, p‚Üí0, np‚ÜíŒª",
          "n‚Üí‚àû, p fixed",
          "n fixed, p‚Üí0",
          "n‚Üí‚àû, p‚Üí1",
        ],
        correctIndex: 0,
        rationale: "Classical rare-event limit.",
      },
      {
        question: "Uniform(a,b): P(c‚â§X‚â§d) equals",
        options: [
          "max(0, min(d,b)‚àímax(c,a))/(b‚àía)",
          "(d‚àíc)/(b‚àía) for any c,d",
          "(c‚àía)/(b‚àía)",
          "(b‚àíd)/(b‚àía)",
        ],
        correctIndex: 0,
        rationale: "Overlap length divided by width.",
      },
      {
        question: "Exponential(Œª) has which property?",
        options: [
          "Memoryless",
          "Increasing hazard only",
          "Finite support [0,1]",
          "Two parameters",
        ],
        correctIndex: 0,
        rationale: "h(x)=Œª constant; memoryless.",
      },
      {
        question: "If X1,‚Ä¶,Xk i.i.d. Exp(Œª), Œ£Xi ~",
        options: [
          "Gamma(k, Œª) (rate form)",
          "Normal(k/Œª, 1/Œª)",
          "Poisson(kŒª)",
          "Uniform(0,k/Œª)",
        ],
        correctIndex: 0,
        rationale: "Sum of exponentials is Gamma.",
      },
      {
        question: "Gamma(k, Œª) (rate) mean and variance are",
        options: [
          "k/Œª and k/Œª¬≤",
          "Œª/k and Œª¬≤/k",
          "kŒª and kŒª¬≤",
          "1/Œª and 1/Œª¬≤",
        ],
        correctIndex: 0,
        rationale: "Divide by rate; variance scales with 1/Œª¬≤.",
      },
      {
        question: "Normal(Œº,œÉ¬≤): P(X‚â§x) equals",
        options: [
          "Œ¶((x‚àíŒº)/œÉ)",
          "1‚àíŒ¶((x‚àíŒº)/œÉ)",
          "œÜ((x‚àíŒº)/œÉ)",
          "e^{‚àí(x‚àíŒº)¬≤/(2œÉ¬≤)}",
        ],
        correctIndex: 0,
        rationale: "cdf via z-standardization.",
      },
      {
        question: "Which captures the classical i.i.d. CLT?",
        options: [
          "(»≤‚àíŒº)/(œÉ/‚àön) ‚áí N(0,1)",
          "»≤ ‚áí N(Œº,œÉ¬≤) for all n",
          "Œ£Xi ‚áí Poisson",
          "(»≤‚àíŒº) ‚Üí 0 almost surely only",
        ],
        correctIndex: 0,
        rationale: "Standardized mean tends to Normal.",
      },
      {
        question: "Berry‚ÄìEsseen says the Kolmogorov distance error is ‚â≤",
        options: ["C¬∑œÅ3/(œÉ¬≥‚àön)", "1/n", "1/‚àö(log n)", "constant"],
        correctIndex: 0,
        rationale: "Convergence rate ~1/‚àön with 3rd absolute moment.",
      },
      {
        question: "Uniform(0,1) order stat: pdf of max(Ui) is",
        options: [
          "n x^{n‚àí1} on [0,1]",
          "x^n on [0,1]",
          "n(1‚àíx)^{n‚àí1} on [0,1]",
          "1 on [0,1]",
        ],
        correctIndex: 0,
        rationale: "Differentiate x^n.",
      },
      {
        question: "Independence for continuous X,Y means",
        options: [
          "f_{X,Y}(x,y)=f_X(x)f_Y(y) for all x,y",
          "E[XY]=E[X]E[Y]",
          "Cov(X,Y)=0",
          "F_{X|Y}(x|y)=F_X(x) for some y",
        ],
        correctIndex: 0,
        rationale: "Joint density factorizes.",
      },
      {
        question: "Law of total probability (discrete partition {A_i})",
        options: [
          "P(B)=‚àë_i P(B|A_i)P(A_i)",
          "P(B)=P(B|A)P(A)",
          "P(B)=‚àë_i P(A_i|B)",
          "P(B)=P(A‚à©B)/P(A)",
        ],
        correctIndex: 0,
        rationale: "Decompose over a partition.",
      },
      {
        question: "Bayes with prior P(A) and likelihoods: P(A|B)=",
        options: [
          "P(B|A)P(A)/P(B)",
          "P(A)/P(B)",
          "P(B|A)/P(A)",
          "P(B)/P(A)",
        ],
        correctIndex: 0,
        rationale: "Bayes‚Äô rule.",
      },
      {
        question: "Change of variables for monotone Y=g(X): f_Y(y)=",
        options: [
          "f_X(g^{-1}(y))¬∑|d g^{-1}/dy|",
          "f_X(y)/g'(y)",
          "f_X(g(y))¬∑g'(y)",
          "f_X(y)¬∑g'(y)",
        ],
        correctIndex: 0,
        rationale: "Jacobian for 1D monotone transform.",
      },
      {
        question: "If X~N(Œº,œÉ¬≤), then aX+b ~",
        options: [
          "N(aŒº+b, a¬≤œÉ¬≤)",
          "N(Œº, œÉ¬≤)+b",
          "N(a+b, œÉ¬≤)",
          "N(aŒº, œÉ¬≤+b¬≤)",
        ],
        correctIndex: 0,
        rationale: "Linear closure of Normal.",
      },
      {
        question: "For independent X,Y, Var(X+Y) equals",
        options: ["Var(X)+Var(Y)", "Var(X)+Var(Y)+2Cov", "Var(X)¬∑Var(Y)", "Var(X)/Var(Y)"],
        correctIndex: 0,
        rationale: "Cov=0 under independence.",
      },
      {
        question: "Poisson process: inter-arrival times are",
        options: [
          "Exponential(Œª)",
          "Gamma(k,Œª)",
          "Normal",
          "Uniform",
        ],
        correctIndex: 0,
        rationale: "Poisson ‚áî exponential gaps.",
      },
      {
        question: "Exponential hazard h(x) is",
        options: ["Constant Œª", "Increasing", "Decreasing", "U-shaped"],
        correctIndex: 0,
        rationale: "h(x)=Œª.",
      },
      {
        question: "Gamma(k,Œª) hazard is",
        options: [
          "‚Üì if k<1, const if k=1, ‚Üë if k>1",
          "Always constant",
          "Always decreasing",
          "Always increasing",
        ],
        correctIndex: 0,
        rationale: "Shape-controlled hazard.",
      },
      {
        question: "Which parent violates classical CLT?",
        options: ["Cauchy(0,1)", "Uniform(0,1)", "Exponential(1)", "Bernoulli(p)"],
        correctIndex: 0,
        rationale: "Infinite variance.",
      },
      {
        question: "Pareto(Œ±) (xm=1): CLT needs",
        options: ["Œ±>2", "Œ±>1", "Œ±>0", "never"],
        correctIndex: 0,
        rationale: "Finite variance requires Œ±>2.",
      },
      {
        question: "CDF-to-pdf relation for continuous X is",
        options: [
          "f(x)=dF/dx",
          "F(x)=df/dx",
          "f(x)=1‚àíF(x)",
          "F(x)=1/f(x)",
        ],
        correctIndex: 0,
        rationale: "Derivative of cdf yields pdf.",
      },
      {
        question: "Binomial mean and variance are",
        options: [
          "np and np(1‚àíp)",
          "p and p(1‚àíp)",
          "np and ‚àö{np(1‚àíp)}",
          "n and p",
        ],
        correctIndex: 0,
        rationale: "Standard formulas.",
      },
      {
        question: "Studentized mean (»≤‚àíŒº)/(S/‚àön) tends to",
        options: ["N(0,1)", "t_{n‚àí1} always", "Cauchy", "Uniform"],
        correctIndex: 0,
        rationale: "As n‚Üí‚àû, ‚Üí Normal; exact t only if Normal parent.",
      },
      {
        question: "Finite population correction (SRSWOR) multiplies SE by",
        options: [
          "‚àö((N‚àín)/(N‚àí1))",
          "‚àö(N/(N‚àín))",
          "n/N",
          "1/(N‚àín)",
        ],
        correctIndex: 0,
        rationale: "Classic FPC.",
      },
      {
        question: "Normal 68‚Äì95‚Äì99.7 rule refers to",
        options: [
          "¬±1œÉ, ¬±2œÉ, ¬±3œÉ coverages",
          "Quartiles",
          "Skewness levels",
          "MGF behavior",
        ],
        correctIndex: 0,
        rationale: "Empirical coverage rule.",
      },
      {
        question: "Binomial proportion \\hat p is approx Normal when",
        options: [
          "np and n(1‚àíp) are both ‚Äònot small‚Äô (‚âà‚â•10)",
          "n‚â•5 regardless of p",
          "p‚â•0.5",
          "Only if n is even",
        ],
        correctIndex: 0,
        rationale: "Avoid sparse tails.",
      },
      {
        question: "Poisson(Œª) probability of k events is",
        options: [
          "e^{‚àíŒª} Œª^k / k!",
          "C(n,k) p^k(1‚àíp)^{n‚àík}",
          "(x‚àía)/(b‚àía)",
          "Œª e^{‚àíŒªx}",
        ],
        correctIndex: 0,
        rationale: "Poisson pmf.",
      },
      {
        question: "Uniform(a,b) mean/variance are",
        options: [
          "(a+b)/2 and (b‚àía)^2/12",
          "(a+b)/2 and b‚àía",
          "a and b‚àía",
          "0 and 1",
        ],
        correctIndex: 0,
        rationale: "Classical identities.",
      },
      {
        question: "Which is the correct Normal pdf?",
        options: [
          "(1/(œÉ‚àö(2œÄ))) e^{‚àí(x‚àíŒº)^2/(2œÉ^2)}",
          "Œª e^{‚àíŒªx}, x‚â•0",
          "1/(b‚àía), a‚â§x‚â§b",
          "(1/‚àö(2œÄ)) e^{‚àíx^2/2}, x‚â•0",
        ],
        correctIndex: 0,
        rationale: "General Normal; option 4 is standard Normal but over ‚Ñù (not only x‚â•0).",
      },
      {
        question: "Order stats: for U(0,1), min(Ui) pdf is",
        options: [
          "n(1‚àíx)^{n‚àí1}",
          "n x^{n‚àí1}",
          "1",
          "x^n",
        ],
        correctIndex: 0,
        rationale: "Differentiate 1‚àí(1‚àíx)^n.",
      },
      {
        question: "Gamma scale vs rate: if rate is Œª, scale Œ∏ equals",
        options: ["1/Œª", "Œª", "k/Œª", "Œª/k"],
        correctIndex: 0,
        rationale: "Œ∏=1/Œª.",
      },
      {
        question: "For Exponential(Œª), median is",
        options: ["(ln 2)/Œª", "1/Œª", "Œª", "‚àöŒª"],
        correctIndex: 0,
        rationale: "Solve 1‚àíe^{‚àíŒªm}=0.5.",
      },
      {
        question: "Sums of independent Normals X+Y is Normal because of",
        options: [
          "Closure of the Normal family",
          "CLT only",
          "Bayes rule",
          "Poisson limit",
        ],
        correctIndex: 0,
        rationale: "Exact closure, not only asymptotic.",
      },
      {
        question: "MGF of Poisson(Œª) is",
        options: [
          "exp(Œª(e^t‚àí1))",
          "(Œª/(Œª‚àít))^k",
          "1/(1‚àít)",
          "exp(Œºt+¬ΩœÉ¬≤t¬≤)",
        ],
        correctIndex: 0,
        rationale: "Useful for proving addition of Poissons.",
      },
    ],
    []
  );

  // 30-question randomized subset for ‚ÄúExam Mode‚Äù
  const [examSeed, setExamSeed] = useState(42);
  const examQuestions = useMemo(() => {
    const arr = [...fullQuestions];
    // Fisher‚ÄìYates shuffle based on a simple seeded PRNG (LCG) for reproducibility
    let seed = examSeed >>> 0;
    const rand = () => {
      seed = (1664525 * seed + 1013904223) >>> 0;
      return seed / 2 ** 32;
    };
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(rand() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr.slice(0, 30);
  }, [fullQuestions, examSeed]);

  // Flashcards recap deck (broad coverage)
  const flashcards = useMemo(
    () => [
      { front: "Bernoulli", back: "E=p, Var=p(1‚àíp)" },
      { front: "Binomial pmf", back: "C(n,k)p^k(1‚àíp)^{n‚àík}" },
      { front: "Geom mean", back: "1/p (trials-to-first-success)" },
      { front: "NegBin mean", back: "r/p (trials-to-rth-success)" },
      { front: "Poisson", back: "E=Var=Œª; P(k)=e^{‚àíŒª}Œª^k/k!" },
      { front: "Uniform", back: "E=(a+b)/2; Var=(b‚àía)^2/12" },
      { front: "Exp(Œª)", back: "E=1/Œª; memoryless" },
      { front: "Gamma(k,Œª)", back: "E=k/Œª; Var=k/Œª¬≤; sum of Exp" },
      { front: "Normal", back: "z=(x‚àíŒº)/œÉ; 68‚Äì95‚Äì99.7" },
      { front: "CLT", back: "(»≤‚àíŒº)/(œÉ/‚àön) ‚áí N(0,1)" },
      { front: "Transform", back: "f_Y(y)=f_X(g^{-1}(y))|d g^{-1}/dy|" },
      { front: "Order stats", back: "max U(0,1): f(x)=n x^{n‚àí1}" },
      { front: "Thinning", back: "Pois(Œª)‚ÜíPois(qŒª)" },
      { front: "Min of Exp", back: "min Exp(Œª_i) ~ Exp(‚àëŒª_i)" },
      { front: "Gamma‚Äìœá¬≤", back: "œá¬≤_ŒΩ = Gamma(ŒΩ/2, Œ∏=2)" },
      { front: "FPC", back: "SE √ó ‚àö((N‚àín)/(N‚àí1))" },
    ],
    []
  );

  const [mode, setMode] = useState("full"); // 'full' | 'exam'

  return (
    <>
      <AppHeaderMini
        tutorialSlug="introduction-to-probability-distribution"
        sectionId="practice"
        sectionTitle="Practice"
      />

      <main className="mx-auto w-full max-w-6xl px-4 sm:px-6">
        {/* Title */}
        <div className="py-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight">
            Probability ‚Äî Practice & Exam
          </h1>
          <p className="mt-2 text-slate-700 max-w-3xl">
            Short exercises with solutions, plus a comprehensive multiple-choice exam that covers the whole tutorial.
          </p>
        </div>

        {/* Content + TOC layout */}
        <div className="grid grid-cols-1 gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
          {/* Content */}
          <article ref={contentRef} className="min-w-0 space-y-10">
            {/* A. Exercises (markdown) */}
            <section aria-labelledby="exercises">
              <h2 id="exercises" className="text-xl font-bold text-slate-900">
                A. Exercises (with solutions)
              </h2>
              <RichMarkdown content={practiceMd} />
            </section>

            {/* B. Exam MCQ */}
            <section aria-labelledby="exam" className="space-y-4">
              <div className="flex items-center justify-between gap-3 flex-wrap">
                <h2 id="exam" className="text-xl font-bold text-slate-900">
                  B. Exam-Length MCQ
                </h2>
                <div className="flex items-center gap-2">
                  <label className="text-sm text-slate-700">Mode:</label>
                  <div className="inline-flex rounded-md border border-slate-300 overflow-hidden">
                    <button
                      onClick={() => setMode("full")}
                      className={`px-3 py-1.5 text-sm ${mode === "full" ? "bg-slate-100 font-semibold" : "bg-white"}`}
                      title="Use the full 40-question bank"
                    >
                      Full (40Q)
                    </button>
                    <button
                      onClick={() => setMode("exam")}
                      className={`px-3 py-1.5 text-sm ${mode === "exam" ? "bg-slate-100 font-semibold" : "bg-white"}`}
                      title="Random 30-question exam subset"
                    >
                      Exam Mode (30Q)
                    </button>
                  </div>
                  {mode === "exam" && (
                    <div className="flex items-center gap-2">
                      <label className="text-sm text-slate-700">Seed</label>
                      <input
                        type="number"
                        value={examSeed}
                        onChange={(e) => setExamSeed(Number(e.target.value) || 0)}
                        className="w-24 rounded-md border border-slate-300 px-2 py-1 text-sm"
                        title="Change to reshuffle the 30Q subset"
                      />
                    </div>
                  )}
                </div>
              </div>

              <div className="rounded-xl border border-slate-200 bg-white p-4">
                <QuizMCQ
                  questions={mode === "full" ? fullQuestions : examQuestions}
                  storageNamespace={`quiz:practice:${mode}`}
                />
              </div>
            </section>

            {/* C. Flashcards Recap */}
            <section aria-labelledby="recap" className="space-y-3">
              <h2 id="recap" className="text-xl font-bold text-slate-900">
                C. Flashcards ‚Äî Rapid Recap
              </h2>
              <p className="text-sm text-slate-700">
                Cycle through these to cement formulas and relationships before (or after) the exam.
              </p>
              <Flashcards deck={flashcards} />
            </section>

            {/* Bottom nav */}
            <nav className="mt-6 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
              <div className="flex gap-3">
                <Link
                  to="/tutorials/introduction-to-probability-distribution/continuous/clt"
                  className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
                >
                  ‚Üê CLT
                </Link>
                <Link
                  to="/tutorials/introduction-to-probability-distribution"
                  className="inline-flex items-center rounded-md border border-slate-300 px-3 py-2 text-sm font-medium text-slate-700 hover:bg-slate-50"
                >
                  Probability Home ‚Üí
                </Link>
              </div>
              <button
                onClick={() => window.print()}
                className="inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
                title="Open print dialog (you can save as PDF)"
              >
                Print / Save as PDF
              </button>
            </nav>
          </article>

          {/* On This Page sidebar */}
          <aside className="hidden lg:block">
            <div className="sticky top-24 rounded-xl border border-slate-200 bg-white p-4">
              <div className="text-xs font-semibold uppercase tracking-wide text-slate-500">
                On this page
              </div>
              <ul className="mt-3 space-y-2 text-sm">
                {toc.map((item) => (
                  <li key={item.id} className={item.level === 3 ? "ml-3" : ""}>
                    <a
                      href={`#${item.id}`}
                      onClick={(e) => {
                        e.preventDefault();
                        const target = document.getElementById(item.id);
                        if (target) {
                          target.scrollIntoView({ behavior: "smooth", block: "start" });
                          history.replaceState(null, "", `#${item.id}`);
                        }
                      }}
                      className="text-slate-700 hover:text-slate-900 hover:underline"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>

              <div className="mt-4 pt-4 border-t border-slate-200">
                <button
                  onClick={() => window.print()}
                  className="w-full rounded-md border border-slate-300 px-3 py-2 text-xs font-medium text-slate-700 hover:bg-slate-50"
                >
                  Print / Save as PDF
                </button>
              </div>
            </div>
          </aside>
        </div>
      </main>

      <AppFooterMini />
    </>
  );
}


================================================================================
üìÑ File: src\tutorials\shell\Shell.jsx
================================================================================

// FILE: src/components/Shell.jsx
import React, { useMemo } from "react";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import AppHeaderMini from "./AppHeaderMini";
import AppFooterMini from "./AppFooterMini";
import { TUTORIALS } from "../data/tutorials";
import { ChevronLeft, ChevronRight, Check } from "lucide-react";

const PROGRESS_KEY = "tutorial_progress";

function safeParse(json, fallback) { try { return json ? JSON.parse(json) : fallback; } catch { return fallback; } }

function updateProgress({ slug, sectionId, sectionTitle, totalSections }) {
  if (!slug) return;
  const store = safeParse(localStorage.getItem(PROGRESS_KEY), {});
  const cur = store[slug] || { sectionsCompleted: [], totalSections: totalSections || undefined };
  const set = new Set(Array.isArray(cur.sectionsCompleted) ? cur.sectionsCompleted : []);
  if (sectionId) set.add(sectionId);
  const updated = {
    ...cur,
    sectionsCompleted: Array.from(set),
    lastSectionId: sectionId || cur.lastSectionId || null,
    lastSectionTitle: sectionTitle || cur.lastSectionTitle || null,
    updatedAt: Date.now(),
  };
  store[slug] = updated;
  store.__lastVisited__ = { slug, sectionId: updated.lastSectionId, sectionTitle: updated.lastSectionTitle, visitedAt: Date.now() };
  localStorage.setItem(PROGRESS_KEY, JSON.stringify(store));
}

export default function Shell({
  children,
  className = "",
  tutorialSlug: propSlug,
  sections: propSections, // [{id/slug, title}]
  currentSectionId: propSectionId,
  currentSectionTitle: propSectionTitle,
  onNavigateSection, // (nextId) => void, optional
}) {
  const { slug: routeSlug } = useParams();
  const loc = useLocation();
  const navigate = useNavigate();
  const slug = propSlug || routeSlug || null;

  const tutorial = useMemo(() => (slug ? TUTORIALS.find(t => t.slug === slug) : null), [slug]);
  const sections = useMemo(() => {
    const fromProps = propSections && propSections.length ? propSections : (tutorial?.sections || []);
    return fromProps.map((s, idx) => ({
      id: s.id || s.slug || String(idx),
      title: s.title || s.name || `Section ${idx + 1}`,
    }));
  }, [propSections, tutorial]);

  const urlSection = new URLSearchParams(loc.search).get("section") || (loc.hash ? loc.hash.replace(/^#/, "") : null);
  const currentId = propSectionId || urlSection || (sections[0]?.id || null);
  const currentIndex = Math.max(0, sections.findIndex(s => s.id === currentId));
  const currentTitle = propSectionTitle || sections[currentIndex]?.title || null;

  const prev = currentIndex > 0 ? sections[currentIndex - 1] : null;
  const next = currentIndex < sections.length - 1 ? sections[currentIndex + 1] : null;

  const goSection = (target) => {
    if (!target) return;
    if (typeof onNavigateSection === "function") {
      onNavigateSection(target.id);
    } else if (slug) {
      // Fallback: prefer query param if supported by your pages; otherwise use hash
      const sp = new URLSearchParams(loc.search);
      sp.set("section", target.id);
      navigate({ pathname: `/tutorials/${slug}`, search: `?${sp.toString()}` }, { replace: false });
      // Also set hash for pages that rely on it
      setTimeout(() => { try { window.location.hash = target.id; } catch {} }, 0);
    }
  };

  const markCompleteAndNext = () => {
    updateProgress({ slug, sectionId: currentId, sectionTitle: currentTitle, totalSections: sections.length });
    if (next) goSection(next);
  };

  return (
    <div className={`min-h-screen bg-gray-50 ${className}`}>
      <AppHeaderMini tutorialSlug={slug} sectionId={currentId} sectionTitle={currentTitle} />

      <main className="mx-auto w-full max-w-6xl px-4 py-6 sm:px-6">
        <div className="mb-6 rounded-xl border border-gray-200 bg-white p-4 shadow-sm">
          {children}
        </div>

        {/* Prev/Next nav */}
        <nav className="mt-4 flex flex-wrap items-center justify-between gap-3">
          <div>
            {prev ? (
              <button
                onClick={() => goSection(prev)}
                className="inline-flex items-center gap-1 rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-800 hover:bg-gray-50"
              >
                <ChevronLeft className="h-4 w-4" /> {prev.title}
              </button>
            ) : (
              <span className="text-xs text-gray-400">Start</span>
            )}
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={() => updateProgress({ slug, sectionId: currentId, sectionTitle: currentTitle, totalSections: sections.length })}
              className="inline-flex items-center gap-1 rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
              title="Mark this section complete"
            >
              <Check className="h-4 w-4" /> Mark complete
            </button>
            {next ? (
              <button
                onClick={markCompleteAndNext}
                className="inline-flex items-center gap-1 rounded-lg bg-blue-600 px-3 py-2 text-sm font-semibold text-white hover:bg-blue-700"
              >
                Next <ChevronRight className="h-4 w-4" />
              </button>
            ) : (
              <span className="text-xs text-gray-400">End</span>
            )}
          </div>
        </nav>
      </main>

      <AppFooterMini />
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\shell\components\AppFooterMini.jsx
================================================================================

// FILE: src/components/AppFooterMini.jsx
import React from "react";

export default function AppFooterMini({ className = "" }) {
  return (
    <footer className={`mt-10 border-t border-gray-200 bg-white ${className}`}>
      <div className="mx-auto w-full max-w-6xl px-4 py-6 text-xs text-gray-500 sm:px-6">
        <div className="flex flex-wrap items-center justify-between gap-2">
          <div>¬© {new Date().getFullYear()} Hugo Martins ‚Äî Tutorials</div>
          <div className="flex items-center gap-3">
            <a href="/about" className="hover:underline">About</a>
            <a href="/contact" className="hover:underline">Contact</a>
            <a href="/tutorials" className="hover:underline">All Tutorials</a>
          </div>
        </div>
      </div>
    </footer>
  );
}


================================================================================
üìÑ File: src\tutorials\shell\components\AppHeaderMini.jsx
================================================================================

// FILE: src/components/AppHeaderMini.jsx
import React, { useMemo } from "react";
import { Link, useParams } from "react-router-dom";
import tutorials from "../../tutorialsIndex";
const TUTORIALS = tutorials;

/**
 * Breadcrumbs with NO progress/memory dependence.
 * Pass tutorialSlug and optional sectionTitle from each page.
 */
function useBreadcrumbs({ tutorialSlug: propSlug, sectionTitle: propSectionTitle }) {
  const { slug: routeSlug } = useParams();
  const slug = propSlug || routeSlug || null;

  const tutorial = useMemo(
    () => (slug ? TUTORIALS.find((t) => t.slug === slug) : null),
    [slug]
  );

  const sectionTitle = propSectionTitle || null;

  return {
    items: [
      { label: "Tutorials", to: "/tutorials" },
      tutorial ? { label: tutorial.title, to: `/tutorials/${tutorial.slug}` } : null,
      sectionTitle ? { label: sectionTitle } : null,
    ].filter(Boolean),
  };
}

export default function AppHeaderMini({ tutorialSlug, sectionTitle, className = "" }) {
  const { items } = useBreadcrumbs({ tutorialSlug, sectionTitle });

  return (
    <header className={`sticky top-0 z-40 w-full border-b border-gray-200 bg-white/95 backdrop-blur ${className}`}>
      <div className="mx-auto flex w-full max-w-6xl items-center justify-between px-4 py-3 sm:px-6">
        <div className="min-w-0 flex-1">
          <nav aria-label="Breadcrumb" className="truncate">
            <ol className="flex items-center gap-2 text-sm text-gray-600">
              {items.map((it, i) => (
                <li key={i} className="flex items-center gap-2">
                  {it.to ? (
                    <Link to={it.to} className="truncate hover:text-gray-900 hover:underline">
                      {it.label}
                    </Link>
                  ) : (
                    <span className="truncate text-gray-900 font-medium">{it.label}</span>
                  )}
                  {i < items.length - 1 && <span className="text-gray-300">/</span>}
                </li>
              ))}
            </ol>
          </nav>
        </div>
        <div className="flex shrink-0 items-center gap-4 text-xs">
          <Link to="/" className="font-medium text-gray-500 hover:text-gray-900">Back to Blog</Link>
          <Link to="/tutorials" className="font-medium text-gray-500 hover:text-gray-900">All Tutorials</Link>
        </div>
      </div>
    </header>
  );
}



================================================================================
üìÑ File: src\tutorials\shell\components\Callout.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Info, AlertTriangle, Lightbulb, Sigma, AlertOctagon, ChevronDown, ChevronUp, Check } from "lucide-react";

const PROGRESS_KEY = "tutorial_progress";

function safeParse(json, fallback) {
  try {
    return json ? JSON.parse(json) : fallback;
  } catch {
    return fallback;
  }
}

function updateProgress({ slug, sectionId, sectionTitle, totalSections }) {
  if (!slug) return;
  const store = safeParse(localStorage.getItem(PROGRESS_KEY), {});
  const cur = store[slug] || { sectionsCompleted: [], totalSections: totalSections || undefined };
  const set = new Set(Array.isArray(cur.sectionsCompleted) ? cur.sectionsCompleted : []);
  if (sectionId) set.add(sectionId);
  const updated = {
    ...cur,
    sectionsCompleted: Array.from(set),
    lastSectionId: sectionId || cur.lastSectionId || null,
    lastSectionTitle: sectionTitle || cur.lastSectionTitle || null,
    updatedAt: Date.now(),
  };
  store[slug] = updated;
  // also set last visited pointer
  store.__lastVisited__ = {
    slug,
    sectionId: updated.lastSectionId,
    sectionTitle: updated.lastSectionTitle,
    visitedAt: Date.now(),
  };
  localStorage.setItem(PROGRESS_KEY, JSON.stringify(store));
}

const THEMES = {
  info: {
    label: "Information",
    icon: Info,
    border: "border-blue-200",
    bg: "bg-blue-50",
    text: "text-blue-900",
    iconColor: "text-blue-700",
    ring: "focus-visible:ring-blue-600",
    divider: "border-blue-200",
  },
  warn: {
    label: "Warning",
    icon: AlertTriangle,
    border: "border-amber-200",
    bg: "bg-amber-50",
    text: "text-amber-900",
    iconColor: "text-amber-700",
    ring: "focus-visible:ring-amber-600",
    divider: "border-amber-200",
  },
  idea: {
    label: "Key idea",
    icon: Lightbulb,
    border: "border-violet-200",
    bg: "bg-violet-50",
    text: "text-violet-900",
    iconColor: "text-violet-700",
    ring: "focus-visible:ring-violet-600",
    divider: "border-violet-200",
  },
  proof: {
    label: "Proof",
    icon: Sigma,
    border: "border-emerald-200",
    bg: "bg-emerald-50",
    text: "text-emerald-900",
    iconColor: "text-emerald-700",
    ring: "focus-visible:ring-emerald-600",
    divider: "border-emerald-200",
  },
  pitfall: {
    label: "Common pitfall",
    icon: AlertOctagon,
    border: "border-rose-200",
    bg: "bg-rose-50",
    text: "text-rose-900",
    iconColor: "text-rose-700",
    ring: "focus-visible:ring-rose-600",
    divider: "border-rose-200",
  },
};

/**
 * Callout component
 *
 * Props:
 * - variant: 'info' | 'warn' | 'idea' | 'proof' | 'pitfall' (default: 'info')
 * - title?: string (optional heading; falls back to variant label)
 * - children: ReactNode (callout content)
 * - actionLabel?: string (shows a single bottom action row when provided)
 * - onAction?: () => void (optional custom handler)
 * - actionKey?: string (if provided and onAction not set, sets localStorage flag `callout:<key>:done`)
 * - progress?: { slug: string; sectionId?: string; sectionTitle?: string; totalSections?: number }
 *       When provided, clicking the action updates consolidated progress under `tutorial_progress`.
 * - defaultCollapsedLines?: number (default 4)
 * - allowCollapse?: boolean (default true)
 * - startCollapsed?: boolean (default true)
 * - className?: string
 */
export default function Callout({
  variant = "info",
  title,
  children,
  actionLabel,
  onAction,
  actionKey,
  progress,
  defaultCollapsedLines = 4,
  allowCollapse = true,
  startCollapsed = true,
  className = "",
}) {
  const theme = THEMES[variant] || THEMES.info;
  const Icon = theme.icon;

  const contentRef = useRef(null);
  const [collapsed, setCollapsed] = useState(startCollapsed && allowCollapse);
  const [exceeds, setExceeds] = useState(false);
  const [maxHeight, setMaxHeight] = useState(undefined);
  const [didAction, setDidAction] = useState(false);

  useEffect(() => {
    if (!contentRef.current) return;
    const el = contentRef.current;
    const styles = window.getComputedStyle(el);
    const lineHeightStr = styles.lineHeight;
    let lineHeight = parseFloat(lineHeightStr);
    if (!Number.isFinite(lineHeight)) {
      // Fallback if `normal` or couldn't parse
      lineHeight = 24;
    }
    const maxH = lineHeight * defaultCollapsedLines;
    setMaxHeight(maxH);

    // Measure if content exceeds the collapse threshold
    const ro = new ResizeObserver(() => {
      const tooTall = el.scrollHeight > maxH + 1; // +1 to account for rounding
      setExceeds(tooTall);
    });
    ro.observe(el);
    return () => ro.disconnect();
  }, [defaultCollapsedLines]);

  const ariaLabel = useMemo(() => title || theme.label, [title, theme.label]);

  const handleAction = () => {
    try {
      if (onAction) onAction();
      else if (actionKey) localStorage.setItem(`callout:${actionKey}:done`, "1");
      if (progress && progress.slug) updateProgress(progress);
      setDidAction(true);
    } catch {
      // swallow errors silently; this is a best-effort UX feature
    }
  };

  const containerCls = `${theme.bg} ${theme.border} ${theme.text} ${className} relative w-full rounded-xl border`;
  const headerIconCls = `${theme.iconColor}`;
  const actionBtnCls = `inline-flex items-center gap-1 rounded-lg border px-3 py-1.5 text-sm font-medium shadow-sm ${theme.ring} ${theme.border} bg-white/70 text-gray-900 hover:bg-white`;

  return (
    <section role="note" aria-label={ariaLabel} className={containerCls}>
      {/* Header */}
      <div className="flex items-start gap-3 p-4">
        <div className="mt-0.5">
          <Icon className={`h-5 w-5 ${headerIconCls}`} aria-hidden="true" />
        </div>
        <div className="min-w-0 flex-1">
          <h4 className="text-sm font-semibold leading-6">
            {title || theme.label}
          </h4>
          {/* Body */}
          <div
            ref={contentRef}
            className={`mt-1 text-sm/6 text-gray-800`}
            style={collapsed && exceeds ? { maxHeight, overflow: "hidden" } : undefined}
          >
            {children}
          </div>

          {/* Collapse / Expand control */}
          {allowCollapse && exceeds && (
            <div className="mt-1">
              <button
                type="button"
                onClick={() => setCollapsed((v) => !v)}
                className={`inline-flex items-center gap-1 text-xs font-medium underline-offset-2 hover:underline ${theme.iconColor}`}
                aria-expanded={!collapsed}
              >
                {collapsed ? (
                  <>
                    <ChevronDown className="h-3.5 w-3.5" aria-hidden="true" />
                    Expand details
                  </>
                ) : (
                  <>
                    <ChevronUp className="h-3.5 w-3.5" aria-hidden="true" />
                    Collapse
                  </>
                )}
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Action line */}
      {actionLabel && (
        <div className={`flex items-center justify-between gap-3 border-t px-4 py-2 ${theme.divider}`}>
          <div className="text-xs text-gray-700">Quick action</div>
          <div className="flex items-center gap-2">
            {didAction && (
              <span className="inline-flex items-center gap-1 rounded-full bg-white/70 px-2 py-0.5 text-[11px] font-medium text-gray-800">
                <Check className="h-3.5 w-3.5" /> Saved
              </span>
            )}
            <button type="button" onClick={handleAction} className={actionBtnCls}>
              {actionLabel}
            </button>
          </div>
        </div>
      )}
    </section>
  );
}

export function PopNote({ label, children }) {
  return <Callout type="idea" title={label}>{children}</Callout>;
}

================================================================================
üìÑ File: src\tutorials\shell\components\Flashcards.jsx
================================================================================

import React, { useCallback, useEffect, useMemo, useRef, useState } from "react";

/**
 * Flashcards ‚Äî session-based practice with simple re-queueing.
 *
 * Works with either prop name: `deck` (preferred) or legacy `cards`.
 * A card can be:
 *   - { id?, front, back }
 *   - [front, back]
 *   - string (front only)
 *
 * Features:
 *  - Flip (click card / Space). Prev/Next (‚Üê/‚Üí). Rate Again/Hard/Easy (1/2/3)
 *  - Re-queue: Again ‚Üí soon, Hard ‚Üí later, Easy ‚Üí end of queue
 *  - Shuffle & Reverse toggles (persisted to localStorage)
 *  - Progress: "Card X of N ‚Ä¢ Y in a row"
 *  - "Add to deck" integration: dispatch `flashcards:add` with { front, back }
 *  - Safe against infinite update loops (no default [] prop; guarded effects)
 */

const LS_PREFIX = "flashcards:";
const LS_SHUFFLE = `${LS_PREFIX}shuffle`;
const LS_REVERSE = `${LS_PREFIX}reverse`;
const LS_HELP = `${LS_PREFIX}helper_shown`;

function Toggle({ active, onClick, children }) {
  return (
    <button
      type="button"
      onClick={onClick}
      className={`inline-flex items-center rounded-full border px-3 py-1 text-xs font-medium transition-colors ${
        active ? "border-blue-600 bg-blue-50 text-blue-700" : "border-gray-200 bg-white text-gray-700 hover:bg-gray-50"
      }`}
    >
      {children}
    </button>
  );
}

function shuffle(arr) {
  const a = arr.slice();
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

export default function Flashcards({ deck: deckProp, cards, title, className = "" }) {
  // Normalise input (accept either `deck` or legacy `cards`). Avoid default [] that changes identity.
  const baseCards = useMemo(() => {
    const raw = Array.isArray(deckProp) ? deckProp : Array.isArray(cards) ? cards : [];
    const normal = raw.map((c) =>
      typeof c === "string"
        ? { front: c, back: "" }
        : Array.isArray(c)
        ? { front: c[0], back: c[1] ?? "" }
        : c || { front: "", back: "" }
    );
    return normal.map((c, i) => ({ id: c.id || `card-${i}`, front: c.front, back: c.back }));
  }, [deckProp, cards]);

  // Toggles (persisted)
  const [shuffleOn, setShuffleOn] = useState(() => localStorage.getItem(LS_SHUFFLE) === "1");
  const [reverse, setReverse] = useState(() => localStorage.getItem(LS_REVERSE) === "1");
  const [showHelper, setShowHelper] = useState(() => localStorage.getItem(LS_HELP) !== "1");

  useEffect(() => { localStorage.setItem(LS_SHUFFLE, shuffleOn ? "1" : "0"); }, [shuffleOn]);
  useEffect(() => { localStorage.setItem(LS_REVERSE, reverse ? "1" : "0"); }, [reverse]);

  // Build id‚Üícard map and initial queue exactly once per (cards, shuffleOn)
  const [cardsMap, setCardsMap] = useState(() => new Map());
  const [queue, setQueue] = useState([]);
  const [currentId, setCurrentId] = useState(null);

  useEffect(() => {
    // Re-initialise session when source deck or shuffle changes
    const map = new Map();
    baseCards.forEach((c) => map.set(c.id, c));
    const ids = baseCards.map((c) => c.id);
    const ordered = shuffleOn ? shuffle(ids) : ids;
    setCardsMap(map);
    setQueue(ordered.slice(1)); // everything except first
    setCurrentId(ordered[0] || null);
    setFlipped(false);
    setStreak(0);
    setSeen(new Set(ordered[0] ? [ordered[0]] : []));
    setHistory([]);
  }, [baseCards, shuffleOn]);

  // Interaction state
  const [flipped, setFlipped] = useState(false);
  const [streak, setStreak] = useState(0);
  const [seen, setSeen] = useState(() => new Set()); // unique cards seen this session
  const [history, setHistory] = useState([]); // back stack of ids

  const current = currentId ? cardsMap.get(currentId) : null;
  const total = cardsMap.size;
  const progressIndex = Math.min(Math.max(1, seen.size), Math.max(1, total));

  const content = useMemo(() => {
    if (!current) return null;
    const front = reverse ? current.back : current.front;
    const back = reverse ? current.front : current.back;
    return flipped ? back : front;
  }, [current, reverse, flipped]);

  // Helpers
  const goTo = useCallback((id, { pushHistory = true } = {}) => {
    if (!id) return;
    if (pushHistory && currentId) setHistory((h) => h.concat(currentId));
    setCurrentId(id);
    setFlipped(false);
    setSeen((s) => (s.has(id) ? s : new Set(s).add(id)));
  }, [currentId]);

  const nextFromQueue = useCallback(() => {
    setQueue((q) => {
      const nextId = q[0];
      const rest = q.slice(1);
      if (nextId) goTo(nextId, { pushHistory: true });
      return rest;
    });
  }, [goTo]);

  const requeueAt = useCallback((id, indexFromFront) => {
    setQueue((q) => {
      const idx = Math.max(0, Math.min(indexFromFront, q.length));
      const copy = q.slice();
      copy.splice(idx, 0, id);
      return copy;
    });
  }, []);

  const rate = useCallback((level) => {
    if (!currentId) return;
    setStreak((s) => (level === "easy" ? s + 1 : 0));
    if (level === "again") requeueAt(currentId, Math.min(2, queue.length));
    else if (level === "hard") requeueAt(currentId, Math.min(4, queue.length));
    else if (level === "easy") requeueAt(currentId, queue.length);
    nextFromQueue();
  }, [currentId, queue.length, requeueAt, nextFromQueue]);

  const next = useCallback(() => {
    if (!currentId) return;
    // neutral skip ‚Üí push to end
    requeueAt(currentId, queue.length);
    nextFromQueue();
  }, [currentId, queue.length, requeueAt, nextFromQueue]);

  const prev = useCallback(() => {
    setHistory((h) => {
      if (h.length === 0) return h;
      const copy = h.slice();
      const prevId = copy.pop();
      if (currentId) setQueue((q) => [currentId, ...q.filter((id) => id !== prevId)]);
      goTo(prevId, { pushHistory: false });
      return copy;
    });
  }, [currentId, goTo]);

  // Keyboard shortcuts (bind only when there are cards)
  const onKeyDown = useCallback((e) => {
    const tag = (e.target && e.target.tagName) || "";
    if (/INPUT|TEXTAREA|SELECT/.test(tag)) return;
    if (e.key === " ") { e.preventDefault(); setFlipped((f) => !f); }
    else if (e.key === "ArrowRight") { e.preventDefault(); next(); }
    else if (e.key === "ArrowLeft") { e.preventDefault(); prev(); }
    else if (e.key === "1") { e.preventDefault(); rate("again"); }
    else if (e.key === "2") { e.preventDefault(); rate("hard"); }
    else if (e.key === "3") { e.preventDefault(); rate("easy"); }
  }, [next, prev, rate]);

  useEffect(() => {
    if (baseCards.length === 0) return;
    window.addEventListener("keydown", onKeyDown);
    return () => window.removeEventListener("keydown", onKeyDown);
  }, [onKeyDown, baseCards.length]);

  // Add-from-content event (append new card into this session)
  useEffect(() => {
    function onAdd(e) {
      const { front, back } = (e && e.detail) || {};
      if (!front && !back) return;
      const id = `custom-${Date.now()}-${Math.floor(Math.random() * 1e6)}`;
      setCardsMap((prev) => new Map(prev).set(id, { id, front: String(front || ""), back: String(back || "") }));
      setQueue((prev) => prev.concat(id));
      if (!currentId) setCurrentId(id);
    }
    window.addEventListener("flashcards:add", onAdd);
    return () => window.removeEventListener("flashcards:add", onAdd);
  }, [currentId]);

  // UI
  return (
    <div className={`mx-auto w-full max-w-3xl ${className}`}>
      <div className="mb-3 flex items-center justify-between gap-3">
        <div className="min-w-0">
          {title && <h3 className="truncate text-base font-semibold text-gray-900">{title}</h3>}
          <div className="text-xs text-gray-500">Space=flip ‚Ä¢ ‚Üê/‚Üí=prev/next ‚Ä¢ 1/2/3=Again/Hard/Easy</div>
        </div>
        <div className="flex items-center gap-2">
          <Toggle active={shuffleOn} onClick={() => setShuffleOn((v) => !v)}>Shuffle</Toggle>
          <Toggle active={reverse} onClick={() => setReverse((v) => !v)}>Reverse</Toggle>
        </div>
      </div>

      {showHelper && (
        <div className="mb-3 rounded-lg border border-amber-200 bg-amber-50 px-3 py-2 text-xs text-amber-900">
          Tip: rate with 1/2/3. <button onClick={() => { localStorage.setItem(LS_HELP, "1"); setShowHelper(false); }} className="ml-2 underline">Got it</button>
        </div>
      )}

      {baseCards.length === 0 && (
        <div className="rounded-md border border-gray-200 bg-white p-4 text-sm text-gray-600">No cards yet.</div>
      )}

      {current && (
        <div
          role="button"
          tabIndex={0}
          aria-label="Flashcard"
          onClick={() => setFlipped((f) => !f)}
          onKeyDown={(e) => { if (e.key === "Enter") setFlipped((f) => !f); }}
          className="relative mb-3 min-h-[200px] cursor-pointer select-none rounded-2xl border border-gray-200 bg-white p-6 text-center shadow-sm transition-transform hover:shadow-md"
        >
          <div className="mx-auto max-w-prose text-gray-900">{content}</div>
          <div className="pointer-events-none absolute bottom-2 right-3 text-[10px] uppercase tracking-wide text-gray-400">{flipped ? "Back" : "Front"}</div>
        </div>
      )}

      {/* Rating buttons */}
      <div className="mb-3 grid grid-cols-3 gap-2">
        <button onClick={() => rate("again")} className="rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-800 hover:bg-gray-50">
          Again <span className="ml-1 text-[10px] text-gray-500">[1]</span>
        </button>
        <button onClick={() => rate("hard")} className="rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-800 hover:bg-gray-50">
          Hard <span className="ml-1 text-[10px] text-gray-500">[2]</span>
        </button>
        <button onClick={() => rate("easy")} className="rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-800 hover:bg-gray-50">
          Easy <span className="ml-1 text-[10px] text-gray-500">[3]</span>
        </button>
      </div>

      {/* Nav + Progress */}
      <div className="flex items-center justify-between text-xs text-gray-600">
        <div className="flex items-center gap-2">
          <button onClick={prev} className="rounded-md border border-gray-200 bg-white px-2 py-1 hover:bg-gray-50">‚Üê Prev</button>
          <button onClick={next} className="rounded-md border border-gray-200 bg-white px-2 py-1 hover:bg-gray-50">Next ‚Üí</button>
        </div>
        <div>
          Card {progressIndex} of {Math.max(1, total)} ‚Ä¢ {streak} in a row
        </div>
      </div>
    </div>
  );
}


================================================================================
üìÑ File: src\tutorials\shell\components\QuizMCQ.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";

/**
 * QuizMCQ ‚Äî multi-question, single-answer MCQ with two-step check
 *
 * Props
 * - questions: Array<{
 *     id?: string;
 *     prompt: React.ReactNode;
 *     options: Array<{ id?: string; label: React.ReactNode; correct?: boolean; rationale?: React.ReactNode }>;
 *   }>
 * - title?: string
 * - className?: string
 * - storageNamespace?: string  // optional, to namespace confidence stats in localStorage
 */

const LS_CONFIDENCE = (ns) => `${ns || "quiz"}:confidence`; // { [questionId]: { low, med, high } }

function safeParse(json, fallback) {
  try {
    return json ? JSON.parse(json) : fallback;
  } catch {
    return fallback;
  }
}

function loadConfidence(ns) {
  return safeParse(localStorage.getItem(LS_CONFIDENCE(ns)), {});
}
function saveConfidence(ns, obj) {
  localStorage.setItem(LS_CONFIDENCE(ns), JSON.stringify(obj));
}

// Fisher-Yates shuffle (pure)
function shuffle(arr) {
  const a = arr.slice();
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

export default function QuizMCQ({
  questions = [],
  // legacy props (single-question API)
  question,
  options,
  correctIndex,
  rationale,
  title,
  className = "",
  storageNamespace
}) {
  if (questions.length === 0 && question && Array.isArray(options)) {
    questions = [{
      prompt: question,
      options: options.map((label, i) => ({
        label,
        correct: i === (typeof correctIndex === "number" ? correctIndex : 0),
        rationale
      }))
    }];
  }

  // Normalise IDs so they are stable within this session
  const base = useMemo(() => {
    return questions.map((q, qi) => ({
      id: q.id || `q-${qi}`,
      prompt: q.prompt,
      options: q.options.map((o, oi) => ({ id: o.id || `o-${oi}`, label: o.label, correct: !!o.correct, rationale: o.rationale })),
    }));
  }, [questions]);

  // Build once-per-mount shuffled option orders per question (stable for the session)
  const [orderMap] = useState(() => {
    const m = new Map();
    base.forEach((q) => {
      const order = shuffle(q.options.map((_, i) => i));
      m.set(q.id, order);
    });
    return m;
  });

  // Question list and cursor (supports review mode where we swap to misses only)
  const [qIds, setQIds] = useState(() => base.map((q) => q.id));
  const [cursor, setCursor] = useState(0);
  const currentQ = useMemo(() => base.find((q) => q.id === qIds[cursor]), [base, qIds, cursor]);

  // Per-question interaction state
  // { [qid]: { selectedId, checked, locked, triedAgain, isCorrect, confidence?: 'low'|'med'|'high' } }
  const [state, setState] = useState({});

  // Track wrong answers for review mode
  const wrongSet = useMemo(() => {
    const s = new Set();
    for (const qid of qIds) {
      const st = state[qid];
      if (st?.checked && st?.isCorrect === false) s.add(qid);
    }
    return s;
  }, [qIds, state]);

  const inReview = useMemo(() => qIds.length > 0 && qIds.every((id) => wrongSet.has(id)), [qIds, wrongSet]);

  // Confidence stats (gentle nudge)
  const [confMap, setConfMap] = useState(() => loadConfidence(storageNamespace));
  useEffect(() => {
    setConfMap(loadConfidence(storageNamespace));
  }, [storageNamespace]);
  const lowConfidenceCount = useMemo(() => {
    let c = 0;
    for (const q of base) {
      const rec = confMap[q.id];
      if (!rec) continue;
      const { low = 0, med = 0, high = 0 } = rec;
      if (low > Math.max(med, high)) c++;
    }
    return c;
  }, [base, confMap]);

  function updateConfidence(qid, level) {
    setConfMap((prev) => {
      const next = { ...prev };
      const rec = next[qid] || { low: 0, med: 0, high: 0 };
      rec[level] = (rec[level] || 0) + 1;
      next[qid] = rec;
      saveConfidence(storageNamespace, next);
      return next;
    });
  }

  // Helpers
  const currentOptions = useMemo(() => {
    if (!currentQ) return [];
    const order = orderMap.get(currentQ.id) || currentQ.options.map((_, i) => i);
    return order.map((i) => currentQ.options[i]);
  }, [currentQ, orderMap]);

  const st = state[currentQ?.id] || {};

  function selectOption(optId) {
    if (!currentQ) return;
    if (st.locked) return; // locked after check until Try again or nav
    setState((prev) => ({ ...prev, [currentQ.id]: { ...st, selectedId: optId } }));
  }

  function checkAnswer() {
    if (!currentQ || !st.selectedId) return;
    const selected = currentQ.options.find((o) => o.id === st.selectedId);
    const isCorrect = !!selected?.correct;
    setState((prev) => ({
      ...prev,
      [currentQ.id]: { ...st, checked: true, locked: true, isCorrect },
    }));
  }

  function tryAgainOnce() {
    if (!currentQ || !st.checked || st.triedAgain) return;
    setState((prev) => ({
      ...prev,
      [currentQ.id]: { ...st, checked: false, locked: false, triedAgain: true },
    }));
  }

  function setConfidence(level) {
    if (!currentQ || !st.checked) return;
    // store locally and to localStorage
    setState((prev) => ({ ...prev, [currentQ.id]: { ...st, confidence: level } }));
    updateConfidence(currentQ.id, level);
  }

  function next() {
    setCursor((i) => Math.min(i + 1, qIds.length - 1));
  }
  function prev() {
    setCursor((i) => Math.max(i - 1, 0));
  }

  function reviewWrongOnes() {
    const misses = Array.from(wrongSet);
    if (misses.length === 0) return;
    setQIds(misses);
    setCursor(0);
  }

  function exitReview() {
    setQIds(base.map((q) => q.id));
    setCursor(0);
  }

  // Keyboard affordances for radios: allow arrow navigation between options
  const groupRef = useRef(null);
  useEffect(() => {
    const el = groupRef.current;
    if (!el) return;
    function onKey(e) {
      if (e.key !== "ArrowDown" && e.key !== "ArrowUp") return;
      const inputs = el.querySelectorAll('input[type="radio"]');
      const arr = Array.from(inputs);
      const idx = arr.findIndex((n) => n === document.activeElement);
      const delta = e.key === "ArrowDown" ? 1 : -1;
      const nextIdx = Math.max(0, Math.min(arr.length - 1, idx + delta));
      const nextEl = arr[nextIdx];
      if (nextEl) nextEl.focus();
    }
    el.addEventListener("keydown", onKey);
    return () => el.removeEventListener("keydown", onKey);
  }, [currentQ?.id]);

  if (base.length === 0) {
    return (
      <div className={`rounded-lg border border-gray-200 bg-white p-4 text-sm text-gray-600 ${className}`}>
        No questions.
      </div>
    );
  }

  const idxHuman = cursor + 1;
  const total = qIds.length;

  return (
    <div className={`mx-auto w-full max-w-3xl ${className}`}>
      {/* Header */}
      <div className="mb-4 flex flex-wrap items-center justify-between gap-3">
        <div className="min-w-0">
          {title && <h3 className="truncate text-base font-semibold text-gray-900">{title}</h3>}
          <div className="text-xs text-gray-500">Question {idxHuman} of {total}{lowConfidenceCount ? ` ‚Ä¢ Revisit: ${lowConfidenceCount} low-confidence item${lowConfidenceCount>1?"s":""}` : ""}</div>
        </div>
        <div className="flex items-center gap-2">
          {wrongSet.size > 0 && !inReview && (
            <button onClick={reviewWrongOnes} className="rounded-md border border-gray-200 bg-white px-2.5 py-1.5 text-xs font-medium hover:bg-gray-50">Review wrong ones ({wrongSet.size})</button>
          )}
          {inReview && (
            <button onClick={exitReview} className="rounded-md border border-gray-200 bg-white px-2.5 py-1.5 text-xs font-medium hover:bg-gray-50">Exit review</button>
          )}
        </div>
      </div>

      {/* Question */}
      <div className="mb-3 rounded-xl border border-gray-200 bg-white p-4 shadow-sm">
        <div className="mb-3 text-gray-900">{currentQ?.prompt}</div>

        <fieldset ref={groupRef} className="space-y-2" aria-describedby={`${currentQ?.id}-desc`}>
          <legend className="sr-only">Choose one answer</legend>
          {currentOptions.map((opt) => {
            const name = `q-${currentQ.id}`;
            const checked = st.selectedId === opt.id;
            const correct = !!opt.correct;
            const showMark = st.checked && (checked || correct);
            const mark = checked ? (correct ? "‚úÖ" : "‚ùå") : correct ? "‚úÖ" : "";
            return (
              <label key={opt.id} className={`group flex cursor-pointer items-start gap-3 rounded-lg border p-3 text-sm transition ${
                checked ? "border-blue-600 bg-blue-50" : "border-gray-200 hover:bg-gray-50"
              } ${st.locked ? "opacity-80" : ""}`}>
                <input
                  type="radio"
                  name={name}
                  className="mt-0.5 h-4 w-4 shrink-0 cursor-pointer appearance-none rounded-full border border-gray-400 outline-none focus-visible:ring-2 focus-visible:ring-blue-600 checked:border-blue-600 checked:bg-blue-600"
                  checked={checked}
                  onChange={() => selectOption(opt.id)}
                  disabled={st.locked}
                  aria-describedby={`${currentQ.id}-desc`}
                />
                <div className="flex min-w-0 flex-1 items-start justify-between gap-2">
                  <div className="min-w-0 text-gray-900">{opt.label}</div>
                  {showMark && <div className="ml-2 shrink-0 text-base">{mark}</div>}
                </div>
              </label>
            );
          })}
        </fieldset>

        {/* Rationale */}
        {st.checked && (
          <div id={`${currentQ?.id}-desc`} className="mt-3 rounded-md bg-gray-50 p-3 text-sm text-gray-700">
            {(() => {
              const chosen = currentQ.options.find((o) => o.id === st.selectedId);
              return chosen?.rationale || (st.isCorrect ? "Correct!" : "That isn't quite right‚Äîtry reviewing the key idea above.");
            })()}
          </div>
        )}
      </div>

      {/* Controls */}
      <div className="mb-3 flex flex-wrap items-center justify-between gap-3">
        <div className="flex items-center gap-2">
          <button onClick={prev} disabled={cursor === 0} className="rounded-md border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-800 disabled:opacity-50 hover:bg-gray-50">‚Üê Prev</button>
          <button onClick={next} disabled={cursor === total - 1} className="rounded-md border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-800 disabled:opacity-50 hover:bg-gray-50">Next ‚Üí</button>
        </div>
        <div className="flex items-center gap-2">
          {!st.checked && (
            <button onClick={checkAnswer} disabled={!st.selectedId} className="rounded-lg bg-blue-600 px-4 py-2 text-sm font-semibold text-white disabled:opacity-50 hover:bg-blue-700">Check</button>
          )}
          {st.checked && !st.isCorrect && !st.triedAgain && (
            <button onClick={tryAgainOnce} className="rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium hover:bg-gray-50">Try again</button>
          )}
        </div>
      </div>

      {/* Confidence check */}
      {st.checked && (
        <div className="mb-2 flex flex-wrap items-center gap-2 text-xs text-gray-600">
          <span>How confident were you?</span>
          {(["low", "med", "high"]).map((lvl) => (
            <button
              key={lvl}
              onClick={() => setConfidence(lvl)}
              className={`rounded-full border px-2.5 py-1 font-medium transition ${
                st.confidence === lvl ? "border-blue-600 bg-blue-50 text-blue-700" : "border-gray-200 bg-white text-gray-700 hover:bg-gray-50"
              }`}
            >
              {lvl === "low" ? "Low" : lvl === "med" ? "Med" : "High"}
            </button>
          ))}
        </div>
      )}
    </div>
  );
}




================================================================================
üìÑ File: src\tutorials\shell\components\RichMarkdown.jsx
================================================================================

import React, { useEffect, useMemo, useRef, useState } from "react";
import ReactMarkdown from "react-markdown";
import "katex/dist/katex.min.css";
import remarkGfm from "remark-gfm";
import remarkMath from "remark-math";
import rehypeKatex from "rehype-katex";
import Callout from "./Callout";
import { Link as LinkIcon, Clipboard } from "lucide-react";

/**
 * RichMarkdown.jsx
 *
 * Goals implemented (no new files):
 * - Readable width + typography (70‚Äì75ch), gentle line-height.
 * - Code blocks with contrasting background + Copy button.
 * - Anchored h2/h3 with autolink icons; sticky in-page TOC (desktop only).
 * - Admonitions: blockquotes beginning with "üí°" (idea) or "‚ö†Ô∏è" (warn) ‚Üí <Callout/>.
 * - KaTeX macros for \E, \Var, \Prob; consistent spacing for inline/display.
 * - Inline glossary popovers: first time a term appears, show a tooltip with
 *   ‚ÄúAdd as flashcard‚Äù. Provide terms via props.glossary (default basic set).
 */

const DEFAULT_GLOSSARY = {
  CLT: "Central Limit Theorem: as n grows, the standardized sample mean tends to a normal distribution.",
  PMF: "Probability Mass Function: P(X=x) for discrete X.",
  PDF: "Probability Density Function: f(x) for continuous X where P(a<x<b)=‚à´ f(x) dx.",
  CDF: "Cumulative Distribution Function: F(x)=P(X\n‚â§x).",
  Expectation: "Expected value (mean) of a random variable.",
  Variance: "Measure of spread: Var(X)=E[(X-\nE[X])^2].",
};

// Simple slugify for heading ids
function slugify(str) {
  return String(str)
    .toLowerCase()
    .normalize("NFD")
    .replace(/\p{Diacritic}/gu, "")
    .replace(/[^a-z0-9\s-]/g, "")
    .trim()
    .replace(/[\s_-]+/g, "-");
}

// A tiny rehype plugin to wrap glossary terms with <span data-term> markers.
// It replaces raw text nodes by splitting on term boundaries.
function rehypeGlossary(terms) {
  const keys = Object.keys(terms || {});
  if (keys.length === 0) return () => {};
  const pattern = new RegExp(`\\b(${keys.map(k => k.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&")).join("|")})\\b`, "g");
  return () => (tree) => {
    visitText(tree, (textNode, parent, index) => {
      const value = textNode.value;
      if (!pattern.test(value)) return;
      const parts = [];
      let lastIndex = 0;
      value.replace(pattern, (m, _g, offset) => {
        if (offset > lastIndex) parts.push({ type: "text", value: value.slice(lastIndex, offset) });
        parts.push({ type: "element", tagName: "span", properties: { "data-term": m }, children: [{ type: "text", value: m }] });
        lastIndex = offset + m.length;
        return m;
      });
      if (lastIndex < value.length) parts.push({ type: "text", value: value.slice(lastIndex) });
      parent.children.splice(index, 1, ...parts);
      return index + parts.length;
    });
  };
}

// minimal text visitor
function visitText(tree, fn) {
  (function walk(node, parent, index) {
    if (!node) return;
    if (Array.isArray(node.children)) {
      for (let i = 0; i < node.children.length; i++) {
        const child = node.children[i];
        if (child.type === "text") {
          const ret = fn(child, node, i);
          if (typeof ret === "number") i = ret; // advance if replaced
        } else {
          walk(child, node, i);
        }
      }
    }
  })(tree, null, 0);
}

function normalizeMathDelimiters(raw) {
  if (!raw) return "";
  // \(...\)  -> $...$
  const inline = raw.replace(/\\\(([\s\S]*?)\\\)/g, (_m, g1) => `$${g1}$`);
  // \[...\]  -> $$...$$  (allow newlines inside)
  const display = inline.replace(/\\\[([\s\S]*?)\\\]/g, (_m, g1) => `$$${g1}$$`);
  return display;
}

export default function RichMarkdown({
   content = "",
   source,                     // ‚Üê accept legacy prop
   className = "",
   glossary = DEFAULT_GLOSSARY,
 }) {
   // prefer explicit content, otherwise use legacy `source`
  const md = normalizeMathDelimiters(content || source || "");
  const containerRef = useRef(null);
  const [toc, setToc] = useState([]); // { id, text, level }
  const [seenTerms, setSeenTerms] = useState(() => new Set());

  // Build heading anchors + TOC after render
  useEffect(() => {
    const el = containerRef.current;
    if (!el) return;

    // Assign ids to h2/h3 if missing, collect TOC
    const nodes = el.querySelectorAll("h2, h3");
    const newToc = [];
    nodes.forEach((n) => {
      const text = n.textContent || "";
      if (!n.id) n.id = slugify(text);
      const level = n.tagName === "H2" ? 2 : 3;
      // Inject autolink icon if not present
      if (!n.querySelector("a.anchor")) {
        const a = document.createElement("a");
        a.href = `#${n.id}`;
        a.className = "anchor ml-2 inline-flex align-middle opacity-0 group-hover:opacity-100 focus:opacity-100";
        a.setAttribute("aria-label", "Anchor link");
        a.innerHTML = "<svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg>";
        n.classList.add("group");
        n.appendChild(a);
      }
      newToc.push({ id: n.id, text, level });
    });
    setToc(newToc);

    // Glossary popovers ‚Äî attach once per term instance (first time only)
    const termEls = el.querySelectorAll("span[data-term]");
    termEls.forEach((span) => {
      const term = span.getAttribute("data-term");
      if (!term || seenTerms.has(term)) return;
      // Wrap in tooltip container
      span.classList.add("underline", "underline-offset-2", "decoration-dotted", "cursor-help");
      span.setAttribute("title", glossary[term] || "");
      // On first hover/click, show simple tooltip/popover
      const handler = () => {
        // Mark as seen so we don't spam tooltips across the page
        setSeenTerms((s) => new Set(s).add(term));
        // Optional: offer Add as flashcard
        const description = glossary[term] || term;
        try {
          window.dispatchEvent(new CustomEvent("glossary:seen", { detail: { term } }));
        } catch {}
        // Simple ephemeral popover near the element
        const rect = span.getBoundingClientRect();
        const pop = document.createElement("div");
        pop.className = "fixed z-50 max-w-xs rounded-lg border border-gray-200 bg-white p-3 text-xs shadow-lg";
        pop.style.top = `${Math.max(8, rect.top + window.scrollY - 8)}px`;
        pop.style.left = `${Math.min(window.innerWidth - 260, rect.left + window.scrollX)}px`;
        pop.innerHTML = `
          <div class="mb-2 font-semibold">${term}</div>
          <div class="mb-2 text-gray-700">${escapeHtml(description)}</div>
          <div class="flex items-center justify-end gap-2">
            <button data-action="flash" class="rounded-md border border-gray-200 bg-white px-2 py-1">Add as card</button>
            <button data-action="close" class="rounded-md border border-gray-200 bg-white px-2 py-1">Close</button>
          </div>`;
        document.body.appendChild(pop);
        function cleanup() { pop.remove(); span.removeEventListener("click", cleanup); }
        pop.addEventListener("click", (e) => {
          const t = e.target;
          if (t && t.getAttribute) {
            const act = t.getAttribute("data-action");
            if (act === "flash") {
              try {
                window.dispatchEvent(new CustomEvent("flashcards:add", { detail: { front: term, back: description } }));
              } catch {}
              cleanup();
            } else if (act === "close") cleanup();
          }
        });
        // Close on outside click
        setTimeout(() => {
          const onDoc = (ev) => { if (!pop.contains(ev.target)) { cleanup(); document.removeEventListener("mousedown", onDoc); } };
          document.addEventListener("mousedown", onDoc);
        }, 0);
      };
      span.addEventListener("click", handler, { once: true });
    });
  }, [md, glossary, seenTerms]);

  // Renderers
  const components = useMemo(() => ({
    p: ({ children, ...props }) => {
      const kids = React.Children.toArray(children);
      // If ANY child is a React element (not just a string), render a <div>.
      // This covers our custom <div><pre>‚Ä¶</pre></div> code block, callouts, etc.
      const hasElementChild = kids.some((c) => React.isValidElement(c));
      return hasElementChild
        ? <div {...props} className="mb-4">{children}</div>
        : <p {...props} className="mb-4 leading-7 text-slate-800">{children}</p>;
    },

    h2: ({ node, children, ...props }) => {
      const text = plainText(children);
      const id = slugify(text);
      return (
        <h2 id={id} {...props} className="group scroll-mt-24 text-xl font-semibold">
          {children}
          <a href={`#${id}`} aria-label="Anchor link" className="anchor ml-2 inline-flex align-middle opacity-0 group-hover:opacity-100 focus:opacity-100">
            <LinkIcon size={14} />
          </a>
        </h2>
      );
    },
    h3: ({ node, children, ...props }) => {
      const text = plainText(children);
      const id = slugify(text);
      return (
        <h3 id={id} {...props} className="group scroll-mt-24 text-lg font-semibold">
          {children}
          <a href={`#${id}`} aria-label="Anchor link" className="anchor ml-2 inline-flex align-middle opacity-0 group-hover:opacity-100 focus:opacity-100">
            <LinkIcon size={14} />
          </a>
        </h3>
      );
    },
    blockquote: ({ node, children, ...props }) => {
      // Detect first child text token starting with üí° or ‚ö†Ô∏è
      const raw = plainText(children).trim();
      const hint = raw.startsWith("üí°") ? "idea" : raw.startsWith("‚ö†Ô∏è") ? "warn" : null;
      if (!hint) {
        return (
          <blockquote {...props} className="border-l-4 border-gray-300 pl-3 text-gray-700">{children}</blockquote>
        );
      }
      const text = raw.replace(/^([üí°‚ö†Ô∏è]\s*)/, "");
      return (
        <Callout variant={hint}>
          <span>{text}</span>
        </Callout>
      );
    },
    code: ({ inline, className, children, ...props }) => {
      const txt = String(children || "");
      if (inline) {
        return (
          <code className="rounded bg-gray-100 px-1.5 py-0.5 text-[0.9em]">{children}</code>
        );
      }
      const lang = /language-([\w-]+)/.exec(className || "")?.[1] || "";
      const codeId = `code-${Math.random().toString(36).slice(2)}`;
      const copy = async () => {
        try {
          await navigator.clipboard.writeText(txt);
          const btn = document.getElementById(codeId);
          if (btn) {
            const old = btn.textContent;
            btn.textContent = "Copied";
            setTimeout(() => (btn.textContent = old), 1200);
          }
        } catch {}
      };
      return (
        <div className="relative">
          <pre className="overflow-auto rounded-lg bg-gray-900 p-4 text-gray-100"><code className={className} {...props}>{txt}</code></pre>
          <button id={codeId} onClick={copy} className="absolute right-2 top-2 inline-flex items-center gap-1 rounded-md border border-gray-200 bg-white/90 px-2 py-1 text-xs font-medium text-gray-800 hover:bg-white">
            <Clipboard size={14} /> Copy
          </button>
          {lang && <span className="absolute bottom-2 right-2 rounded bg-black/50 px-1.5 py-0.5 text-[10px] text-white">{lang}</span>}
        </div>
      );
    },
  }), []);

  // KaTeX macros
  const katexOptions = useMemo(() => ({
    throwOnError: false,
    macros: {
      "\\E": "\\mathbb{E}",
      "\\Var": "\\mathrm{Var}",
      "\\Prob": "\\mathbb{P}",
    },
  }), []);

  return (
    <div className={`relative mx-auto w-full max-w-5xl ${className}`}>
      <style>{`
        .rm-prose { max-width: 75ch; }
        .rm-prose p { line-height: 1.8; }
        .rm-prose .katex-display { margin: 1rem 0; }
        .rm-prose .katex { font-size: 1.02em; }
      `}</style>
      <div ref={containerRef} className="rm-prose prose prose-slate">
        <ReactMarkdown
          remarkPlugins={[remarkGfm, remarkMath]}
          rehypePlugins={[rehypeKatex, rehypeGlossary(glossary)]}
          components={components}
        >
          {md}
        </ReactMarkdown>
      </div>
    </div>
  );
}

// Helpers
function plainText(children) {
  return React.Children.toArray(children).map((c) => (typeof c === "string" ? c : (c?.props?.children ? plainText(c.props.children) : ""))).join("");
}

function escapeHtml(str) {
  return String(str)
    .replaceAll("&", "&amp;")
    .replaceAll("<", "&lt;")
    .replaceAll(">", "&gt;")
    .replaceAll('"', "&quot;")
    .replaceAll("'", "&#039;");
}




================================================================================
üìÑ File: src\utils\slugify.js
================================================================================

// src/utils/slugify.js
export function slugify(input = "") {
  return String(input)
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, "")
    .replace(/\s+/g, "-")
    .replace(/-+/g, "-");
}

export function ensureSlug(post) {
  if (!post) return post;
  return { ...post, slug: post.slug || slugify(post.title || String(post.id || "")) };
}

export function makePostPath(post) {
  const p = ensureSlug(post);
  return `/post/${p.slug}`;
}


